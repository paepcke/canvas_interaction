 now that we've learned about functional dependencies let's talk about how they're used to create relations that are in boyce codd normal_form
 very quick reminder about relational design by decomposition
 the database designer creates mega relations that contain all the information to be captured and specifies properties of the data to be captured
 the system uses the properties to decompose the relations into smaller ones and those final decomposed relations satisfy what is known as a normal_form
 they don't have anomalies and they don't lose information
 functional dependencies are used to create relations in boys codd normal_form and multi doubt value dependencies are used to create relations in fourth normal_form
 this video talks about the process of using functional dependencies to create relations in boyce codd normal_form
 let's start by defining what it means to do a decomposition of a relational schema
 let's suppose we have a relation r with a set of attributes a through a n we can decompose r into two relations
 we'll call them r and r such that r has
 i'll just label them b through b k and c through c and let's say let me use the notation for the list of attributes a b and c that i've been using in other videos
 so r and r are a decomposition of r first of all if the attributes that capture b union c are equal to the set of attributes we started with a
 in other words recovering all of the attributes and furthermore this is the tricky part r natural join r equals r so let me draw this pictorially
 so here's our relation r and all of our attributes together are the a attributes
 and then we're going to decompose r into r and r
 so let's say this first set of attributes here are the b attributes and the second bunch of attributes here with some overlap are the c attributes
 so now r consists of this portion of r and the purple part here now is r
 so clearly the b and c attributes are equal to the original attributes and then is the join of r and r giving us r now remember all of this is logical
 we don't have r itself and we don't have the data and we don't have r and r so everything is being done at the schema level
 and we will explore later how we can guarantee that this join does return r and not something else
 now just using a little bit more relational algebra here let me mention that r can be defined as the projection on the b attributes of r and then in purple r is the projection of the c attributes of r so again all of this is logical but the idea is that when we do the projection if there are duplicates that are present simply because we have say different values in the remaining attributes those duplicates don't have to be retained in the projection
 we saw in some of our examples in other videos where we had redundancy because we were capturing information multiple times that we didn't need to
 and we're going to see that what boyce codd normal_form really does is separate the relations so that we capture each piece of information exactly once
 i know that's very abstract now but when we see examples we'll see how that works
 so let's look at two possible decompositions of the student relation and see which ones are correct
 so let's start with a decomposition where we take we're gonna decompose student into s and s and in s we'll put the social security number name address let me abbreviate a little bit here and the high school code but no more high school information the gpa and the priority
 and then in relation we'll put the high school code and we'll put the high school name and the high school city
 so you can see what i've done done here is i've separated out the high school information into a separate relation
 so first of all is this a correct decomposition in the sense that a union b equals c certainly all of the attributes are still present and furthermore if you think about it and we'll formalize this concept later s join s and that's going to occur by the way based on this highest school code value
 s join s in this case will for the data that you would expect equal student
 again we'll formalize that momentarily
 now let's look at a second possible decomposition of the student relation again into two relations s and s
 in the first one we'll put the first bunch of attributes
 so we'll put the social security number the student's name their address their high school code
 let's say high school name and high school city
 and then in the second relation we'll put again the student name
 we'll put the high school name and we'll put say the gpa and lastly the priority
 so again is this a decomposition
 well certainly again we have the case that the a union b equals c in other words we've captured all of the attributes of the student relation in our decomposed relation and do we think it's the case that if we join s and s then we'll get the student relation back and i'll put a question mark here and you know of course the answer is going to be no
 when we join back we'll be joining in this case on the student name here and the high school name and likely these are not unique values so when we join back we may be getting information together that doesn't really belong together
 and again we'll be formalizing that and seeing additional examples momentarily
 so now let's dig a little further into the actual process of decomposition
 so first of all we definitely want good decomposition
 so as we saw a good decomposition must capture all of the attributes of course
 but the more important property is that this reassembly by the join produces the original relation
 sometimes that's called by the way a lossless join property
 but the second thing that we want is not only that we have a good decomposition but that the relations that we decompose into are good relations
 and those relations are going to be the ones that are in boyce codd normal_form
 so let me first define formally boyce codd normal_form and then we'll go back to figure out an algorithm for automatically decomposing relations using good decompositions into decomposed relations that are in boyce codd normal_form
 so here's the formal definition of when a relation is in boyce codd normal_form usually abbreviated b c and f a relation r with functional dependencies is in boyce codd normal_form if every functional dependencies is such that it's left hand side is a key ok let's see what happens when it's not the case that the left hand side of a functional dependency is not the key and we'll see why that's a bad design
 so here's our relation r and here's a set attributes a on the left side of the functional dependency attribute b and the rest
 and let's just put in some values
 so let's suppose that we have two tuples here with the same a value
 then by our functional dependency we're going to have the same b value and the rest can be anything
 what has happened here is that we've captured the piece of information the connection between a and b twice
 and the reason that's allowed to happen is because a is not a key
 if a were a key we would not be allowed to have the situation where we have these two tuples both present in the relation
 so this relation is not in voice cod normal form
 and this functional dependency here is what we would call a b c and f violation
 that violation is causing us to have redundancy in our relation and that also give us as we've seen the update anomalies and deletion anomalies
 let me clarify a little bit the requirement that the left hand side of functional dependencies have to be key so that's what tells us we're in boyce codd normal form
 now i'm not saying that the left hand side of every functional dependency has to be declared as the primary key for a relation only that it is in fact a key
 and as you might recall the definition of a key is an attribute that determines all other attributes if you're thinking about functional dependencies or if you don't have any duplicates in your relation then a key is a value that is never duplicated across tacets
 so if you think about it for a second you'll realize that whenever a set of attributes is a key so is any superset of those attributes
 so if a is a key then so is ac and so is a c d and so on
 so sometimes you'll see in the definition of boyce codd normal form this wording not is a key but will be contains a key which in fact is exactly the same thing or sometimes it will even say is a super key and a super key is a key or a super set of a key
 again all of those are saying exactly the same thing but i just wanted to clarify because different wording and sometimes different notation is used for that concept
 so far things have been pretty abstract
 let's try to get a bit more concrete here
 let's look at two examples and determine if those examples are in b c and f
 remember to determine is something is in b c and f we need the relational schema and a set of functional dependencies
 so here we have our student relation and this is a set of functional dependencies we had in earlier examples where the social security number is determining the name address and gpa
 that means that if there's two tuples with the same social security number they will have the same name address and gpa
 that's the same student and they only live in one place
 the gpa determines the priority so any two students with the same gpa will have the same priority and finally the high school code determines the high school name and city
 so the high school is a unique identifier for a particular high school in a city
 so those are our three functional dependencies in order to test whether this is relation is in normal form with respect to the functional dependencies we need to know what the key of the relation is or the set of keys of the relation and we worked on this in an earlier video using the closure idea so i'll just remind you now that for this relation this set of functional dependencies there's one key or one minimal key and that's the social security number together with the high school code those two attributes do functionally determine all other attributes in the relation and therefore they are together forming a key
 so now to check if we're in boyce codd normal_form we have to ask the question does every functional dependency have a key on its left hand side
 and the answer of course is no not all
 in fact the reality is that no functional dependency in this case has the key on the left hand side
 we have three left hand sides and no of them have or contain our one key
 if you've given any thought at all to this database design you will see that it's not a good one
 it's combining too much information in one place which is our basic idea that we start with a mega relation and break it down
 and so what we're going to do is use these functional dependencies and specifically the fact that those are bcnf or boyce codd normal_form violations to break this relation down into one that is a better design
 now let's look at a second example our apply relation to see if this one is in boyce codd normal_form
 so in this case as a reminder we have social security number college state date and major
 so the date is the date of application the major is major the student is applying for at that particular college and we'll have one functional dependency which effectively says in english that each student may apply to each college only once and for one major
 now let's compute the key for this relation or keys for this relation based on the functional dependency
 well it's pretty straightforward that these three attributes form a key because they determine the other attributes in the relation and therefore they determine all the attributes of the relation
 furthermore we can see that our one and only functional dependency obviously has a key on its left hand side and so so this relation is in fact already in boyce codd normal form and we'll see there's no way to decompose this relation further into a better design
