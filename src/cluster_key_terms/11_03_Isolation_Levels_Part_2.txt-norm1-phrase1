 let's go one step up to the next isolation level which is called read committed
 as you can probably guess this one specifies that transactions may not perform dirty reads
 they may only read data values whose updates by other transactions have been committed to the database
 now this isolation level is stronger but it still doesn't guarantee global serializability
 let's take a look through an example
 our first transaction t is the same one modifying the gpa for students from large high schools
 our second transaction is the one where we are going reset the isolation level
 in this case to read committed
 and it is going to perform two statements
 one of them is going to read the average gpa from the student table and the other is going to read the maximum gpa from the student table
 so let's look at one behavior that's consistent with isolation level but we will see is not serializable
 let's suppose that this average gpa is read before transaction t but the max gpa is computed after transaction t
 so the average will take will not take into account the increases but the max will take account will take into account the increases
 so let's see if this is equivalent to any serial order
 is it equivalent to t followed by t
 well it's certainly not because t 's first statement is reading the state of the table before t and not the state of the table afterward although c second statement is reading the state of the table afterward
 similarly it's not equivalent to t followed by t because t is reading in its second statement the state of the database after t
 so there's no equivalent serial order
 but again perhaps that's not needed for the particular application
 and by using read committed we do get somewhat more performance then we would have if we were serializable
