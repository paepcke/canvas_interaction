 in this demo we're going to run a number of queries in the xquery language
 we'll be using the same xml data we've used for previous demos
 here we can see the book store database with a number of books four books and a few magazines
 xquery language is quite complex
 certainly more complex than sql
 we'll be covering a number of the constructs but we won't be able to cover everything and even the ones we cover will take a little getting used to
 i highly suggest that you take time to pause the video to take a look at the queries or even better download the data and the queries and try them for yourself
 our first query is a fairly simple one demonstrating a flwor or f l w o r expression
 that's the basic expression of the xquery language
 here we only have the f w and r part for where and return
 this query is going to return the titles of books that cost less than ninety dollars where ullman is an author
 let's go ahead and take a look at the constructs of the query
 the four construct as we described has an expression in this case it's an xpath expression that returns the books in our document
 it binds the variable dollar b to each book one at a time and run the rest of the query for that finding the next thing it does is check whether the price of the book is less than ninety and whether there exists an author slash author the last name under the book element where the value of that is ullman
 in the case where both of these conditions are true it will return the title of the book
 let's run the query
 when we run the query we see that we get a result that's formatted as xml with two titles of the books that cost less than ninety and ullman is an author
 our next query is a bit more complicated
 it still consists of a for where and return clause but in the where clause we have existential quantification and then in the return clause we're constructing our result in xml
 what this query looks for is books where the title of the book contains one of the author's first names
 for each of those books it returns the book title and the first name of the author
 so we again in our for clause bind dollar b to each each book in the database
 then in our where condition what we look for is a first name subelement of the book which gets bound to fn such that that the title of the book contains that first name
 so these as a existential quantified expression some in and satisfies our keywords
 so some binds to a variable which we bind in the set and then we check if any of those bindings satisfy this condition
 again i urge you to take a close look at this
 you may want to pause the video
 once we've determined that our book satisfies the condition then in return clause we're constructing an xml element where the opening and closing tags are book
 and then within that we return the title of the book and we return the first name of all authors of the book
 whew
 so let's run the query
 we find that there are two books satisfying the conditions where there is a first name in the title hector and jeff's database hints and jennifer's economical database hints
 now there is tricky thing here which is that in hector and jeff's database hints that title does in fact contain a first name contains hector but it does not contain jeffrey
 our query returned the title of books satisfying the condition with every first name of an author of that book
 what we're going to do next is restrict the result of the query to only return the first names that are actually part of the book title
 what we're going to do is modify the second portion of our return statement to be a little more complicated
 in fact we're gonna put an entire for return a query right inside the braces here
 in xquery we can mix and match queries and expressions as we wish
 so what i've done now is i'm again returning the title but in the second clause instead of returning all the first names i'm going to find the first names that are within the book and when the title contains the first name then i'll return that one
 so effectively i'm restricting the first names returned to just be the ones that appear in the title
 let's run the query and we can see that correctly jeffrey disappeared from the first book element returned
 our next query again demonstrates a few new constructs
 first of all we'll be using the let clause in this query rather than the for clause
 second of all we'll be showing some aggregation
 and finally we've embedded the full query inside xml
 so we've put averages opening and closing tags for our result and within that we're putting our entire query
 our query says that we're going to assign the variable key list to the result of this expression
 so remember the for clause is an iterator while the let clause is an assignment
 so this expression is going to find all of the price attributes in the database assign it the p list as a list and then it will return the average of the elements in that list
 let's go ahead and run the query and we see that our average book price is sixty five
 we can actually run this query in an even more compact fashion we can assign variable 'a' to be the average of this entire expression here and then we can just return 'a'
 not much more compact but perhaps a little bit more intuitive
 let's do that let's erase the answer to run the query again and again we get the same result
 now let's see a query where we use both the let and the for expressions
 in this query we're going to start by assigning dollar a to the average book price just like we did in the previous query and then we're going to find all books where the price of the book is below average
 so we'll again as in previous queries assign dollar b one at a time to the books in our database and then for each one we'll check if the price is less than the average price that we had from our let clause
 if it is we'll return the book element and we'll return the title of the book and we'll put as a subelement in this book element the price
 and here we can see where we're taking an attribute and we're turning it into an element
 so we have our attribute the price we obtain the data as we saw we needed to do in the x demo and we place it inside the price element
 let's run the query and we see indeed that we have two prices whose books are below average and here we've converted the price from an attribute to a sub element
 as a reminder the flwor expression in xquery has a for let wear order by and return
 we see in all of the clauses except the order by
 so let's see the order by in this example
 we're going to find the title and prices of books just as we found before
 we'll convert the price to a sub element
 but in this case we want to order the result by the price of the book
 so we do so by adding this clause here between the for and return saying we want to order by the price easy enough
 we run the query and we see out result
 actually it doesn't look quite right does it
 we have one hundred before and eighty five
 well that's because price is actually a string and so it was doing a lexical graphic ordering of the string
 we can fix that easily by calling a built in function called xs int that converts that value to an integer
 when we run the query now we get the correct ordering based on the values of the price
 now that we've seen ordering let's take a look at duplicate elimination
 let's a query that finds all the last names in our database
 so we write a simple query that says for all names in the xpath expression that finds the last names and just as a reminder here we use the double slash that looks at any depth in the xml tree and picks out the last names will return those last names and we know that these are our last names and we've got many repeats of them because these last names appear several times in the database
 so let's see about getting rid of those repeats
 there is a built in function in xquery called distinct values
 so what we can do is add distinct values here in our for clause
 we can apply it to the last name and now our dollar n will be bound to each value only once and then we'll return the result
 we run the query and we find that we have our three last names appearing only once but it's probably not quite what we wanted
 this time when we run distinct values it just turns these three values into three separate strings and the returns one at a time rather than embedding them with the last name tag which was what we got when we didn't use distinct values
 so if we want the last name tag then we can add the last name here to our return clause let's just put in the opening tag and the closing tag was put in for us
 so let's put dollar n here
 so now we've added opening and closing tags to our previous query we run it and whoops what do we get we got dollar n this is a reminder that when we write a return clause if we want actually have an expression evaluated in the curly brackets
 so by putting dollar n in curly brackets here now the execution engine will actually evaluate this query and put the result within the opening and closing tags we run the query and now finally we got exactly what we were looking for
 the three last names that appear in the database with the duplicates eliminated
 in a previous query we saw existential quantification in the where clause
 we were using the some keyword
 s o m e now we're going to see universal quantification in the where clause
 so for all and for that we use the every keyword
 what this query finds is books where every author's first name includes the letter j
 once again we use the for clause to bind b to every book in the database and then for each book we check our where clause
 our where clause requires that every first name that's a sub element in that book satisfies the condition where the first name contains the letter j
 if we have such a book then we return it as a result of the query
 so now we can see that our result is a first course in database systems and jennifer's economical database hints because for both of those all of the first names include the letter j
 this query demonstrates what i like to call a self join because it's combining two copies of the book data
 specifically what the query is looking for are titles of books that share a common author and we'll assume we're just looking for common last names
 this is also the first query we're seeing where we have two copies of the for clause
 so we're setting up two iterator variables essentially one called b and one called b that are both iterating over the books in the database
 if you'd like to think of this in relational terms it would be similar to having two copies of the book table one of them bound to variable b and one to variable b
 then what we look for in the where clause is whether b and b have an author last name in common
 and we do that by checking these two xpath expressions and seeing if they're equal
 now we saw this behavior in xpath and we're seeing it again here where the where clause has effectively an existential quantification occurring automatically
 what it's looking for is if there is some last name under b that is equal to some last name under b even if b or b have many last names
 in the case where that equality is satisfied then we will construct a book pair where we return the first title and the second title
 and here we're taking the titles which were originally attributes
 oh no i'm sorry those were originally sub elements
 we're taking those sub element titles and we're calling them title and title
 so let's go ahead and run the query and we did get a bunch of book pairs probably more than we expected
 now all these books do in fact have a common common last name in their authors but what we forgot to do was eliminate books with themselves
 because of course every book has in common a last name with itself
 so let's modify our query so that we return only books where they are two different books and we can do that fairly easily by just saying b title is not equal to b title
 okay here we we go
 we run the query and we got an error because i typed bt instead of b
 let's run that again
 alright
 and now we see that we now are not getting the pairs of books with themselves
 we're still perhaps getting more than we expected however
 what's going on
 well one thing we're seeing is that we're getting every pair twice in both orders if you take a look at the data
 so this is a same old trick that you may remember back from the relational query examples instead of doing not equals let's try doing less than
 in other words we're going to return each pair once and we're going to have the lexical graphically lesser book listed first
 now we've run the query again and now we see we actually got what we were expecting
 as our grand finale we're going to invert our bookstore database
 the way we set up our xml data we had our books and then underneath our books we had the authors of the books
 what if we want to instead our data constructed where we have the authors as the outer elements and within each author we list the books that they've written
 now to understand this query you're absolutely going to need to pause the video
 let me just briefly show what's going on
 but again it would take quite some time to go through every detail
 the way we are going to construct our inverted bookstore is to find the authors by last name as the outermost portion of our query
 for each author's last name we're going to get their first names and then we're going to return the author with the first name the last name and next find all of the books that were written by that author return the book with their isbn price title
 okay
 again i urge you to pause the video and look very closely at what's going on
 or even better download the data in the query run it yourself and play with it until you understand it
 let's of the query and we'll see our result
 just scroll up a little bit here
 and we'll see how the query did effectively invert the bookstore
 now we have our authors as the outermost elements
 within each author the first one jeffrey ullman we have the books that were written by that author including their isbn and price as attributes and the title as a sub element
 now in my original version of the query i didn't include the edition or the remark since those didn't appear in every book
 but in fact it doesn't cause any problem at all to add those in
 so let me just add right here the edition
 so we're using dollar b as our variable for the book and the edition is an attribute
 again not every book has an edition but we'll see that it's not going to cause a problem when it doesn't
 and similarly down here we'll include the remark again for those books that include them
 let's run the query and let's take a look at our results and see what happened
 so for jeffrey ullman's first book we got the edition for the second book we got the remark and everything just worked out just fine
 so again there is our inverted bookstore
 that concludes our demonstration of the xquery language
 i'll again emphasize that it's a very large language very powerful
 we've seen a number of different constructs
 we've written some pretty interesting queries
 but to fully understand the language you'll need to run a bunch of queries for yourself and experiment with how it works
