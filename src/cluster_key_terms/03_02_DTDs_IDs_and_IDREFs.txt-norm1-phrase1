 in the previous video we learned the basics of xml
 in this video we're going to learn about document type descriptors also known as dtds and also id and id ref attributes
 we learned that well formed xml is xml that adheres to basic structural requirements a single root element matched tags with proper nesting and unique attributes within each element
 now we're going to learn about what's known as valid xml
 valid xml has to adhere to the same basic structural requirements as well formed xml but it also adheres to content specific specifications
 and we're going to learn two languages for those specifications
 one of them is document type descriptors or dtds and the other a more powerful language is xml schema
 specifications in xml schema are known as xsds for xml schema descriptions
 so as a reminder here's how things worked with well formed xml documents
 we sent the document to a parser and the parser would either return that the document was not well formed or it would return parsed xml
 now let's consider what happens with valid xml
 now we use a validating xml parser and we have an additional input to the process which is a specification either a dtd or an xsd
 so that's also fed to the parser along with the document
 the parser can again say the document is not well formed if it doesn't meet the basic structural requirements
 it could also say that the document is not valid meaning the structure of the document doesn't match the content specific specification
 if everything is good then once again parsed xml is returned
 now let's talk about the document type descriptors or dtds
 we see a dtd in the lower left corner of the video but we won't look at it in any detail because we'll be doing demos of dtds a little later on
 a dtd is a language that's kind of like a grammar and what you can specify in that language is for a particular document what elements you want that document to contain the tags of the elements what attributes can be in the elements how the different types of elements can be nested
 sometimes the ordering of the elements might want to be specified and sometimes the number of occurrences of different elements
 dtds also allow the introduction of special types of attributes called id and idrefs
 and effectively what these allow you to do is specify pointers within a document although these pointers are untyped
 before moving to the demo let's talk a little bit about the positives and negatives about choosing to use a dtd or and xsd for one's xml data
 after all if you're building an application that encodes its data in xml you'll have to decide whether you want the xml to just be well formed or whether you want to have specifications and require the xml to be valid to satisfy those specifications
 so let's put a few positives of choosing a later of requiring a dtd or an xsd
 first of all one of them is that when you write your program you can assume that the data adheres to a specific structure
 so programs can assume a structure and so the programs themselves are simpler because they don't have to be doing a lot of error checking on the data
 they'll know that before the data reaches the program it's been run through a validator and it does satisfy a particular structure
 second of all we talked at some time ago about the cascading style sheet language and the extensible style sheet languages
 these are languages that take xml and they run rules on it to process it into a different form often html
 when you write those rules if you note that the data has a certain structure then those rules can be simpler so like the programs they also can assume particular structure and it makes them simpler
 now another use for dtds or xsds is as a specification language for conveying what xml might need to look like
 so as an example if you're performing data exchange using xml maybe a company is going to receive purchase orders in xml the company can actually use the dtd as a specification for what the xml needs to look like when it arrives at the program it's going to operate on it
 also documentation it can be useful to use one of the specifications to just document what the data itself looks like
 in general really what we have here is the benefits of typing
 we're talking about strongly typed data versus loosely typed data if you want to think of it that way
 now let's look at when we might prefer not to use a dtd
 so what i'm going describe down here is the benefits of not using a dtd
 so the biggest benefit is flexibility
 so a dtd makes your xml data have to conform to a specification
 if you want more flexibility or you want ease of change in the way that the data is formatted without running into a lot of errors then if that's what you want then the dtd can be constraining
 another fact is that dtds can be fairly messy and this is not going to be obvious to you yet until we get into the demo but if the data is irregular very irregular then specifying its structure can be hard especially for irregular documents
 actually when we see the schema language we'll discover that xsds can be i would say really messy so they can actually get very large
 it's possible to have a document where the specification of the structure of the document is much much larger than the document itself which seems not entirely intuitive but when we get to learn about xsds i think you'll see how that can happen
 so overall this is the benefits of nil typing
 it' s really quite similar to the analogy in programming languages
 the remainder of this video will teach about the dtds themselves through a set of examples
 we'll have a separate video for learning about xml schema and xsds
 so here we are with our first document that we're going to look at with a document type descriptor
 we have on the left the document itself
 we have on the right the document type descriptor and then we have in the lower right a command line shell that we're going to use to validate the document
 so this is similar data to what we saw on the last video but let's go through it just to see what we have
 we have an outermost element called bookstore and we have two books in our bookstore
 the first book has an isbn number price and editions
 as attributes and then it has a sub element called title another sub element called authors with two authors underneath first names and last names
 the second book element is similar except it doesn't have a edition
 it also has as we see a remark
 now let's take a look at the dtd and i'm just going to walk through dtd not too slowly not too fast and explain exactly what it's doing
 so the start of the dtd says this a dtd named bookstore and the root element is called bookstore and now we have the first grammar like construct
 so these constructs in fact are a little bit like regular expressions if you know them
 what this says is that a bookstore element has as its sub element any number of elements that are called book or magazine
 we have book or magazine
 we don't have any magazines yet but we'll add one
 and then this star says zero or more instances
 it's the kleene for those of you familiar with regular expression
 now let's talk about what the book element has so that's our next specification
 the book element has a title followed by authors followed by an optional remark
 so now we don't have an or we have a comma and that says that these are going to be in that order title authors and remark and the question mark says that the remark is optional
 next we have the attributes of our book elements
 so this bang attribute list says we're going to describe the attributes and we're going to have three of them the isbn the price and the edition
 c data is the type of the attribute
 it's just a string
 and then required says that the attribute must be present whereas implied says it doesn't have to be present
 as you may remember we have one book that doesn't have an edition
 our magazines are simply going to have titles and they're going to have attributes that are month and year
 again we don't have any magazines yet
 a title is going to consist of string data
 so here we see our title of first course and database system
 you can think of that as the leaf data in the xml tree
 and when you have a leaf that consists of text data this is what you put in the dtd just take my word for it hash pc data in parentheses
 now our authors are an element that still has structure
 our authors have a sub element author sub elements or elements and we're going to specify here that the author's element must have one or more author subelements
 so that's what the plus is saying here again taken from regular expressions
 plus means one or more instances
 we have the remark which is just going to be pc data or string data
 we have our authors which consist of a first name sub element and a last name sub element and in that order
 and then finally our first names and last names are also strengths
 so this is the entire dtd and it describes in detail the structure of our document
 now we have a command we're using something called xmllint that will check to see if the document meets the structure
 we'll just run that command here with a couple of options and it doesn't give us any output which actually means that our document is correct
 well be making some edits and seeing when our document is not correct what happens when we run the command
 so let's make our first edit let's say that we decide that we want the additional attribute of our books to be required rather than applied
 so we'll change the dtd
 we'll save the file and now when we run our command
 so as expected we got an error and the error said that one of our book elements does not have attribute addition
 now that addition is required every book element ought to have it
 so let's add an addition to our second book
 let 's say that it's the second edition save the file we'll validate our document again and now everything is good
 let's do an edit to the document this time to see what happens when we change the order of the first name and the last name
 so we've swapped jeffrey ullman to be ullman jeffery
 we validate our document and now we see we got an error because the elements are not in the correct order
 in this case let's undo that change rather than change our dtd
 let's try another edit to our document
 let's add a remark to our first book
 but what we'll do is we'll leave the remark empty so we'll add a opening and then directly a closing tag and let's see if that validates
 so it did validate
 and in fact when we have pc data as the type of an element it's perfectly acceptable to have a empty element
 as a final change let's add a magazine to our database
 you'll have to bear with me as i type
 i'm always a little bit slow
 so we see over here that when we have a magazine there are two required attributes the month and the year
 so let's say the month is january and the year let's make that and then we have a title for our magazine
 here
 we'll go down here
 our title let's make it national geographic
 we'll close the tag title tag
 and then sorry again about my typing
 let's go ahead and validate the document
 we saw premature end of something or other
 we forgot our closing tag for magazine let's put that in
 my terrible typing and here we go
 let's validate and we're done
 now we're gonna learn about and id rep attributes
 the document on the left side contains the same data as our previous document but completely restructured
 instead of having authors as subelements of book elements we're going to have our authors listed separately and then effectively point from the books to the authors of the book
 we'll take a look at the data first and then we'll look at the dtd that describes the data
 let's actually start with the author so our bookstore element here has two subelements that are books and three that are authors
 so looking at the authors we have the first name and last name as sub elements as usual but we've added what we call the ident attribute
 that's not a keyword we've just called the attribute ident and then for each of the three authors we've given a string value to that attribute that we're going to use effectively for the pointers in the book
 so we have our three authors now let's take a look at the books
 our book has the isbn number and price
 i've taken the addition out for now
 special attribute called authors
 authors is an id reps attribute and it's value can refer to one or more strings that are id attributes
 attributes in another element
 so that's what we're doing here
 we're referring to the two author elements here
 and in our second book we're referring to the three author elements
 we still have the title subelement and we still have the remarks subelement
 and furthermore we have one other cute thing here which is instead of referring to the book by name within the remark when we're talking about the other book we have another type of pointer
 so we'll specify that the isbn is an id for books and then this is an id reps attribute that's referring to the id of the other book
 the dtd on the right that describes the structure of this document
 this time our bookstore is going to contain zero or more books followed by zero or more authors
 our books contain a title and an optional remark is subelements and now they contain three attributes the idbn which is now a special type of attribute called and id the price which is the string value as usual and the authors which is the special type called id reps let's keep going our title is just string value as usual
 a remark here this is a actually interesting construct
 a remark consist of the pc data which is string or a book reference and then zero more instances of those
 this is the type of construct that can be used to mix strings and sub elements within an element
 so anytime you want an element that might have some strings and then another element and then more string value
 that's how it's done
 pc data or the element type zero or more
 then we have our book reference which is actually an empty element it's only interesting because is has an attribute so let's go back here we see our book wrap here it actually doesn't have any data or sub elements but it has an attribute called book and that is an id ref
 that means it refers to an id attribute of another another element
 now we have our authors the first name and the last name and our author attributes have again an id and we're calling it the ident
 and finally the first name and last name are string values
 this may seem overwhelming but the key points in this dtd are the id the attributes
 so the id attributes the isbn attributes in the book and the ident wherever it went ident attribute in the author are special attributes and by the way they do need to be unique values for those attributes and they're special in that id refs attributes can refer to them and that will be checked as well
 now i did want to point out that the book reference here says id ref singular
 when you have a singular id ref then the string has to be exactly one id value
 when you have the plural id refs
 then the string of the attribute is one or more id ref value i'm sorry one or more id values separated by spaces
 so it's a little bit clunky but it does seem to work
 now let's go to our command line and let's validate the document
 so the document is in fact valid
 that's what it means when we get nothing back and let's make some changes as we did before to explore what structure is imposed and what's checked with this dtd in the presence
 ids and id refs
 as a first change let's change this id this identifier hg to ju
 that should actually cause a couple of problems when we do that let's validate the document and see what happens
 and we do in fact get two different errors
 the first error says that we have two instances of ju
 as you can see here we now have ju twice where id values do have to be unique
 they have to be globally unique throughout the document
 the second error that occurred when we changed hg to ju is we effectively have a dangling pointer
 we refer to hg here in this id refs attribute but there's no longer an element whose value is hg
 so that's an error as well
 so let's change it back to hg just so our document is valid again
 now let's make another change let's take our book reference
 we can see that our book reference is referring to the other book
 we're in the complete book here and the comment the remark is referring to the first course through the isbn number but let's change this string instead to refer to hg
 so now we're actually referring to an author rather than another book
 let's check if the document validates
 in fact it does
 and that shows that the pointers when you have a dtd are untyped
 so it does check to make sure that this is an id of another element but we weren't able to specify that it should be a book element in our dtd and since we're not able to specify it of course it's not possible to check it
 we will see that in xml schema we can have typed pointers but it's not possible to have them in dtds
 the last change i'm going to show is to add a second book reference within our remark
 so as i pointed out over here when we write pc data or in an element type kleene the zero or more star that means we can freely mix text and sub elements
 so just right in the middle here let's put a book reference
 and we can put let's say book equals ju and that will be the end of our reference there and now we see that we have text followed by a subelement followed by more text then so on
 that should validate fine and in fact it does
 that completes our demonstration of xml documents with dtds
