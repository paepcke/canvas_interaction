 welcome to the course introduction to databases i'm jennifer widom from stanford university in this course we'll be learning_about databases and the use of database_management systems primarily from the viewpoint of the designer user and developer of database applications i'm going to start_by describing in one very long sentence what a database_management system provides for applications it provides a means of handling large amounts of data primarily but let's looks at a little_more detail what it provides in a long sentence is efficient reliable convenient and safe multi user storage of and access to massive amounts of persistent data so i'm going to go into each one of those adjectives in a little_binary_digit more_detail in a moment but i did want to mention that database_systems are extremely prevalent in the world today they sit behind many websites that will run your banking systems your telecommunications deployments of sensors scientific experiments and much much more highly prevalent so let's talk a little_binary_digit about why database_systems are so popular so and prevalent by looking_at these seven adjectives the first aspect of database_systems is that they handle data at a massive scale so if you think_about the amount of data that is being produced today database_systems are handling terabytes of data sometimes even terabytes of data every day and one of the critical aspects is that the data that's handled by database_management systems systems is much larger than can fit in the memory of a typical computing system so memories are indeed growing very very fast but the amount of data in the world and data to be handled by database_systems is growing much faster so database_systems are designed to handle data that to residing outside of memory secondly the data that's handled by database_management systems is typically persistent and what i_mean by that is that the data in the database outlives the programs that execute on that data so if you run a typical computer program the program will start the variables we created there will be data that's operated on the program the program will finish and the data will go away it's sort of the other way with databases the data is what sits there and then program will start up it will operate_on the data the program will stop and the data will still be there very often actually multiple programs will be operating_on the same data next safety so database_systems since they run critical applications such as telecommunications and banking systems have to have guarantees that the data managed by the system will stay in a consistent state it won't be lost or overwritten when there are failures and there can be hardware failures there can be software failures even simple power outages you don't want your bank balance to change because the power went out at your bank branch and of course there are the problem of malicious users that may try to corrupt data so database_systems have a number of built in mechanisms that ensure that the data remains consistent regardless of what_happens next multi user so i_mentioned that multiple programs may operate_on the same database and even with one program operating_on a database that program may allow many different users or applications to access the data concurrently so when you have multiple applications working on the same data the system has to have some mechanisms again to ensure that the data stays consistent that you don't have for example half of a data item overwritten by one person and the other half overwritten by another so there's mechanisms in database_systems called concurrency control and the idea there is that we control the way multiple users access the database now we don't control it by only having one user have exclusive access to the database or the performance would slow down considerably so the control actually occurs at the level of the data items in the database so many users might be operating_on the same database but be operating_on different individual data items it's a little_binary_digit similar to say file system concurrency or even variable concurrency in programs except it's more centered around the data itself the next adjective is convenience and convenience is actually one of the critical features of database_systems they really are designed to make it easy to work with large amounts of data and to do very_powerful and interesting processing on that data so there's a couple levels at which that happens there's a notion in databases called physical data independence it's kind of a mouthful but what that's saying is that the way that data is actually stored and laid out on disk is independent of the way that programs think_about the structure of the data so you could have a program that operates on a database and underneath there could be a complete change in the way the data is stored yet the program itself would not have to be changed so the operations on the data are independent from the way the data is laid out and somewhat related to that is the notion of high_level query languages so the databases are usually queried by languages that are relatively compact to describe really at a very high_level what information you want from the database specifically they obey a notion that's called declarative and what declarative is saying is that in the query you describe what you want out of the database but you don't need to describe the algorithm to get the data out and that's a really nice feature it allows you to write queries in a very_simple way and then the system itself will find the algorithm to get that data out efficiently and speaking of efficiency that's number six but certainly not sixth importance there's in real estate as a little aside here a old saying that when you have a piece of property the most_important three aspects of the property are the location of the property the location and the location and people say the same thing about databases a similar parallel joke which is that the three most_important things in a database system is first performance second performance and again performance so database_systems have to do really thousands of queries or updates per second these are not simple queries necessarily these may be very complex operations so constructing a database system that can execute queries complex queries at that rate over gigantic amounts of data terabytes of data is no simple task and that is one of the major features also provided by a database_management system and lastly but again not last in importance is reliability again looking back at say your banking system or your telecommunications system it's critically important that those are up all the time so up time is the type of guarantee that database_management systems are making for their applications so that gives_us an idea of all the terrific things that a database system provides i_hope you're all ready convinced that if you have a application you want to build that involves data it would be great to have all of these features provided for you in a database system now let_me_mention a few of the aspects surrounding database_systems and scope a little_binary_digit what we're going to be covering in this course when people build database applications sometimes they program them with what's_known_as a framework currently at the time of this video some of the popular frameworks are django or ruby on rails and these are environments that help you develop your programs and help you generate say the calls to the database system we're not in this set of videos going to be talking_about the frameworks but rather we're going to be talking_about the data base system itself and how it is used and what it provides second of all database_systems are often used in conjunction with what's_known_as middle ware again at the time of this video typical middle ware might be application servers web servers so this middle ware helps applications interact with database_systems in certain types of ways again that's sort of outside the scope of the course we won't be talking_about middleware in the course finally it's not the case that every application that involves data necessarily uses the database system so historically a lot of data has been stored in files i think that's a little_binary_digit less so these days still there's a lot of data out there that's simply sitting in files excel spreadsheets is another domain where there's a lot of data sitting out there and it's useful in certain ways and the processing of data is not always done through query languages associated_with database_systems for_example hadoop is a processing framework for running operations on data that's stored in files again in this set of videos we're going to focus_on the database_management system itself and on storing and operating_on data through a database_management system so there are four key concepts that we're going to cover for now the first one is the data_model the data_model is a description of in general how the data is structured one of the most common data models is the relational dot data_model we'll spend quite a binary_digit of time on that in the relational data_model the data and the database is thought of as a set of records now another popular way to store data is for example in extensible_markup_language documents so an extensible_markup_language document captures data instead of a set of records as a hierarchical structure of labeled values another possible data_model would be a graph data_model or all data in the database is in the form of nodes and edges so again a data_model is telling you the general form of data that's going to be stored in the database next is the concept of schema versus data one can think of this kind of like types and variables in a programming language the schema sets up the structure of the database maybe i'm going to have information_about students with ids and gpas or about colleges and it's just going to tell me the structure of the database where the data is the actual data stored within the schema again in a program you set_up types and then you have variables of those types we'll set_up a schema and then we will have a whole_bunch of data that adheres to that schema typically the schema is set_up at the beginning and doesn't change very much where the data changes rapidly now to set_up the schema one normally uses what's_known_as a data definition language sometimes people use higher_level design tools that help them think_about the design and then from there go to the data definition language but it's used in general to set_up a scheme or structure for a particular database once the schema has been set_up and data has been loaded then it's possible to start querying and modifying the data and that's typically done with what's_known_as the data manipulation language so for querying and modifying the database okay so those are some key concepts certainly we're going to get in to much more_detail in later_videos about each of these concepts now let's talk_about the people that are involved in a database system so the first person we'll mention is the person_who implements the database system itself the database implementer that's the person_who builds the system that's not going to be the focus of this course we're going to be focusing more on the types of things that are done by the other three people that i'm going to describe the next one is the database designer so the database designer is the person_who establishes the schema for a database so let's_suppose we have an application we know there's going to be a lot of data involved in the application and we want to figure_out how we are gonna structure that data before we build the application that's the job of the database designer it's a surprisingly difficult job when you have a very complex data involved in an application once you've established the structure of the database then it's time to build the applications or programs that are going to run on the database often interfacing between the eventual user and the data itself and that's the job of the application developer so those are the programs that operate_on the database and again i've mentioned already that you can have a database with many different programs that operate_on it be very common you_might for example have a sales database where some applications are actually inserting the sales as they happen while others are analyzing the sales so it's not necessary to have a one to one coupling between programs and databases and the last person is the database administrator so the database administrator is the person_who loads the data sort of gets the whole thing running and keeps it running smoothly so this actually turns_out to be a very_important job for large database applications for better or worse database_systems do tend to have a number of tuning parameters associated_with them and getting those tuning parameters right can make a significant difference in the all important performance of the database system so database administrators are actually highly valued very_important highly paid as a matter of fact and are for large deployments an important person in the entire process so those are the people that are involved again in this class we'll be focusing mostly on designing and developing applications a little_binary_digit on administration but in general thinking about databases and the use of database_management systems from the perspective of the application builder and user to conclude we're going to be learning_about databases and whether you know it or not not you're already using a database every day in fact more likely than not you're using a database every hour in this video we'll learn_about the relational model the relational model is more_than years old and it's really the foundation of database_management systems it's spawned a many billion dollar industry the relational_model underlies all commercial database_systems at this point in time it's actually an extremely simple model and that's one of its benefits furthermore it can be queried by that i_mean we can ask questions of databases in the model using high level languages high level languages are simple yet extremely expressive for asking questions over the database and finally very importantly there are extremely efficient implementations of the relational_model and of the query languages on that model so let's move_ahead and understand the basic constructs in the relational_model so the primary construct is in fact the relation a database consists of a set of relations or sometimes referred to as tables each of which has a name so we're gonna use two relations in our example our example is gonna be a fictitious database about students_applying to colleges for now we're just gonna look_at the students and colleges themselves so we're gonna have two tables and let's call those tables the student table and the college table now as an aside there's a healthy debate in the database world about whether tables relations ought to be named using the singular or the plural i personally don't have a stake in that debate i'm going to use the singular next we have the concept of attributes so every relation and relational database has a predefined set of columns or attributes each of which has a name so for our student table let's say that each student is gonna have an id a name a gpa and a photo and for our college table let's say that every college is going to have a name a state and an enrollment we'll just abbreviate that enr so those are the labeled columns now the actual data itself is stored in what are called the tuples or the rows in the tables so let's put a couple of the data tables data tuples in our tables so let's start with the students and lets say that our first student has id name is amy gpa and she's happy with that so she has a smiley photo and our second student is bob his gpa is he's not quite as happy and typically of course a table will have thousands maybe millions even sometimes billions of rows each_row containing a value for each attribute in our college table let's_suppose we have well of course we're going to start with stanford in the state of california and stanford's enrollment is we'll include our cross bay rival berkeley again in the state of california berkeley's enrollment is a whopping and last of all we are going to not be west coast biased we'll include massachusetts_institute of technology in the state of massachusetts with an enrollment of now of course there's gonna be again many more tuples in the college table and many more tuples in the student table okay next let_me_mention that in a relational database typically each attribute or column has a type sometimes referred to as a domain for_example the id might be an integer the name might be a string gpa might be a float photo might be a jpeg file we do also in most relational_databases have a concept of enumerated domain so for example the state might be an enumerated domain for the abbreviations for states now it's typical for relational_databases to have just atomic types in their attributes as we have here but many database_systems do also support structured types inside attributes okay a little_binary_digit more terminology the schema of a database is the structure of the relation so the schema includes the name of the relation and the attributes of the relation and the types of those attributes where the instance is the actual contents of the table at a given point in time so typically you set_up a schema in advance then the instances of the data will change over time now i_mentioned that most columns have types but there's also a special value that's in any type of any column and that's a special value known_as null and nulls are actually quite important in relational_databases null values are used to denote that a particular value is maybe unknown or undefined and so let's_suppose let's add another tuple to our database let's say another student named craig and for whatever_reason craig doesn't have a gpa maybe craig is home schooled maybe craig doesn't want to reveal his gpa so then the database would contain a null value for craig and we'll just put a neutral face there or for example maybe bob doesn't want to have his photo in the database so then bob would have a null value for his photo again nulls can go anywhere now null_values are useful but one has to be very_careful in a database system when you run queries over relations that have null_values in a later video we'll go into this in more_detail but i just wanted to give a just sort of example of what can happen so let's_suppose we're asking a query over our student table of all students_whose gpa is greater_than so when we run that query on our database obviously we'll get amy out obviously we won't get bob out but should we get craig the answer is no we don't know for a fact that craig's gpa is greater_than so we'll only get one student out from that query now let's_suppose we had another query where we were gonna ask for the gpa less_than or equal to so similarly where we would not have amy in result and we would certainly have bob in the result and similarly would not have craig in the result because we don't know that his gpa is less_than or equal to so far so good but it gets a little weird is when we add an or here in our query we say i want everyone who's gpa is greater_than or who's gpa is less_than or equal to and even_though it looks_like every tuple should satisfy this condition that it's always true that's not the case when we have null_values so that's why one has to be careful when one uses null_values in relational_databases let_me erase this now and let's move on to our next concept which is the concept of key key is again another important concept in relational_databases and a key is an attribute in of a relation where every value for that attribute is unique so if we look_at the student relation we can feel pretty confident that the id is going to be a key in_other_words every tuple is going to have a unique for id thinking about the college relation it's a little less clear we might be tempted to say that the name of the college is an id that actually college names probably are not unique across the country there's probably a lot of or several colleges named washington college for example you know what we're allowed to have sets of attributes that are unique and that makes_sense in the college relation most likely the combination of the name and state of a college is unique and that's what we would identify as the key for the college relation now you_might_wonder why it's even important to have attributes that are identified as keys there's actually several uses for them one of them is just to identify specific tuples so if you want to run a query to get a specific tuple out of the database you would do that by asking for that tuple by its key and related to that database_systems for efficiency tend to build special index structures or store the database in a particular way so it's very fast to find a tuple based_on its key and lastly if one relation in a relational database wants to refer to tuples of another there 's no concept of pointer in relational_databases therefore the first relation will typically refer to a tuple in the second relation by its unique key as our videos develop we'll see the importance of keys okay just to wrap_up i'll mention how one creates relations or tables in the structured_query_language language it's very_simple you just say create table give the name of the relation and a list of the attributes and if you want to give types for the attributes it's similar except you follow each attribute name with its type so to wrap_up the relational_model has been around a long time has started a huge industry it's used by all database_systems as you've seen it's a very_simple model and will shortly see that it can be queried with very nice languages and finally it's been implemented very efficiently in this video we're going to learn_about querying relational_databases we're not going to focus_on a specific query language we'll do that later we're just going to talk_about querying relational_databases in general let's start_by talking_about the basic steps in creating and using a relational database so by the way i should mention that database people have this habit of drawing databases and database_systems as gigantic disks so i'll be using that same habit so the first step is to design the schema of the database and then create the schema using a data definition language so as we discussed in previous_videos in a relational database the schema consists of the structure of the relations and the attributes of those relations so we set those up inside our big disk once that's ready the next step is to load up the database with the initial data so it's fairly common for the database to be initially loaded from data that comes from an outside source maybe the data is just stored in files of some type and then that data could be loaded into the database once the data is loaded then we have a bunch of tuples in our relation now we're ready for the fun part which is to query and modify the data and so that happens continuously over time as long as the database is in existence so let's just say for now that we're going to have human users that are directly querying the database in reality that typically happens through say an application or a website so a user will come along and we'll ask a question of the database and we will get an answer he might come along and ask another question q and he'd get another answer back the same human or maybe a different human might ask to modify the database so they might want to insert new data or update some of the data and the database will come_back and say okay i made that change for you so that's the basic paradigm of querying and updating relational_databases relational databases support ad hoc queries and high_level languages by ad hoc i_mean that you can pose queries that you didn't think of in advance so it's not necessary to write long programs for specific queries rather the language can be used to pose a query as you think_about what you want to ask and as mentioned in previous_videos the languages supported by relational systems are high_level meaning you can write in a fairly compact fashion rather complicated queries and you don't have to write the algorithms that get the data out of the database so let's look_at an example of a few queries let's go to again to our imaginary database of students_who are applying to colleges and here's just three examples of the types of things that you might ask of a relational database you_might want to get all students_whose gpa is greater_than who are applying to stanford and massachusetts_institute of technology only you_might want to get all engineering departments in california with fewer_than applicants or you might ask for the college with the highest average accept rate over the last five years now these might seem like a fairly_complicated queries but all of these can be written in a few lines in say the structured_query_language language or a pretty_simple expression in relational_algebra so some queries are easier to pose than others that's certainly true though the queries you see here are as i said pretty easy to pose now some queries are easier for the database system to execute efficiently than others and interestingly it's not necessarily these two things aren't necessarily correlated there are some queries that are easy to post but hard to execute efficiently and some that are vice versa now just a binary_digit about terminology frequently people talk_about the query language of the database system that's usually used sort of synonymously with the definitive media library or data manipulation language which usually includes not only querying but also data modifications in all relational query languages when you ask a query over a set of relations you get a relation as a result so let's run a query cue say over these three relations shown here and what we'll get back is another relation when you get back the same type of object that you query that's known_as closure of the language and it really is a nice feature for_example when i want to run another query say q that query could be posed over the answer of my first query and could even combine that answer with some of the existing relations in the database that's known_as compositionality the ability to run a query over the result of our previous query now let_me talk briefly about two query languages we'll be learning these languages in detail later but i'm just going to give the basic flavor of the languages here relational algebra is a formal language well it's an algebra as you can tell by its name so it's very theoretically well grounded structured_query_language by contrast is what i'll call an actual language or an implemented language that 's the one you're going to run on an actual deployed database application but the structured_query_language language does have as its foundation relational_algebra that's how the semantics of the structured_query_language language are defined now let_me just give you a flavor of these two languages and i'm going to write one query in each of the two languages so let_me get_rid of this little line here let's start in relational_algebra so we're looking for the id's of students_whose gpa is greater_than and they've_applied to stanford in relational_algebra the basic operators language are greek symbols again we'll learn the details later but this particular expression will be written by a phi followed_by a sigma the phi says we're going to get the id the sigma says we want students_whose gpa is greater_than and the college that the students have applied to is stanford and then that will operate_on what's_called the natural_join of the student relation with the apply relation again we'll learn the details of that in a later video now here's the same query in structured_query_language and this is something that you would actually run on a deployed database system and the structured_query_language query is in fact directly equivalent to the relational_algebra query now pedagogically i would highly recommend that you learn the relational_algebra by watching the relational_algebra videos before you move on to the structured_query_language videos but i'm not going to absolutely require that so if you're in a big hurry to learn structured_query_language right away you may move_ahead to the structured_query_language videos if you're interested in the formal foundations and a deeper understanding i recommend moving next to the relational_algebra video this video introduces the basics of extensible_markup_language extensible_markup_language can be thought of as a data_model an alternative to the relational_model for structuring data in addition to introducing extensible_markup_language we will compare it to the relational_model although it is not critical to have watched the relational_model videos in order to get something out of this one the full name of extensible_markup_language is the extensible markup language extensible_markup_language is a standard for data representation and exchange and it was designed initially for exchanging information on the internet now don't worry if you can't read the little snippet in the corner of the video here you're not expected to at this point extensible_markup_language can be thought of as a document format similar to hypertext_markup_language if you're familiar with hypertext_markup_language most people are the big difference is that the tags in an hypertext_markup_language document describe the content of the data rather_than how to format the data which is what the tags in hypertext_markup_language tend to represent extensible_markup_language also has a streaming format or a streaming standard and that's typically for the use of extensible_markup_language in programs for admitting extensible_markup_language and consuming extensible_markup_language so now let's take a look_at the extensible_markup_language data itself you see on the left_side of the video a portion of an extensible_markup_language document the entire document is available from the website for the course extensible_markup_language has three basic components again fairly similar to hypertext_markup_language the first is tagged element so for example let's take a look_at this element here this is an element saying that the data here is a first name so we have a opening_tag and we have a matching closing_tag we also have nesting development so for example here we have an element that's authored we have the opening_tag here the closing_tag here and we have a nesting of the first name and last_name elements even larger we have a book element here with opening and closing_tags with a nesting of numerous elements inside and the entire document actually is one element whose opening_tag is bookstore and the closing_tag isn't visible on the video here so that's what elements consist of an opening_tag text or other sub_elements and a closing_tag in addition we have have attributes so each element may have within its opening_tag and let's take a look_at the book element here a set of attributes and an attribute consists of an attribute name the equal sign and then an attribute value so our book element right here has three attributes one called ispn one called price and one called edition and any element can have any number of attributes as long as the attribute names are unique and finally the third component of extensible_markup_language is the text itself which is depicted here in black so within elements we can have strengths we have a strength all right here we have a title here here we have a remark and so that's generally sort of think of extensible_markup_language as a tree the strings form or the text form the leaf element of the tree so again those are the three major components of xml look's a lot like hypertext_markup_language except the tags are describing the content of the data and not how to format it now let's spend some time comparing the relational_model against extensible_markup_language again it's not critical that you learn_about the relational_model and you can skip this material if you're not interested but in many cases when designing an application that's dealing with data you might have to make a decision whether you want to use a relational database or whether you want to store the data in extensible_markup_language so let's look_at a few different aspects of the data and how it's used and how it compares between relational and extensible_markup_language let's start with the structure of the data itself so as we learn the structure in a relational_model is basically a set of tables so we define the set of columns and we have a set of rows extensible_markup_language is generally again it's usually in a document or a string format but if you think_about the structure itself the structure is hierarchical the nested elements induce a hierarchy or a tree there are constructs that actually allow_us to have links within documents and so you can also have extensible_markup_language representing a graph though in general it's mostly thought of as a tree structure next let's talk_about schemas in the relational_model the schema is very_important you fix your schema in advance when you design your database and them you add the data to conform to the schema now in extensible_markup_language you have a lot more flexibility so the schema is flexible in fact a lot of people refer to extensible_markup_language as self describing in_other_words the schema and the data kind of mixed together the tags on elements are telling you the kind of data you'll have and you can have a lot of irregularity now i will say that their are many mechanisms for introducing schemas into extensible_markup_language but they're not required in the relational_model schemas are absolutely required in extensible_markup_language they're more optional in particular let's go_back and take a look_at our example and we'll see that we have sort of some structure in our example but not everything is perfectly structured as it would be in the model so coming back here and taking a look first of all we have the situation where in this first book we have an attribute called edition the third edition whereas in the second book we only have two attributes so there's_no addition in this book now in the relational_model we would have to have a column for addition and we have one for every book although of course we could have null editions for some books in extensible_markup_language it's perfectly acceptable to have some attributes for some elements and those attributes don't appear in other elements here's another example where we have a component in one book that's not in another and it's this remark component so here we have a book where we happen to have a remark and incidentally you can see that this book suggests this remark suggests that we buy the complete book together with the first course the first course is a subset so it's not a very good suggestion although amazon actually did make that one anyway enough of the asides we do see that we have remark for the first book and we have no remark for the second book and that's not a problem whatsoever in extensible_markup_language in the relational_model we would again have to use null_values for that case and the third example i just wanted to give is the number of authors so this first book has two authors the second book you can't see them all but it has three authors not a problem in extensible_markup_language having different numbers of things is perfectly standard so the main point being that there's a lot of flexibility in extensible_markup_language in terms of the schema you can create your database with certain types of elements later add more elements remove elements introduce inconsistencies in the structure and it's not a problem and again i'll mention one more time that there are mechanisms for adding schema like elements to extensible_markup_language or schema like specifications to extensible_markup_language we will be covering those in the next two videos actually next let's talk_about how this data is queried so for the relational_model we have relational_algebra we have structured_query_language these are pretty_simple nice languages i would say it's a little_binary_digit of a matter of opinion but i'm going to give them a smiley face extensible_markup_language querying is a little trickier now one of the factors here is that extensible_markup_language is a lot newer than the relational_model and querying extensible_markup_language is still settling down to some extent but i'm just gonna say it's a little less so i'm gonna give it a neutral face here in terms of how simple and nice the languages are for querying extensible_markup_language and we'll be spending some time in later_videos learning some of those languages next in our chart is the aspect of ordering so the relational_model is fundamentally an unordered model and that can actually be considered a bad thing to some extent sometimes in data applications it's nice to have ordering we learned the order by clause in structured_query_language and that's a way to get order in query results but fundamentally the data in our table in our relationship database is a set of data without an ordering within that set now in extensible_markup_language we do have i would say an implied ordering so extensible_markup_language as i said can be thought of as either a document model or a stream model and either case just the nature of the extensible_markup_language being laid out in a document as we have here or being in a stream induces an order very_specifically let's take a look_at the authors here so here we have two authors and these authors are in an order in the document if we put those authors in a relational database there would be no order they could come out in either order unless we did a order by clause in our query whereas in extensible_markup_language implied by the document structure is an order and there's an order between these two books as_well sometimes that order is meaningful sometimes it's not but it is available to be used in an application lastly let's talk_about implementation as i_mentioned in earlier videos the relational_model has been around for as least years and the systems that implement it have been around almost as long they're very mature systems they implement the relational_model as the native model of the systems and they're widely_used things with extensible_markup_language are a little_binary_digit different partly again because extensible_markup_language hasn't been around as long but what's happening right now in terms of extensible_markup_language and conventional database_systems is extensible_markup_language is typically an add on so in most systems extensible_markup_language will be a layer over the relational database system you can enter data in extensible_markup_language you can query data in extensible_markup_language it will be translated to a relational implementation that's not necessarily a bad thing and it does allow you to combine relational data and extensible_markup_language in a single system sometimes even in a single query but it's not the native model of the system itself now you might have noticed that the name of this video is well formed xml so well_formed extensible_markup_language is actually the most flexible extensible_markup_language an extensible_markup_language document or an extensible_markup_language stream is considered well_formed if it adheres to the basic_structural_requirements of extensible_markup_language and there aren't many just that we have a single root_element as we discussed before a single bookstore in this case that all of our tags are matching we don't have open tags without closed tags and our tags are properly nested so we don't have interweaving of elements and finally within each element if we have attribute names they're unique and that's about it that's all we require for a extensible_markup_language document or a set of extensible_markup_language data to be considered well_formed and for many applications that's all we're concerned about in order to test whether a document is well_formed and specifically to access the components of the document in a program we have what's_called an extensible_markup_language parser so we'll take an extensible_markup_language document here and we'll feed it to an extensible_markup_language parser and the parser will check the basic structure of the document just to make_sure that everything is okay if the document doesn't appear to these three requirements up here the parser will just send an_error saying it's not well_formed if the document does adhere to the structure then what comes out is parsed extensible_markup_language and there's various standards for how we show parsed extensible_markup_language one is called the document object model or document object model it's a programmatic interface for sort of traversing the tree that's implied by extensible_markup_language another popular one is simple api for xml that's a more of a stream model for extensible_markup_language so these are the ways in which a program would access the parsed extensible_markup_language when it comes out of the parser so one issue that comes up because the extensible_markup_language data is used frequently on the internet is how we display extensible_markup_language so one way to display extensible_markup_language is just as we see it here but very often we want to format the data that's in an extensible_markup_language document or an extensible_markup_language string in a more intuitive way and actually there's a nice setup for doing that what we can do is use a rule based language to take the extensible_markup_language and translate it automatically to hypertext_markup_language which we can then render in a browser a couple of popular languages are cascading style sheets known_as cross site scripting or the extensible style sheet language known_as extensible_stylesheet language we're going to look a little_binary_digit with extensible_stylesheet language on a later video in the context of query in extensible_markup_language we won't be covering cross site scripting in this course but let's just understand how these languages are used what the basic structure is so the idea is that we have an extensible_markup_language document and then we send it to an interpreter of cross site scripting or extensible_stylesheet language but we also have to have the rules that we're going to use on that particular document and the rules are going to do things like match patterns or add extra commands and once we send an extensible_markup_language document thorugh the interpreter we'll get an hypertext_markup_language document out and then we can render that document in the browser now one thing i should mention is that we'll also check with the parser to make_sure that the document is well_formed as_well before we translate it to hypertext_markup_language to conclude extensible_markup_language is a standard for data representation and exchange it can also be thought of as a data_model sort of a competitor to the relational_model for structuring the data in one's application it generally has a lot more flexibility than the relational_model which can be a plus and a minus actually in this video we covered the well_formed extensible_markup_language so extensible_markup_language that adheres to basic_structural_requirements in the next_video we will cover valid extensible_markup_language where we actually do introduce a kind of schema for extensible_markup_language the last thing i want to mention is that the formal specification for extensible_markup_language is quite enormous there are a lot of bells and whistles we're going to cover in these videos the most_important components for understanding anything extensible_markup_language in the previous_video we learned the basics of extensible_markup_language in this video we're going to learn_about document_type descriptors also known_as dtds and also id and id ref attributes we learned that well_formed extensible_markup_language is extensible_markup_language that adheres to basic_structural_requirements a single root_element matched tags with proper nesting and unique attributes within each element now we're going to learn_about what's_known_as valid extensible_markup_language valid extensible_markup_language has to adhere to the same basic_structural_requirements as well_formed extensible_markup_language but it also adheres to content specific specifications and we're going to learn two languages for those specifications one of them is document_type descriptors or dtds and the other a more powerful language is extensible_markup_language schema specifications in extensible_markup_language schema are known_as xsds for extensible_markup_language schema descriptions so as a reminder here's how things worked with well_formed extensible_markup_language documents we sent the document to a parser and the parser would either return that the document was not well_formed or it would return parsed extensible_markup_language now let's consider what_happens with valid extensible_markup_language now we use a validating extensible_markup_language parser and we have an additional input to the process which is a specification either a document_type_definition or an xml_schema_definition so that's also fed to the parser along with the document the parser can again say the document is not well_formed if it doesn't meet the basic_structural_requirements it could also say that the document is not valid meaning the structure of the document doesn't match the content specific specification if everything is good then once again parsed extensible_markup_language is returned now let's talk_about the document_type_descriptors or dtds we see a document_type_definition in the lower left corner of the video but we won't look_at it in any detail because we'll be doing demos of dtds a little later on a document_type_definition is a language that's kind of like a grammar and what you can specify in that language is for a particular document what elements you want that document to contain the tags of the elements what attributes can be in the elements how the different types of elements can be nested sometimes the ordering of the elements might want to be specified and sometimes the number of occurrences of different elements dtds also allow the introduction of special types of attributes called id and idrefs and effectively what these allow you to do is specify pointers within a document although these pointers are untyped before moving to the demo let's talk a little_binary_digit about the positives and negatives about choosing to use a document_type_definition or and xml_schema_definition for one's extensible_markup_language data after all if you're building an application that encodes its data in extensible_markup_language you'll have to decide whether you want the extensible_markup_language to just be well_formed or whether you want to have specifications and require the extensible_markup_language to be valid to satisfy those specifications so let's put a few positives of choosing a later of requiring a document_type_definition or an xml_schema_definition first of all one of them is that when you write your program you can assume that the data adheres to a specific structure so programs can assume a structure and so the programs themselves are simpler because they don't have to be doing a lot of error checking on the data they'll know that before the data reaches the program it's been run through a validator and it does satisfy a particular structure second of all we talked at some time ago about the cascading style sheet language and the extensible style sheet languages these are languages that take extensible_markup_language and they run rules on it to process it into a different form often hypertext_markup_language when you write those rules if you note that the data has a certain structure then those rules can be simpler so like the programs they also can assume particular structure and it makes them simpler now another use for dtds or xsds is as a specification language for conveying what extensible_markup_language might need to look like so as an example if you're performing data exchange using extensible_markup_language maybe a company is going to receive purchase orders in extensible_markup_language the company can actually use the document_type_definition as a specification for what the extensible_markup_language needs to look like when it arrives at the program it's going to operate_on it also documentation it can be useful to use one of the specifications to just document what the data itself looks_like in general really what we have here is the benefits of typing we're talking_about strongly typed data versus loosely typed data if you want to think of it that way now let's look_at when we might prefer not to use a document_type_definition so what i'm going describe down here is the benefits of not using a document_type_definition so the biggest benefit is flexibility so a document_type_definition makes your extensible_markup_language data have to conform to a specification if you want more flexibility or you want ease of change in the way that the data is formatted without running into a lot of errors then if that's what you want then the document_type_definition can be constraining another fact is that dtds can be fairly messy and this is not going to be obvious to you yet until we get into the demo but if the data is irregular very irregular then specifying its structure can be hard especially for irregular documents actually when we see the schema language we'll discover that xsds can be i would say really messy so they can actually get very_large it's possible to have a document where the specification of the structure of the document is much much larger than the document itself which seems not entirely intuitive but when we get to learn_about xsds i think you'll see how that can happen so overall this is the benefits of nil typing it' s really quite similar to the analogy in programming_languages the remainder of this video will teach about the dtds themselves through a set of examples we'll have a separate video for learning_about extensible_markup_language schema and xsds so here we are with our first document that we're going to look_at with a document type descriptor we have on the left the document itself we have on the right the document type descriptor and then we have in the lower right a command line shell that we're going to use to validate the document so this is similar data to what we saw on the last video but let's go through it just to see what we have we have an outermost element called bookstore and we have two books in our bookstore the first book has an isbn_number price and editions as attributes and then it has a sub_element called title another sub_element called authors with two authors underneath first names and last names the second book element is similar except it doesn't have a edition it also has as we see a remark now let's take a look_at the document_type_definition and i'm just going to walk through document_type_definition not too slowly not too fast and explain exactly what it's doing so the start of the document_type_definition says this a document_type_definition named bookstore and the root_element is called bookstore and now we have the first grammar like construct so these constructs in fact are a little_binary_digit like regular expressions if you know them what this says is that a bookstore element has as its sub_element any number of elements that are called book or magazine we have book or magazine we don't have any magazines yet but we'll add one and then this star says zero or more instances it's the kleene for those of you familiar with regular expression now let's talk_about what the book element has so that's our next specification the book element has a title followed_by authors followed_by an optional remark so now we don't have an or we have a comma and that says that these are going to be in that order title authors and remark and the question mark says that the remark is optional next we have the attributes of our book elements so this bang attribute list says we're going to describe the attributes and we're going to have three of them the isbn the price and the edition c data is the type of the attribute it's just a string and then required says that the attribute must be present whereas implied says it doesn't have to be present as you may remember we have one book that doesn't have an edition our magazines are simply going to have titles and they're going to have attributes that are month and year again we don't have any magazines yet a title is going to consist of string data so here we see our title of first course and database system you can think of that as the leaf data in the extensible_markup_language tree and when you have a leaf that consists of text data this is what you put in the document_type_definition just take my word for it hash personal computer data in parentheses now our authors are an element that still has structure our authors have a sub_element author sub_elements or elements and we're going to specify here that the author's element must have one or more author subelements so that's what the plus is saying here again taken from regular expressions plus means one or more instances we have the remark which is just going to be pc data or string data we have our authors which consist of a first name sub_element and a last_name sub_element and in that order and then finally our first names and last names are also strengths so this is the entire document_type_definition and it describes in detail the structure of our document now we have a command we're using something called xmllint that will check to see if the document meets the structure we'll just run that command here with a couple of options and it doesn't give_us any output which actually means that our document is correct well be making some edits and seeing when our document is not correct what_happens when we run the command so let's make our first edit let's say that we decide that we want the additional attribute of our books to be required rather_than applied so we'll change the document_type_definition we'll save the file and now when we run our command so as expected we got an_error and the error said that one of our book elements does not have attribute addition now that addition is required every book element ought to have it so let's add an addition to our second book let 's say that it's the second edition save the file we'll validate our document again and now everything is good let's do an edit to the document this time to see what_happens when we change the order of the first name and the last_name so we've swapped jeffrey_ullman to be ullman jeffery we validate our document and now we see we got an_error because the elements are not in the correct order in this case let's undo that change rather_than change our document_type_definition let's try another edit to our document let's add a remark to our first book but what we'll do is we'll leave the remark empty so we'll add a opening and then directly a closing_tag and let's see if that validates so it did validate and in fact when we have personal computer data as the type of an element it's perfectly acceptable to have a empty element as a final change let's add a magazine to our database you'll have to bear with me as i type i'm always a little_binary_digit slow so we see over here that when we have a magazine there are two required attributes the month and the year so let's say the month is january and the year let's make that and then we have a title for our magazine here we'll go down here our title let's make it national_geographic we'll close the tag title tag and then sorry again about my typing let's go_ahead and validate the document we saw premature end of something or other we forgot our closing_tag for magazine let's put that in my terrible typing and here we go let's validate and we're done now we're gonna learn_about and id rep attributes the document on the left_side contains the same data as our previous document but completely restructured instead of having authors as subelements of book elements we're going to have our authors listed separately and then effectively point from the books to the authors of the book we'll take a look_at the data first and then we'll look_at the document_type_definition that describes the data let's actually start with the author so our bookstore element here has two subelements that are books and three that are authors so looking_at the authors we have the first name and last_name as sub_elements as usual but we've added what we call the ident attribute that's not a keyword we've just called the attribute ident and then for each of the three authors we've given a string value to that attribute that we're going to use effectively for the pointers in the book so we have our three authors now let's take a look_at the books our book has the isbn_number and price i've taken the addition out for now special attribute called authors authors is an id reps attribute and it's value can refer to one or more strings that are id attributes attributes in another element so that's what we're doing here we're referring to the two author elements here and in our second book we're referring to the three author elements we still have the title subelement and we still have the remarks subelement and furthermore we have one other cute thing here which is instead of referring to the book by name within the remark when we're talking_about the other book we have another type of pointer so we'll specify that the isbn is an id for books and then this is an id reps attribute that's referring to the id of the other book the document_type_definition on the right that describes the structure of this document this time our bookstore is going to contain zero or more books followed_by zero or more authors our books contain a title and an optional remark is subelements and now they contain three attributes the idbn which is now a special type of attribute called and id the price which is the string value as usual and the authors which is the special type called id reps let's keep going our title is just string value as usual a remark here this is a actually interesting construct a remark consist of the personal computer data which is string or a book reference and then zero more instances of those this is the type of construct that can be used to mix strings and sub_elements within an element so anytime you want an element that might have some strings and then another element and then more string value that's how it's done personal computer data or the element type zero or more then we have our book reference which is actually an empty element it's only interesting because is has an attribute so let's go_back here we see our book wrap here it actually doesn't have any data or sub_elements but it has an attribute called book and that is an id ref that_means it refers to an id attribute of another another element now we have our authors the first name and the last_name and our author attributes have again an id and we're calling it the ident and finally the first name and last_name are string values this may seem overwhelming but the key points in this document_type_definition are the id the attributes so the id attributes the isbn attributes in the book and the ident wherever it went ident attribute in the author are special attributes and by the way they do need to be unique values for those attributes and they're special in that id refs attributes can refer to them and that will be checked as_well now i did want to point out that the book reference here says id ref singular when you have a singular id ref then the string has to be exactly one id value when you have the plural id refs then the string of the attribute is one or more id ref value i'm_sorry one or more id values separated by spaces so it's a little_binary_digit clunky but it does seem to work now let's go to our command line and let's validate the document so the document is in fact valid that's what it means when we get nothing back and let's make some changes as we did before to explore what structure is imposed and what's checked with this document_type_definition in the presence ids and id refs as a first change let's change this id this identifier hg to ju that should actually cause a couple of problems when we do that let's validate the document and see what_happens and we do in fact get two different errors the first error says that we have two_instances of ju as you can see here we now have ju twice where id values do have to be unique they have to be globally unique throughout the document the second error that occurred when we changed hg to ju is we effectively have a dangling pointer we refer to hg here in this id refs attribute but there's no_longer an element whose value is hg so that's an_error as_well so let's change it back to hg just so our document is valid again now let's make another change let's take our book reference we can see that our book reference is referring to the other book we're in the complete book here and the comment the remark is referring to the first course through the isbn_number but let's change this string instead to refer to hg so now we're actually referring to an author rather_than another book let's check if the document validates in fact it does and that shows that the pointers when you have a document_type_definition are untyped so it does check to make_sure that this is an id of another element but we weren't able to specify that it should be a book element in our document_type_definition and since we're not able to specify it of course it's not possible to check it we will see that in extensible_markup_language schema we can have typed pointers but it's not possible to have them in dtds the last change i'm going to show is to add a second book reference within our remark so as i pointed out over here when we write personal computer data or in an element type kleene the zero or more star that means we can freely mix text and sub_elements so just right in the middle here let's put a book reference and we can put let's say book equals ju and that will be the end of our reference there and now we see that we have text followed_by a subelement followed_by more text then so on that should validate fine and in fact it does that completes our demonstration of extensible_markup_language documents with dtds in this video we'll be learning_about extensible_markup_language schema like document_type_descriptors extensible_markup_language schema allows_us a way to give content specific specifications for our extensible_markup_language data as you may remember we send to a validating extensible_markup_language parser or extensible_markup_language document as_well as a description we talked_about dtds in the last video we'll talk_about xsds in this one the validating extensible_markup_language parser will check that the document is well_formed and it will also check that it matches it's specification if it does extensible_markup_language comes out if it doesn't we get an_error that the document is not valid extensible_markup_language schema is an extensive language very_powerful like document_type_descriptors we can specify the elements we want in our extensible_markup_language data the attributes the nesting of the elements how elements need to be ordered and and number of occurrences of elements in addition we can specify data types we can specify keys the pointers that we can specify are now typed like in dtds and much much more now one difference between extensible_markup_language schema and dtds is that the specification locations in extensible_markup_language schemas called xsd's are actually written in the xml language itself that can be useful for example if we have a browser that nicely renders the extensible_markup_language the languages i said is vast in this video we're going to show one sort of quote easy example but that example will give very much the flavor of extensible_markup_language schema and we'll try to highlight the differences between extensible_markup_language schema and using document_type_descriptors ok here were are with our extensible_markup_language document on the left on the right we have our extensible_markup_language schema descriptor or xml_schema_definition and we have a little command line that we're gonna use for our validation command now let_me just say up_front that we're not going to be going through the xml_schema_definition line by line in detail the way we did with dtds as you can see it's rather long and that would take us far too long and be rather boring so what i highly suggest is that you download the file for the xml_schema_definition so you can look_at it yourself and look_at the entire file as_well as the extensible_markup_language and give it a try with validating what i'm gonna do in this demo primarily is focus_on those aspects of the xml_schema_definition that are different are more powerful than we had in document_type_descriptors first let's take a look_at the data itself so we have our bookstore data as usual with two books and three authors its slightly restructured from any of the versions we've used before it looks closest to the last one we used because the books and authors are separate and the authors are actually exactly the same the have an identifier and a first name last_name sub_element but the primary difference is in the books instead of using id refs attributes to refer from books to authors we still we now back our back having an author's sub_element with the two authors underneath and then those authors themselves have what are effectively the pointers to the identifiers for the authors and we'll see how that's going to mesh with the extensible_markup_language schema descriptor that we're using for this file so the other thing i want to mention is that right now we have the extensible_markup_language schema descriptor in one file and the extensible_markup_language in another you_might remember for the document_type_definition we simply placed the dtds specification at the top of the file with the extensible_markup_language for dtds you can do it either way in the same file or in a separate file for xsds we always put those in a separate file also notice that the xml_schema_definition itself is in extensible_markup_language it is using special tags these are tags that are part of the xml_schema_definition language but we are still expressing it in extensible_markup_language so we have two extensible_markup_language files the data file and the schema file to validate the data file against the schema file we can use again the extensible_markup_language link feature we specify the schema file the data file and when we execute the command we can see that the file validates correctly so i'm now going to highlight four features of extensible_markup_language schema that aren't present in dtd's one of them is typed values one of them is key declarations similar to ids but a little_binary_digit more powerful one is references which are again similar to pointers but a little_more powerful and finally a currents constraints so let's start with tights in our data we see that the price attribute is denoted with a string and when we had dtds all attribute values were in fact stringed in excess fees we can say that we want to check that the values which are still look like strings actually confirm to specific types for_example we can say that the price must be in integer again i'm not going to be labor the syntactic details but rather i'm just going to highlight the places in the xml_schema_definition where we're declaring things of interest so specifically here's where we declare the attribute price and we say that the type of price must be an integer so our document validated correctly what if we change this one hundred to be foo instead of_course with a document_type_definition this would be fine because all attributes are treated as strings but if we try to validate now we see an_error specifically foo is not a value of the correct type so let's change that foo back to a hundred so that we validate correctly next let's talk_about keys in dtd's we were able to specify id's id's were globally unique values that could be used to identify specific elements for_example when we wanted to point to those elements using id refs keys are a little_binary_digit more powerful or more specific i should say if you think_about the relational_model a key in the relational_model is an attribute or set of attributes that must be unique for each tuple in a table so we don't have tables or tuples right now but we do have elements and we often have repeated elements so similarly we can specify that a particular attribute or component must be unique within every element of the same type and we have two keys in our specification one key which we can see here for books and one for authors specifically we say for books that the isbn attribute must be a key and we say for authors that the ident attribute must be a key so let's go over to our data and let's start_by looking_at the authors so if we change for example u to hg then we should get a key violation because we'll have two authors that have the same ident attribute let's try to validate in fact we do correctly get a key validation we also get a couple of other errors and those have to do with the fact that we are using these items as the destination of what are affect doubly pointers or references so let's change that back to ju make_sure everything now validates fine and it does now lets make another change so we have the ident key here and we have the isbn_number being the number for books what if changed the isbn_number to one of the values we used as a key for the author say hg when we did something similar with dtds we got an_error because in dtds ids have be globally unique here we should not get an_error hg should be a perfectly reasonable key for books because we don't have another value that's the same and in fact it does validate now let's undo that change next let's talk_about references so references allow_us to have what are possibly typed pointers using the dtd so they are called key refs and here we have an example let_me just change this to the middle of the document so one of the reference types that we've defined in our document_type_definition is a pointer to authors that we're using in our books specifically we want to specify that this attribute here the auth ident has a value that is a key for the author elements and we want to make_sure it's author elements that its pointing to and not other types of elements now the syntax for doing this in extensible_markup_language schema is rather detailed its alright here and just to give you a flavor this middle selector here is actually using the xpath language which we'll be using which we'll be learning later but what it says is that when we navigate in the document down to one of these auth elements within that auth element the auth ident attribute is a reference to what we have already defined as author keys we've done something similar with books we have our book remark bookref that brings us down to this element here and there we specified that the book attribute must be a reference to a book key and the book key was earlier defined to be the isbn_number again i know this is all complicated and the syntax is very clunky so i urge you to download the specification and spend time looking_at it on your_own now let's make a couple of changes to our document to demonstrate how the checking of these typed pointers works for_example lets change our first reference here to food let's validate the document and we should get an_error and indeed we do the author key rep is incorrect now lets change that fu to jw so originally it was ju but now we're going to have two authors both of whom refer to jw now this should not be a problem it's simply two pointers to the same author and we did not prohibit that in our xmls schema specification and indeed our document validates we'll change that one back and the last as a last change we'll change our book reference here to refer to jw this should not validate because this time unlike with dtds we're we've actually specified typed pointers in_other_words we've specified that this pointer or this reference must be to a book element and not to an author element so we'll validate and indeed it fails i've undone that change and now let's move to the last feature that we're gonna look_at in this demonstration which is a currents constraint so in let_me just bring up the first instance of it in extensible_markup_language schema we can specify how_many times an element type is allowed to occur specifically we can specify the minimum number of occurrences and the maximum number of occurrences as a default if we don't specify for an element the minoccurs or maxioccurs the default for both of them is one so here for books we've said that we can have zero books and we can have any number so this is the maximum flexibility any number of elements for authors we've also said we can have any number of authors that's in the actual database itself remember that our book store consists of a set of books and a set of authors but we are going to specify something a little different for how_many authors we have within a specific book so let's continue to look_at other cases where we've specified occurrence constraints here is the case where we're specifying how_many authors we have within a book and again few boy this is a lot of extensible_markup_language here so take your time when looking_at it or for now just take my word for it what we're specifying here is how_many sub_elements how_many auth sub_elements we have within each author's element and here we have no minoccurs specification only a maxoccurs that_means by default minoccurs is one so what this is saying specifically is that every book has in it's authors sub_element atleast one off but we can have any number of them that's the string unbounded looking at the remaining occurrence constraints for remarks we have the minimum number of occurrences is zero in_other_words we don't have to have a remark and we haven't specified max occurs so the default max occurs is one so what we're saying here is that every book may have either no remark or exactly one remark but it may not have more_than that and there's a few more occurrence constraints that you can take a look_at again as you browse the extensible_markup_language schema description on your_own now let's make some changes in the document to test these occurrence constraints so first let's remove the authors from our first book we won't remove the whole author sub_element but just the two off sub_elements of authors we attempt to validate and we see that it doesn't validate we're missing some child elements specifically the off child elements because we expected there to be at_least one of them incidentally if we took the entire author sub_element out we'll also get an_error since we've specified the books must have author sub_element so now we're missing the entire author structure in that book and again we don't validate let's put authors back and now let's look_at the remark occurrence constraint so we said that every book can have zero or one remarks so let's just add another remark to this book oh hi actually remarks are allowed to be empty in any case we have added a small remark we validate and we see that we have too many remarks again because we specified that every book can have at most one remark so that concludes our demonstration of extensible_markup_language schema again it's been rather cursory we've only covered a few of the constructs but i did focus_on the constructs that we have in extensible_markup_language schema that are not specifiable in dtds finally one more time i urge you download the access fee and the document and play around with it yourself this video introduces javascript_object_notation let's start_by talking_about its pronunciation some people call it jason and some call it j sahn i'll do a little_binary_digit of investigation and discovered that the original developer of javascript_object_notation calls it javascript_object_notation so i'll do that too like extensible_markup_language javascript_object_notation can be thought of as a data_model an alternative to the relational data_model that is more appropriate for semi_structured data in this video i'll introduce the basics of javascript_object_notation and i'll actually compare javascript_object_notation to the relational data_model and i'll compare it to extensible_markup_language but it's not crucial to have watched those videos to get something out of this one now among the three models the relational_model extensible_markup_language and javascript_object_notation javascript_object_notation is by a large margin the newest and it does show there aren't as many tools for javascript_object_notation as we have for extensible_markup_language and certainly not as we have for relational javascript_object_notation stands for javascript object notation although it's evolved to become pretty_much independent of javascript at this point the little snippet of javascript_object_notation in the corner right now mostly for decoration we'll talk_about the details in just a minute now javascript_object_notation was designed originally for what's_called serializing data objects that is taking the objects that are in a program and sort of writing them down in a serial fashion typically in files one thing about javascript_object_notation is that it is human readable similar to the way xml is human readable and is often use for data interchange so for writing out say the objects program so that they can be exchanged with another program and read into that one also just more generally because javascript_object_notation is not as rigid as the relational_model it's generally useful for representing and for storing data that doesn't have rigid structure that we've been calling semi_structured data as i_mentioned javascript_object_notation is no_longer closely tied to many different programming_languages do have parsers for reading javascript_object_notation data into the program and for writing out javascript_object_notation data as_well now let's talk_about the basic constructs in javascript_object_notation and as we will see this constructs are recursively_defined we'll use the example javascript_object_notation data shown on the screen and that data is also available in a file for download from the website the basic atomic values in javascript_object_notation are fairly typical we have numbers we have strings we also have boolean values although there are none of those in this example that's true and false and no values there are two types of composite values in javascript_object_notation objects and arrays objects are enclosed in curly_braces and they consist of sets of label_value_pairs for_example we have an object here that has a first name and a last_name we have a more bigger let's say object here that has isbn price edition and so on when we do our javascript_object_notation demo we'll go into these constructs in more_detail at this point we're just introducing them the second type of composite value in javascript_object_notation is arrays and arrays are enclosed in square_brackets with commas between the array elements actually we have commas in the objects as and arrays are list of values for_example we can see here that authors is a list of author objects now i_mentioned that the constructs are recursive specifically the values inside arrays can be anything they can be other arrays or objects space values and the values are making up the label_value_pairs and objects can also be any composite value or a base value and i did want to mention by the way that sometime this word label here for label_value_pairs is called a property so just like extensible_markup_language javascript_object_notation has some basic_structural_requirements in its format but it doesn't have a lot of requirements in terms of uniformity we have a couple of examples of heterogeneity in here for example this book has an edition and the other one doesn't this book has a remark and the other one doesn't but we'll see many more examples of heterogeneity when we do the demo and look into javascript_object_notation data in more_detail now let's compare javascript_object_notation and the relational_model we will see that many of the comparisons are fairly similar to when we compared extensible_markup_language to the relational_model let's start with the basic structures underling the data_model so the relational_model is based_on tables we set_up structure of table a set of columns and then the data becomes rows in those tables javascript_object_notation is based instead on sets the sets of label pairs and arrays and as we saw they can be nested one of the big differences between the two models of course is the scheme so the relational model has a schema fixed in advance you set it up before you have any data loaded and then all data needs to confirm to that schema javascript_object_notation on the other other_hand typically does not require a schema in advance in fact the schema and the data are kinda mix together just like an xml and this is often referred to as self describing data where the schema elements are within the data itself and this is of course typically more flexible than the to a model but there are advantages to having schema sp as_well definitely as far as queries go one of the nice features of the relational_model is that there are simple expressive languages for clearing the database in terms of javascript_object_notation although a few new things have been proposed at this point there's nothing widely_used for querying javascript_object_notation data typically javascript_object_notation data is read into a program and it's manipulated programatically now let_me interject that this video is being made in february so it is possible that some javascript_object_notation query languages will emerge and become widely_used there is just nothing used at this point there are some proposals there's a javascript_object_notation path language javascript_object_notation query a language called jaql it may be that just like extensible_markup_language the query language are gonna follow the prevalent use of the data format or the data_model but that does not happened yet as of february how about ordering one aspect of the relational_model is that it's an unordered model it's based_on sets and if we want to see relational data in sorted order then we put that inside a query in javascript_object_notation we have arrays as one of the basic data structures and arrays are ordered of_course there's also the fact like extensible_markup_language that javascript_object_notation data is often is usually written files and files themselves are naturally ordered but the ordering of the data in files usually isn't relevant sometimes it is but typically not finally in terms of implementation for the relational_model there are systems that implement the relational_model natively they're very generally quite efficient and powerful systems for javascript_object_notation we haven't yet seen stand alone database_systems that use javascript_object_notation their data_model instead javascript_object_notation is more typically coupled with programming_languages one thing i should add however javascript_object_notation is used in nosql_systems we do have videos about nosql_systems you may or may not have have watched those yet there's a couple of different_ways that javascript_object_notation is used used in those systems one of them is just as a format for reading data into the systems and writing data out from the systems the other way that it is used is that some of the note systems are what are called document management systems where the documents themselves may contain javascript_object_notation data and then the systems will have special features for manipulating the javascript_object_notation in the document is better stored by the system now let's compared javascript_object_notation and extensible_markup_language this is actually a hotly debated comparison right now there are signification overlap in the usage of javascript_object_notation and extensible_markup_language both of them are very good for putting semi_structured data into a file format and using it for data interchange and so because there's so much overlap in what they're used for it's not surprising that there's significant debate i'm not gonna take sides i'm just going to try to give you a comparison let's start_by looking_at the verbosity of expressing data in the two languages so it is the case that extensible_markup_language is in general a little_more verbose than javascript_object_notation so the same data expressed in the formats will tend to have more characters in extensible_markup_language than javascript_object_notation and you can see that in our examples because our big json example was actually pretty_much the same data that we used when we showed extensible_markup_language and the reason for extensible_markup_language being a binary_digit more verbose largely has to do actually with closing_tags and some other features but i'll let you judge for yourself whether the somewhat longer expression of extensible_markup_language is a problem second is complexity and here too most people would say that extensible_markup_language is a binary_digit more complex than javascript_object_notation i'm not sure i entirely agree with that comparison if you look_at the subset of extensible_markup_language that people really use you've got attributes sub_elements and text and that's more or less it if you look_at json you got your basic values and you've got your objects and your arrays i think the issue is that extensible_markup_language has a lot of extra stuff that goes along with it so if you read the entire extensible_markup_language specification it will take you a long time javascript_object_notation you can grasp the entire specification a little_binary_digit more quickly now let's turn to validity and by validity i_mean the ability to specify constraints or restriction or schema on the structure of data in one of these models and have it enforced by tools or by a system specifically in extensible_markup_language we have the notion of document_type_descriptors or dtds we also have extensible_markup_language schema which gives_us xsd's extensible_markup_language schema descriptors and these are schema like things that we can specify and we can have our data checked to make_sure it conforms to the schema and these are i would say fairly widely_used at this point for extensible_markup_language for javascript_object_notation there's something called javascript_object_notation schema and you know similar to extensible_markup_language schema it's a way to specify the structure and then we can check that javascript_object_notation conforms that and we will see some of that in our demo the current status february is that this is not widely_used this point but again it could really just be evolution if we look back at extensible_markup_language as it was originally proposed probably we didn't see a whole of lot of use of dtds and in fact not as xsds for sure until later on so we'll just have to see whether javascript_object_notation evolves in a similar way now the programming interface is where javascript_object_notation really shines the programming interface for extensible_markup_language can be fairly clunky the extensible_markup_language model the attributes and sub_elements and so on don't typically match the model of data inside a programming language in fact that's something called the impedance mismatch the impedance miss match has been discussed in database_systems actually for decades because one of the original criticisms of relational database_systems is that the data structures used in the database specifically tables didn't match directly with the data structures and programming_languages so there had to be some manipulation at the interface between programming_languages and the database system and that's the mismatch so that same impedance mismatch is pretty_much present in extensible_markup_language wherein javascript_object_notation is really a more direct mapping between many programming_languages and the structures of javascript_object_notation finally let's talk_about querying i've already touched on this a binary_digit but javascript_object_notation does not have any mature widely_used query languages at this point for extensible_markup_language we do have xpath we have xquery we have extensible_stylesheet_language_transformations maybe not all of them are widely_used but there's_no question that xpath at_least and extensible_stylesheet language are used quiet a binary_digit as far as json goes there is a proposal called json path it looks actually quiet a lot like xpath maybe he'll catch on there's something called javascript_object_notation query doesn't look so much like extensible_markup_language query i_mean xquery and finally there has been a proposal called jaql for the javascript_object_notation query language but again as of february all of these are still very early so we just don't know what's going to catch on so now let's talk_about the validity of javascript_object_notation data so do javascript_object_notation data that's syntactically valid simply needs to adhere to the basic_structural_requirements as a reminder that would be that we have sets of label_value_pairs we have arrays of values and our values are from predefined types and again these values here are defined recursively so we start with a javascript_object_notation file and we send it to a the parser may determine that the file has syntactic errors or if the file is syntactically correct then it can parsed into objects in a programming language now if we're interested in semantically valid javascript_object_notation that is javascript_object_notation that conforms to some constraints or a schema then in addition to checking the basics structural_requirements we check_whether javascript_object_notation conforms to the specified schema if we use a language like javascript_object_notation schema for example we put a specification in as a separate file and in fact javascript_object_notation schema is expressed in javascript_object_notation itself as we'll see in our demo we send it to a validator and that validator might find that there are some syntactic errors or it may find that there are some symantic errors so the data could to be correct syntactically but not conform to the schema if it's both syntactically and semantically correct then it can move on to the parser where will be parsed again into objects in a programming language so to summarize javascript_object_notation stands for java script object_notation it's a standard for taking data objects and serializing them into a format that's human readable it's also very useful for exchanging data between programs and for representing and storing semi_structured data in a flexible fashion in the next_video we'll go live with a demonstration of javascript_object_notation we'll use a couple of javascript_object_notation editors we'll take a look_at the structure of javascript_object_notation data when it's syntactically correct we'll demonstrate how it's very flexible when our data might irregular and we'll also demonstrate schema checking using an example of json's_schema in this video we'll see a demonstration of javascript_object_notation data as a reminder javascript_object_notation stands for java script object_notation and it's a standard for writing data objects into human readable format typically in a file it's useful for exchanging data between programs and generally because it's quite flexible it's useful for representing and for storing data that's semi_structured a reminder of the basic constructs in javascript_object_notation we have the atomic value such as integers and strings and so on and then we have two types of composite things we have objects that are sets of label_value_pairs and then we have arrays that are lists of values in the demonstration we'll go through in more_detail the basic constructs of javascript_object_notation and we'll look_at some tactic correctness we'll demonstrate the flexibility of the data_model and then we'll look briefly at json's_schema not widely_used yet but still fairly interesting to look_at and we'll look_at some validation of javascript_object_notation data against a particular schema so here's the javascript_object_notation data that we're gonna be working with during this demo it's the same data that appeared in the slides in the introduction to javascript_object_notation but now we're going to look into the components of the data it's also by the way the same example pretty_much that we used for extensible_markup_language it's reformatted of course to meet the javascript_object_notation data_model but you can compare the two directly lastly we do have the file for the data on the website and i do suggest that you download the file so that you can take a look_at it closely on your_own computer all right so let's see what we have right now we're in an editor for javascript_object_notation data it happens to be the eclipse editor and we're going to make make some edits to the file after we look through the constructs of the file so this is javascript_object_notation data representing books and magazines and we have a little_more information_about our books and our magazines so at the outermost the curly brace indicates that this is a javascript_object_notation object and as a reminder an object is a set of label_value_pairs separated by commas so our first value is the label books and then our first element in the object is the label books and this big value and the second so there's only two label_value_pairs here is the label magazines and this big value here and let's take a look first at magazines so magazines again is the label and the value we can see with the square_brackets here is an array an array is a list of values and here we have two values in our array they're still composite values so we have two values each of which is an object a set of label_value_pairs let_me mention sometimes people call these labels 'properties' by the way okay so now we are inside our objects that are the elements in the array that's the value of magazines and each one of those has labels and values and now we're finally down to the base values so we have the title being national_geographic a string the month being january a string and the year where is an integer and again we have another object here that's a different magazine with a different name month and happens to be the same year now these two have exactly the same structure but they don't have to and we will see that as we start editing the file but before we edit the file let's go and look_at our books here the value of our other label_value pair inside the outermost object books is also an array and the array in this case also has just two elements so we've represented two books here it's a little_more complicated than the magazines but those elements are still objects that are label_value_pairs so we have now the isbn the price the addition the title all either integers or strings and then we have one nested composite object which is the authors and that's an array again so the array again is indicated by the square_brackets and inside this array we have two authors and each of the authors has a first name and a last_name but again that uniformity is not required by the model itself as we'll see so as i_mentioned this is actually an editor for javascript_object_notation data and we're going to come_back to this editor in a moment but what i wanted to do is show the same data in a browser because browsers actually offer some nice features for navigating in javascript_object_notation so here we are in the chrome browser which has nice features for navigating javascript_object_notation and other browsers do as_well we can see here again that we have an object in our javascript_object_notation data that consists of two label_value_pairs books and magazines which are currently closed and and then this plus allows_us to open them up and see the structure for_example we open magazines and we see that magazines is an array containing two objects we can open one of those objects and see that the three label_value_pairs now we're at the lowest levels and similarly for the other object we can see here that books is also an array and we go_ahead and open it up it's an array of two objects we open one of those objects and we see again the set of label_value_pairs where one of the values is a further nesting it's an array and we open that array and we see two objects and we open them and finally see the data at the lowest levels so again the browser here gives_us a nice way to navigate the javascript_object_notation data and see its structure so now we're back to our javascript_object_notation editor by the way this editor eclipse does also have some features for opening and closing the structure of the data but it's not quite as nice as the browser that we use so we decided to use the browser instead what we are going to use the editor for is to make some changes to the javascript_object_notation data and see which changes are legal and which aren't so let's take a look_at the first change a very_simple one what if we forgot a comma well when we try to save that file we get a little notice that we have an_error we expected an n value so that's a pretty straightforward mistake let's put that comma back let's say insert an extra brace somewhere here for whatever_reason we accidentally put in an extra brace again we see that that's marked as an_error so an_error that can be fairly common to make is to forget to put quotes around strings so for example this isbn_number here if we don't quote it we're gonna get an_error as we'll see the only things that can be unquoted are numbers and the values null true and false so let's put our quotes back there now actually even more common is to forget to put quotes around the labels in label_value_pairs but if we forget to quote that that's going to be an_error as_well you_might have noticed by the way when we use the browser that the browser didn't even show us the quotes in the labels but you do when you make the raw javascript_object_notation data you do need to include those quotes speaking of quotes what if we quoted our price here well that's actually not an_error because now we've simply turned price into a string and string values are perfectly well allowed anywhere now we'll see when we use json's_schema that we can make restrictions that don't allow strings in certain places but just for syntactic correctness of javascript_object_notation data any of our values can be strings now as i_mentioned there are a few values that are sort of reserved words in javascript_object_notation for_example true is a reserved word for a bullion value that_means we don't need to quote it because it's actually its_own special type of value and so is false and the third one is null so there's a built in concept of null now if we wanted to use nil for whatever_reason instead of null well now we're going to get an_error because nil is not a reserved word and if we really wanted nil then we would need to actually make it a quoted string now let's take a look inside our author list and i'm going to show you that arrays do not have to have the same type of value for every element in the array so here we have a homogeneous list of authors both of them are objects with a first name and a last_name as separate label_value_pairs but if i change that first one the entire value to be instead of a composite one simply the string jefferey ullman oops sorry about my typing there and that is not an_error it is allowed to have a string and then a composite object and we could even have an array and anything we want in an array when you have a list of values all you need is for each one to be syntactically a correct value in javascript_object_notation now let's go visit our magazines for a moment here and let_me show that empty objects are okay so a list of label_value_pairs comprising an object can be the empty list and so now i've turned this magazine into having no information_about it but that is legal in javascript_object_notation and similarly arrays are allowed to be of zero length so i can take these authors here and i can just take out all of the authors and make that an empty list but that's still valid javascript_object_notation now what if i took this array out altogether in that case now we have an_error because this is an object where we have label_value_pairs and every label_value pair has to have both a label and a value so let's put our array back and we can have anything in there so let's just make it fu and that corrects the error what if we didn't want an array here instead and we tried to make it say an object well we're going to see an_error there because an object as a reminder and this is an easy mistake to make objects are always label_value_pairs so if you want just a value that should be an array if you want an object then we're talking_about a label_value pair so we can just add fu as our value and then we're all set so what we've_seen so far is syntactic correctness again there's_no required uniformity across values in arrays or in the label_value_pairs in objects we just need to ensure that all of our values our basic values are of the right types and things like our commas and curly_braces are all in place what we're gonna do next is look_at json's_schema where we have a mechanism for enforcing certain constraints beyond simple syntactic correctness if you've been very observant you might even have noticed that we have a second tab up here in our editor for a second javascript_object_notation file and this file is going to be the schema for our bookstore data we're using javascript_object_notation schema and javascript_object_notation schema like extensible_markup_language schema is expressed in the data_model itself so our schema description for this javascript_object_notation data is itself javascript_object_notation data and here it is and it's going to take a binary_digit of time to explain now the first thing that you might notice is wow the schema looks more_complicated and in fact longer than the data itself well that is true but that's mostly because our data file is tiny so if we had thousands you know tens of thousands of books and magazines our schema file wouldn't change but our data file would be much longer and that's the typical case in reality now this video is not a complete tutorial about json's_schema there's many constructs in json's_schema that weren't needed to describe the bookstore data for example and even this file here i'm not gonna go through every detail of it right here you can download the file and take a look read a little_more about javascript_object_notation schema i'm just going to give the flavor of the schema specification and then we're going to work with validating the data itself to see how the schema and data work together but to give you the flavor here let's go through at_least some portions of the schema so in some sense the structure of the schema file reflects the structure of the data file that it's describing so the outermost constructs in the schema file are the outermost in the data file and as we nest it parallels the nesting let_me just show a little_binary_digit here we'll probably look_at most of it in the context of validation so we see here that our outermost construct in our data file is an object and that's told to us because we have type as one of our built in labels for the schema so we we have an object with two properties as we can see here the book's property and the magazine's property and i use the word labels frequently for label_value_pairs that's synonymous with property value pairs then inside the books property for example we see that the type of that is array so we've_got a label_value pair where the value is an array and then we follow the nesting and see that it's an array of objects and we go further down and we see the different label_value_pairs of the object that make up the books and nesting further into the authors and so on we see similarly for magazines that the value of the a label_value pair for magazines is an array and that array consists of objects with further nesting so what we're looking_at here is an online javascript_object_notation schema validator we have two windows on the left we have our schema and on the right we have our data and this is exactly the same data file and schema file that we were looking_at earlier if we hit the validate button hopefully everything should work and it does this tells_us that the javascript_object_notation data is valid with respect to the schema now this system will of course find basic syntactic errors so i can take away a comma just like i did before and when i validate i'll get a parsing error that really has nothing to do with the schema what i'm going to focus_on now is actually validating semantic correctness of the javascript_object_notation with respect back to the constructs that we've specified in this schema let_me first put that comma back so we start with a valid file so the first thing i'll show is the ability to constrain basic types and then the ability to constrain the range of values of those basic types and let's focus_on price so here we're talking_about the price property inside books and we specify in our schema that the type of the price must be an integer so for example if our price were instead a string and we went ahead and try to validate that we would get an_error let's make it back into an integer but let's make it into the integer now instead of and why am i doing that because the javascript_object_notation schema also lets me constrain the range of values that are allowed if we have a numeric value so not only in price did i say that it's an integer but i also said that it has a minimum and maximum value the integer of prices must be between and so if i try to make the price of and i validate i'm again getting an_error now it's not a type error but it's an_error that my integer was outside of the allowed range i've put the price back to a hundred and now let's look_at constraints on string values javascript_object_notation schema actually has a little pattern matching language that can be used to constrain the allowable strings for a specific type of value we'll look_at isbn_number here as an example of that we've said that isbn is of type string and then we've further constrained in the schema that the string values for isbn must satisfy a certain pattern i'm not gonna go into the details of this pattern matching language i'm just gonna give an example and in fact this entire demo is really just an example lots of things in json's_schema that we're not seeing what this pattern here says is that the string value for isbn must start with the four characters isbn and then can be followed_by anything else so if we go over to our data and we look_at the isbn_number here and say we have a typo we forgot the i and we try to validate then we'll see that our data no_longer matches our schema specification now let's look_at some other constraints we can specify in json's_schema we can constrain the number of elements in an array we can give a minimum or maximum or both and i've done that here in the context of the authors array remember the authors are an array that's a list of objects and here i've said that we have a minimum number of items of and a maximum number items of in_other_words every book has to have between one and ten authors so let's try for example taking out all of our authors here in our first book we actually looked at this before in terms of syntactic validity and it was perfectly valid to have an empty array but when we try to validate now we do get an_error and the reason is that we said that we needed between one and ten array elements in the case of authors now let's fix that not by putting our authors back but let's say we actually decide we would like to be able to have books that have no authors so we can simply fix that by changing that minimum item to zero and that makes our data valid again and in fact we could actually take that minimum constraint out all together and if we do that our data is still going to be valid now let's see what_happens when we add something to our data that isn't mentioned in the schema if you look carefully you'll see that everything that we have in the data so far has been specified in the schema let's say we come along and decide were gonna also have ratings for our books so let's add here a rating label property with the value we go_ahead and validate you probaly think it's not going to validate properly but actually it did the definition of javascript_object_notation schema that it can constrain things by describing them but you can also have components in the data that aren't present in this schema if we want to insist that every property that is present in the data is also described in this schema then we can actually add a constraint to the schema that tells_us that specifically under the object here we can put in a special flag which itself is specified as a label called additional properties and this flag if we set it to false and remember false can is actually a keyword in json's_schema tells_us that in our data we're not allowed to have any properties beyond those that are specified in the schema so now we validate and we get an_error because the property rating hasn't been defined in the schema if additional properties is missing or have the default value of true then the validation goes through now lets take a look_at our authors that are still here let's_suppose that we don't have a first name for our middle author here if we take that away and we try to validate we do get an_error because we specified in our schema and it's right down here that author objects must have both a first name and a last_name it turns_out that we can specify for every property that the property is optional so we can add to the description of the first name not only that the type is a string but that that property is optional so we say optional true now let's validate and now we're in good shape now let's take a look_at what_happens when we have object that has more_than one instance of the same label or same property so let's_suppose for example in our magazine the magazine has two different years and this is syntactically valid javascript_object_notation it meets the structure of having a list of label_value_pairs when we validate it we see that we can't add a second property year so this validator doesn't permit two_copies of the same property and it's actually kind of a parsing thing and not so much related to json's_schema many parsers actually do enforce that labels or properties need to be unique within objects even_though technically syntactically correct javascript_object_notation does allow multiple copies so that's just something to remember the typical use of objects is to have unique labels sometimes are even called keys of which evokes a concept of them unique so typically they are unique they don't have to be for syntactic validity usually when you wanna have repeated values it actually makes more sense to create an array i've taken away the second year in order to make the javascript_object_notation valid again now let's take a look_at months i've used months to illustrate the enumeration constraint so we saw that we could constrain the values of integers and we saw that we can constrain strings using a pattern but we can also constrain any type by enumerating the values that are allowed so for the month we've set it a string type which it is but we've further constrained it by saying that string must be either january or february so if we try to say put in the string march we validate and we get the obvious error here we can fix that by changing the month back but maybe it makes more sense that march would be part of our enumeration type so we'll add march to the possible values for months and now we're good as a next example let's take a look_at something that we saw was syntactically correct but isn't going to be semantically correct which is when we have the author list be a mixture of objects and strings so let's put jeffrey_ullman here just as a string we saw that that was still valid javascript_object_notation but when we try to validate now we're gonna get an_error because we expected to see an object we have specified that the authors are objects and instead we got a string now javascript_object_notation schema does allow_us to specify that we can have different types of data in the same context and i'm going to show that with a little_binary_digit of a simpler example here so let's first take away our author there so that we're back with a valid file and what i_am going to look_at is simply the year values so let suppose for whatever_reason that in our magazines one of the years was a string and the other year was an integer so that's not gonna work out right now because we have specified clearly that the year must be an integer in javascript_object_notation schema specifications when we want to allow multiple types for values that are used in the same context we actually make the type be an array so instead of just saying integer if we put an array here that has both integer and string that's telling us that our year value can be either an integer or a string and now when we validate we get a correct javascript_object_notation file that_concludes our demo of javascript_object_notation schema validation again we've just seen one example with a number of the constructs that are available in javascript_object_notation schema but it's not nearly exhaustive there are many others and i encourage_you to read a binary_digit more about it you can download this data and this schema as a starting point and start adding things playing around and i think you'll get a good feel for how javascript_object_notation schema can be used to constrain the allowable data in a javascript_object_notation file this is the first of two videos where we learn_about relational_algebra relational algebra is a formal language it's an algebra that forms the underpinnings of implemented languages like structured_query_language in this video we're going to learn the basics of the relational algebra query_language and a few of the most popular operators in the second video we'll learn some additional operators and some alternate notations for relational_algebra now let's just review first from our previous_video on relational querying that queries over relational_databases operate_on relations and they also produce relations as a result so if we write a query that operates say on the three relations depicted here the result of that query is going to be a new relation and in fact we can post queries on that new relation or combine that new relation with our previous relations so let's start out with relational algebra for the examples in this video we're going to be using a simple college admission relations database with three relations the first relation the college relation contains information_about the college name state and enrollment of the college the second relation the student relation contains an id for each student the student's name gpa and the size of the high_school they attended and finally the third relation contains information_about students_applying to colleges specifically the student's id the college name where they're_applying the major they're_applying for and the decision of that application i've underlined the keys for these three relations as a reminder a key is an attribute or a set of attributes whose value is guaranteed to be unique so for example we're going to assume the college names are unique student ids are unique and that students will only apply to each college for a particular major one time so we're going to have a picture of these three relations at the bottom of the slides throughout the video the simplest query in relational_algebra is a query that is simply the name of a relation so for example we can write a query student and that's a valid expression in relational_algebra if we run that query on our database we'll get as a result a copy of the student relation pretty straightforward now what_happens next is that we're going to use operators of the relational_algebra to filter relations slice relations and combine relations so let's through those operators the first operator is the select operator so the select operator is used to pick certain rows out of a relation the select operator is denoted by a sigma with a subscript that's the condition that's used to filter the rows that we extract from the relations so we're just going through three examples here the first example says that we want to find the students_whose gpa is greater_than so to write that expression in relational_algebra we write the sigma which is the selection operator as a subscript the condition that we're filtering for gpa greater_than and the relation over which we're finding that selection predicate so this expression will return a subset of the student table containing those rows where the gpa is greater if we want to filter for two conditions we just do an and of the conditions in the subscript of the sigma so if we want say students_whose gpa is greater_than and whose high_school_size is less_than a thousand we'll write select gpa greater_than we used a logical and operator a caret high_school_size is less_than a thousand and again we'll apply that to the student relation and once again the result of that will be a subset of the student relation containing the rows that satisfy the condition if we want to find the applications to stanford for a computer_science major then we'll be applying a selection condition to the apply relation again we write the sigma and now the subscript is going to say that the college name is stanford and the major is computer_science again the and operator and that will be applied to the apply relation and it will return as a result a subset of the apply relation so the general case of the select operator is that we have the sigma we have a condition as a subscript and then we have a relation name and we return as a result the subset of the relation our_next operator is the project operator so the select operator picks certain rows and the project_operator picks certain columns so let's say we're interested in the applications but all we wanted to know was the list of id's and the decisions for those applications the project_operator is written using the greek pi symbol and now the subscript is a list of the column names that we would like to extract so we write id sorry student_id and decision and we apply that to the apply relation again and now what we'll get back is a relation that has just two rows it's going to have all the tuples of apply but it's only going to have the student_id and the decision columns so the general case of a project_operator is the projection and then a list of attributes can be any number and then a relation name now what if we're interested in picking both rows and columns at the same time so we want only some of the rows and we want only some of the columns now we're going to compose operators remember that relational queries produce relations so we can write a query say with the select operator of the students_whose gpa is greater_than and this is how we do that and now we can take that whole expression which produces a relation and we can apply the project_operator to that and we can get out the student_id and the student name okay so what we actually see now is that the general case of the selection and projection operators weren't quite what i told you at first i was deceiving you slightly when we write the select operator it's a select with the condition on any expression of the relational_algebra and if it's a big one we might want to put parenthesis on it and similarly the project_operator is a list of attributes from any expression of the relational_algebra and we can compose these as much as we want we can have select over project over select select project and so on now let's talk_about duplicate values in the results of relational_algebra queries let's_suppose we ask for a list of the majors that people have applied for and the decision for those majors so we write that as the project of the major and the decision on the applied relation you_might think that when we get the results of this query we're going to have a lot of duplicate values so we'll have computer_science yes computer_science yes computer_science no ee yes ee no and so on you can imagine in a large realistic database of applications there's going to be hundreds of people applying for majors and having a yes or a no decision the semantics of relational_algebra says that duplicates are always eliminated so if you run a query that would logically have a lot of duplicate values you just get one value for each result that's actually a binary_digit of a difference with the structured_query_language language so structured_query_language is based_on what's_known_as multi sets or bags and that means that we don't eliminate duplicates whereas relational_algebra is based_on sets themselves and duplicates are eliminated there is a multi set or bad relational_algebra defined as_well but we'll be fine by just considering the set relational_algebra in these videos our first operator that combines two relations is the cross_product operator also known_as the cartesian product what this operator does is it takes two relations and kinda glues them together so that their schema of the result is the union of the schemas of the two relations and the contents of the result are every combination of tuples from those relations this is in fact the normal set cross_product that you might have learned way back in the elementary school so let's talk_about say doing the cross products of students and apply so if we do this cross products just to save drawing i'm just gonna glue these two relations together here so if we do the cross_product we'll get at the result a big relation here which is going to have eight attributes the eight attributes across the student and apply now the only small little trick is that when we glue two relations together sometimes they'll have the same attribute and we can see we have sid on both_sides so just as a notational convention when cross_product is done and there's two attributes that are named they're prefaced with the name of the relation they came from so this one would be referred to in the cross_product as the student dot sid where this one over here would be referred to as the apply dot sid so again we glue together in the cartesian product the two relations with four attributes each we get a result with eight attributes now let's talk_about the contents of these so let's_suppose that the student relation had s tuples in it and that's how_many tuples while the apply had tuples in it the result of the cartesian products is gonna have s times a tuples is going to have one tuple for every combination of tuples from the student relation and the apply relation now the cross_product seems like it might not be that helpful but what is interesting is when we use the cross_product together with other operators and let's see a big example of that let's_suppose that we want to get the names and gpas of students with a high_school_size greater_than a thousand who applied to computer_science and were rejected okay so let's take a look we're going to have to access the students and the apply records in order to run this query so what we'll do is we'll take student cross apply as our starting point so now we have a big relation that contains eight attributes and all of those tuples that we described previously but now we're going to start making things more interesting because what we're going to do is a big selection over this relation and that selection is first of all going to make_sure that it only combines student and apply tuples that are referring to the same student so to do that we write student dot sid equals apply dot sid so now we've filtered the result of that cross_product to only include combinations of student and apply by couples that make sets now we have to do a little_binary_digit of additional filtering we said that we want the high_school_size to be greater_than a thousand so we do an and operator in the high_school we want them to have applied to computer_science so that's and major equals computer_science we're getting a nice big query here and finally we want them to have been rejected so and decision equals we'll just be using r for reject so now we've_got that gigantic query but that gets us exactly what we want except for one more thing which is as i said all we want is their names and gpas so finally we take a big parentheses around here and we apply to that the projection operator getting the student name and the gpa and that is the relational_algebra expression that produces the query that we have written in english now we have seen how the cross_product allows_us to combine tuples and then apply selection conditions to get meaningful combinations of tuples it turns_out that relational_algebra includes an operator called the natural_join that is used pretty_much for the exact purpose what the natural_join does is it performs a cross_product but then it enforces equality on all of the attributes with the same name so if we set_up our schema properly for example we have student_id and student_id here meaning the same thing and when the cross_product is created it's only going to combine tuples where the student_id is the same and furthermore if we add college in we can see that we have the college name here and the college name here if we combine college and apply tuples we'll only combine tuples that are talking_about the same college now in addition one more thing that it does is it gets rid of these pesky attributes that have the same names so since when we combine for example student and apply with the natural_join we're only combining tuples where the student sid is the same as the apply sid then we don't need to keep two_copies of that column because the values are always going to be equal so the natural_join operator is written using a bow tie that's just the convention you will find that in your text editing programs if you look carefully so let's do some examples now let's go_back to our same query where we were finding the names and gpas of students from large high_schools who applied to computer_science and were rejected so now instead of using the cross_product we're gonna use the natural_join which as i said was written with a bow tie what that allows_us to do once we do that natural_join is we don't have to write that condition that enforced equality on those two attributes because it's going to do it itself and once we have done that then all we need to do is apply the rest of our conditions which were that the high_school is greater_than a thousand and the major is computer_science and the decision is reject again we'll call that r and then since we're only getting the names and gpas we write the student name and the gpa okay and that's the result of the query using a natural_join so as you can see that's a little_binary_digit simpler than the original with the cross_product and by setting up schemas correctly natural_join can be very useful now let's add one more complication to our query let's_suppose that we're only interested in applications to colleges where the enrollment is greater_than so so far in our expression we refer to the student relation and the apply relation but we haven't used the college relation but if we want to have a filter on enrollment we're going to have to bring the college relation into the picture this turns_out to perhaps be easier than you think let's just erase a couple of our parentheses here and what we're going to do is we're going to join in the college relation with the two relations we have already now technically the natural_join is the binary operator people often use it without parentheses because it's associative but if we get pedantic about it we could add that and then we're in good shape now we've joined all three relations together and remember automatically the natural_join enforces equality on the shared attributes very_specifically the college name here is going to be set equal to the apply college name as_well now once we've done that we've_got all the information we need we just need to add one more filtering condition which is that the college enrollment is greater_than and with that we've solved our query so to summarize the natural_join the natural_join combines relations it automatically sets values equal when attribute names are the same and then it removes the duplicate columns the natural_join actually does not add any expressive_power to relational_algebra we can rewrite the natural_join without it using the cross_product so let_me just show that rewrite here if we have and now i'm going to use the general case of two expressions one expression natural_join with another expression that is actually equivalent to doing a projection on the schema of the first expression i'll just call it e now union the schema of the second expression that's a real union so that means if we have two_copies we just keep one of them over the selection of now we're going to set all the shared attributes of the first expression to be equal to the shared attributes of the second so i'll just write e a equals e a and e a equals e dot a now these are the cases where again the attributes have the same names and so on so we're setting all those equal and that is applied over expression one cross_product expression two so again the natural_join is not giving_us additional expressive_power but it is very convenient notationally the last operator that i'm going to cover in this video is the theta_join operator like natural_join theta_join is actually an abbreviation that doesn't add expressive_power to the language let_me just write it the theta_join operator takes two expressions and combines them with the bow tie looking operator but with a subscript theta that theta is a condition it's a condition in the style of the condition in the selection operator and what this actually says it's pretty_simple is it's equivalent to applying the theta condition to the cross_product of the two expressions so you_might_wonder why i even mention the theta_join operator and the reason i mention it is that most database_management systems implement the theta_join as their basic operation for combining relations so the basic operation is take two relations combine all tuples but then only keep the combinations that pass the theta condition often when you talk to people who build database_systems or use databases when they use the word join they really mean the theta_join so in conclusion relational_algebra is a formal language it operates on sets of relations and produces relations as a result the simplest query is just the name of a relation and then operators are used to filter relations slice them and combine them so far we've learned the select operator for selecting rows the project_operator for selecting columns the cross_product operator for combining every possible pair of tuples from two relations and then two abbreviations the natural_join which a very useful way to combine relations by enforcing a equality on certain columns and the theta_join operator in the next_video we'll learn some additional operators of relational_algebra and also some alternative notations for relational_algebra expressions this is the second of two videos about the relational_algebra in the first video we learned about the select and project operators in various types of joins this video will cover set operators union difference and intersection the renaming operator and different notations for expressions of relational_algebra just as a reminder we apply a relational_algebra query or expression to a set of relations and we get as a result of that expression a relation as our answer for our examples we're using an imaginary database about college_admissions we have a relation of colleges a relation of students and a relation with information_about students_applying to colleges we'll keep at the bottom of the video these three depictions of those relations with a few abbreviations used so that names aren't too long let's move_ahead to our first operator the first of three set operators is the union_operator and it's a standard set union that you learned about in elementary school let's_suppose for example that we want a list of the college and student names in our database so we just want those as list for_example we might want stanford and susan and cornell and mary and john and so on now you might think we can generate this list by using one of the operators we've already learned for combining information from multiple relations such as the cross_product operator or the natural_join operator the problem with those operators is that they kind of combine information from multiple relations horizontally they might take a tuple t from one relation and tuple t from the other and kind of match them but that's not what we want to do here we want to combine the information vertically to create our list and to do that we're going to use is the union_operator so in order to get a list of the college names and the student names we'll project the college name from the college relation that gives_us a list of college names we'll similarly project the student name from the student relation and we've_got those two lists and we'll just apply the union_operator between them and that will give_us our result now technically in relational_algebra in order to union two lists they have to have the same schema that means that same attribute name and these don't but we'll correct that later for now you get the basic_idea of the union_operator our_next set operator is the difference_operator and this one can be extremely useful as an example let's_suppose we want to find the ids of students_who didn't apply to any colleges it sounds like a complicated query but we'll actually write it in a very_simple fashion we'll start_by projecting the student_id from the student relation itself and that will give_us all of this student ids then lets project the student_id from the apply relation and that gives_us the ids of all students_who have applied somewhere all we need to do is take the difference_operator written with the minus sign and that gives_us the result of our query it will take all ids of the students and then subtract the ones who have applied somewhere suppose instead that we wanted the names of the students_who didn't apply anywhere not just their ids so that's a little_binary_digit more_complicated you_might think oh just add student name to the projection list here but if we do that then we're trying to subtract a set that has just ids from a set that has the pair of id names and we can't have the student name here because the student name isn't part of the apply relation so there is a nice trick however that's going to do what we want let_me erase these here what we're going to do is we're going to take this whole expression here which gives_us the student ids who didn't apply anywhere and watch this pretty clever we're gonna do a natural_join with the student relation and now that's called a join back so we've taken the ids a certain select set of ids and we've joined them back to the student relation that's going to give_us a schema that's the student relation itself and then we're just going to add to that a projection of the student name and that will give_us our desired answer the last of the three set operators is the intersection operator so let's_suppose we want to find names that are both a college name and a student name so perhaps washington is the name of a student and a college to find those we're going to do something similar to what we've done in the previous examples let's start_by getting the college names then let's get the student names and then what we're going to do is just perform an intersection of those two expressions and that will give_us the result that we want now like our previous example technically speaking the two expressions on the two sides of the intersection ought to have the same schema and again i'll show you just a little_binary_digit later how we take care of that now it turns_out that intersection actually doesn't add any expressive_power to our language and i'm going to show that actually in two different_ways the first way is that if we have two expressions let's say e and e and we perform their intersection that is exactly equivalent to writing e minus using the difference_operator e minus e now if you're not convinced of that immediately let's go_back to venn diagrams again a concept you probably learned early in your schooling so let's make a picture of two circles and let's say that the first circle circle represents the result of expression e and the second rear circle represents the result of expression e now if we take the entire circle e let's shade that in purple and then we take the result so that's e here and then we take e the result of the expression e minus e here we'll write that in green so that's everything in e that's not in e that's this okay and if we take the purple minus the green you will see that we actually do get the intersection here so that's a simple property of set operations but what that's telling us is that this intersection operator here isn't giving_us more expressive_power because any expression that we can write in this fashion we can equivalently right with the difference_operator in this fashion let_me show you a completely different way in which intersection doesn't add any expressive_power so let's go_back to e intersect e and as a reminder for this to be completely correct these have to have the same schema as equal between the two e intersect e turns_out to be exactly the same as e natural_join e in this particular case because the schema is the same remember what natural_join does natural join says that you match up all columns that are equal and you eliminate duplicate values of columns so i'll just let you work out for yourself that this is indeed an equivalence and a second reason that the intersection doesn't add any expressive_power nevertheless the intersection can be very useful to use in queries our last operator is the rename_operator the rename_operator is necessary to express certain queries in relational_algebra let_me first show the form of the operator and then we'll see it in use the rename_operator uses the greek symbol rho and like all of our other operators it applies to the result of any expression of relational_algebra and what the rename_operator does is it reassigns the schema in the result of e so we compute e we get a relation as a result and it says that i'm going to call the result of that relation r with attributes a through an and then when this expression itself is embedded in more complex expression we can use this schema to describe the result of the e again we'll see shortly why that's useful there are a couple of the abbreviations that are used in the rename_operator this form is the general form here one abbreviation is if we just want to use the same attribute names that came out of e but change the relation name we write row sub r applied to e and similarly if we want to use just the attribute names if we want to change i'm_sorry just the attribute names then we write attribute list here and it would keep the same relation name this form of course has to have a list of attributes or we would not be able to distinguish it from the previous form but again these are just abbreviations and the general form is the one up here okay so now let's see the rename_operator in use the first use of the rename_operator is something i alluded to earlier in this video which is the fact that when we do the set operators the union difference and intersect operators we do expect the schemas on the two the sides of the operator to match and in a couple of our examples they didn't match and the rename_operator will allow_us to fix that so for example if we're doing the list of college and student names and let_me just remind_you how we wrote that query we took the c name from college and we took the s name from students and we did the big union of those now to make this technically correct these two attribute names would have to be the same so we're just going to apply the rename_operator let's say that we're gonna rename the result of this first expression to say the relation name c with attribute name and let's make the result of the second expression similarly be the relation c with attribute name and now we have two matching schemas and then we can properly perform the union_operator again this is just a syntactic necessity to have well_formed relational_algebra expressions now the second use of the rename_operator is a little_more complicated and quite a binary_digit more important actually which is disambiguation in self joins and you probably have no idea what i'm talking_about when i say that but let_me give an example let's_suppose that we wanted to have a query that finds pairs of colleges in the same state now think_about that so we want to have for example stanford and berkeley and berkeley and ucla and so on so that as you can see unlike the union_operator we're looking for this horizontal joining here so we're going to have to combine essentially two_instances of the college relation and that's exactly what we're going to do we're effectively going to do college join college making the state equal so let's work on that a little_binary_digit so what we wanna do is we wanna have college and we want to let's just start with say the cross_product of college and then we want to somehow say well the state equals the state but that's not gonna work which state are these and how do we describe the two_instances of college so what we're going to do and let_me just erase this is we're going to rename those two_instances of colleges so they have different names so we're going to take the first instance of college here and we're going to apply a rename_operator to that and we'll call it c and we'll say that that has name state and enrollment and then we'll take the second instance here we'll call it c so n s e of college and now we have two different relations so what we can do is we can take the cross_product of those two like that and then we can select where s equals s okay and that gives_us pairs of college in the same state actually let_me show you an even trickier simpler way of doing this let's take away the selection operator here okay and let's take away this and let's make this into a natural_join now that's not gonna work quite yet because the natural_join requires attribute names to be the same and we don't have any attribute names that are the same so the last little trick we're gonna do is we're gonna make those two attribute names s be the same and now when we do the natural_join it's gonna require equality on those two s's and everything is gonna be great okay now things are still a little_binary_digit more_complicated one problem with this query is that we are going to get colleges paired with themselves so we're going to get from this for example stanford stanford if you think_about it right berkeley berkeley as_well as stanford berkeley now that's not really what we want presumably presumably we actually want different colleges but that's pretty easy to handle actually let's put a selection condition here so that the name one is not equal to name two great we took care of that so in that case we will no_longer get stanford standford and berkeley berkeley ah but there's still one more problem we'll get stanford berkeley but we'll also get berkeley stanford now let_me pause for a moment and see if you can think of a simple way to solve this problem actually there's a surprisingly simple way kind of clever we're gonna take away this not equals and we're going replace it with a less_than and now we'll only get pairs where the first one is less_than the second so stanford and berkeley goes away and we get berkeley stanford and this is our final query for what we wanted to do here now what i really wanted to show aside from some of the uses of relational_algebra is the fact that the rename_operator was for this query absolutely necessary we could not have done this query without the rename_operator now we've_seen all the operators of relational_algebra before we wrap_up the video i did want to mention that there are some other notations that can be used for relational_algebra expressions so far we've just been writing our expressions in a standard form with relation names and operators between those names and applying to those names but sometimes people prefer to write using a more linear notation of assignment statements and sometimes people like to write the expressions as trees so i'm just gonna briefly show a couple of examples of those and then we'll wrap_up so assignment statements are a way to break down relational_algebra expressions into their parts let's do the same query we just finished as a big expression which is the pairs of colleges that are on the same state we'll start_by writing two assignment statements that do the rename of the two_instances of the college relation so we'll start with c colon equals and we'll use a rename_operator and now we use the abbreviated form that just lists attribute names so we'll see say c one s e one of college and we'll similarly say that c gets the rename and we'll call it c se of college and remember we use the same s here so that we can do the natural_join so now we'll say that college pairs gets c natural_join c and then finally we'll do our selection condition so our final answer will be the selection where n is less_than n of cp and again this is equivalent to the expression that we saw on the earlier slide it's just a notation that sometimes people prefer to modularize their expressions the second alternate notation i'm going to show is expression trees and expression trees are actually commonly used in relational_algebra they allow you to visualize the structure of the expression a little_binary_digit better and as it turns_out when structured_query_language is compiled in database_systems it's often compiled into an expression tree that looks very much like what i'm gonna show you right now so for this example let's_suppose that we want to find the gpas of students_who are applying to computer_science in california so that's going to involve all three relations because we're looking_at the state is in california and we're looking_at the student gpa's and we're looking_at them applying to computer_science so what we're going to do is we're going to make a little tree notation here where we're going to first do the natural_join of these three relations so technically the expression i'm going to show you is going to stop down here it's not going to actually have the tables so the leaves of the expression are going to be the three relations college students and apply and in relational_algebra trees the leaves are always relation names and we're going to do the natural_join of those three which as a reminder enforces equality of the college name against the college name here against the college name here and the student_id here and the student_id here that enforcement means that we get triples that are talking_about a student applying to a particular college and then we're going to apply to that and so that's going to be written as a new note above this one in the tree the selection condition that says that the state equals california and the major equals computer_science and finally we'll put on top of that the projection that gets the gpa okay now actually this expression is exactly equivalent to if we wrote it linearly project the gpa select etc of the three college join student join apply i'm just abbreviating here that would be an equivalent expression but again people often like to use the tree notation because it does allow you to visualize the structure of the expression and it is used inside implementations of the structured_query_language language let_me finish up by summarizing relational_algebra let's start with the core constructs of the language so a relation name is a query in relational_algebra and then we use operators that combine relations and filter relations so we have the select operator that applies a condition to the result of an expression we have the project_operator that gives_us a set of attributes that we take from the result of an expression we have the expression one cross_product expression two and again those can be any expressions then we have expression one union expression two and we have expression one minus expression two and finally we have the rename_operator that takes an expression and renames the result of that the schema in the result of that expression now you probably noticed that i skipped a few of our favorite operators but this is the core of the language and all the other operators are actually abbreviations that don't increase the expressive_power of the language but they can be very useful performing queries and the abbreviations that we learned were expression one natural_join expression two they were expression one theta_join expression two and finally expression one intersect expression two all of those where we had a method of rewriting them using the core operators just a small aside about parentheses a parentheses are used in relational expressions for relational algebraic expressions for disambiguation similarly to arithmetic expressions i was a little cavalier about whether i included parentheses or not but as you write your relational_algebra expressions you will see that it's pretty straightforward to figure_out when disambiguation is needed so to conclude relational_algebra entirely it's a formal language it's based_on sets set operators and other operators that combine data from multiple relations it takes relations as input it produces relations as answers and it does form the formal foundation of implemented relational database_management this video provides an introduction to the structured_query_language query language structured_query_language like the relational_model has been around for decades and supports a many billion dollar market the first thing you might be wondering is how you pronounce it is it structured_query_language or is it sequel my friends in industry tell me that sequel is the in pronunciation so that's the one i'll be using now structured_query_language is supported by all major commercial database_systems it has been around a long time and it is a standardized language the standard started out relatively simple but over the decades it's really ballooned there are currently thousands of pages in the structured_query_language standard but the essence of the language which is what we'll be learning in these videos is still relatively simple we will be learning primarily the sql standard also known_as structured_query_language along with some constructs from the sql standard when structured_query_language is used it can be used in a database system interactively through a graphical user interface or a prompt so you type structured_query_language queries or commands and you get results back or structured_query_language can be embedded in programs so the most common use is to embed structured_query_language in programs but for the demos in our videos naturally we'll be submitting queries through a graphical user interface interface the last thing i wanted to mention about structured_query_language is that it is a declarative language that_means that in structured_query_language you'll write pretty_simple queries that say exactly what you want out of the database and the queries do not need to describe how to get the data out of the database the language is also based_on relational_algebra and i_hope you've watched the relational_algebra videos now the declarative nature of structured_query_language leads to the component of the database system called the query optimizer to be extremely important what the query optimizer does is it takes a query written in a structured_query_language language and it figures out the best way the fastest way to execute that on the database now let's talk briefly fully about some terminology and the commands that are in the structured_query_language language there's two parts of the language the data definition language or data definition language and the data manipulation or definitive media library the data definition language includes commands to create a table we saw that in a previous_video it also includes commands to drop table and to create and drop other aspects of databases that we'll be learning_about in later_videos such as indexes and views the data manipulation language is the language that's used to query and modify the database so in the structured_query_language language the data manipulation language includes for querying the database the select statement and then for modifying the database an insert statement a delete statement and an update statement there are many other commands in structured_query_language for indexes constraints views triggers transactions authorization all of which we'll be learning_about in later_videos for now let's just take a look in a little_more detail at the select statement which is really the bread and butter of the structured_query_language language and it's what we use to query the database so the select statement consists of three basic clauses there's the select clause the from clause and the where clause the best order to think of these actually is first the from clause then the where and then the select and just the basic_idea is that the from identifies the relations that you want to query over the condition is used to combine the relations and to filter the relations and finally the select tells you what to return now if you're familiar with relational_algebra this expression here this structured_query_language query is equivalent to the relational_algebra expression that you project the set of attributes a through an and then you select and by the way it's different from this select here in fact this selection corresponds to the where you select the condition on the cross_product of the relations that are listed in the from clause so that's the equivalent in relational_algebra and the last thing i wanted to mention is that as you know the relational query languages are compositional that_means when you run a query over relations you get a relation as a result so the result of this select statement is a relation it doesn't have a name but the schema of that relation is the set of attributes that are returned we'll learn much more about the select statement in future videos in conclusion the structured_query_language language is very prominent it's supported by all major commercial database_systems it's been standardized over time it can be used through programs it can be used interactively and it's a declarative high_level language whose foundations are based_on the relational_algebra this is the first of seven videos where we're going to learn the structured_query_language language the videos are largely going to be live demos of structured_query_language queries and updates running on an actual database the first video is going to focus_on the basics of the select statement as a reminder the select statement selects a set of attributes from a set of relations satisfying a particular condition we will see in the demo that even with the these three clauses we can write quite_powerful queries all of the seven demos are going to be using the simple_college_admissions database that we learned about in the relational_algebra videos as a reminder we have three relations we have the college relation college relation contains information_about the name of the colleges the state and the enrollment of those colleges we have the student relation which contains student ids their names their gpa and the size of the high_school that they come from and finally the application information that tells_us that a particular student applied to a particular college for a particular major and there was a decision of that application now as a reminder in the relational_model when we underline attributes that means we're designating a key for the relation so the underlying attributes in our example say that the knowledge name is going to be unique within the college relation the student's idea is unique within the student relation and in the applied relation the combination of these three attributes is unique that_means that student can if he or she wishes apply to a college many_times or apply for a major many_times but can only apply to a college for a particular major once let's turn to the demo let's start_by looking_at the actual data that we're going to be querying over we have a set of four colleges stanford berkeley massachusetts_institute of technology and cornell we have a bunch of students and a reminder each student has an id a name a gpa and a size of high_school and finally we have a set of application records where a student with a particular id applies to a college for a particular major and there's a yes or no decision on that application so let's go to our first structured_query_language query this query is going to find the id name and gpa of students_whose gpa is greater_than so very_simple it's the basic select from where structure the select gives our table name the where gives our filtering condition and the select tells_us what we want to get out of the query we'll execute that query and we will find here all of our students with a gpa greater_than now it's not necessary to include the gpa in the result to the query even if we filter on the gpa so i could just take gpa away from the select clause run the query again and now we see the same result but without the gpa okay let's go to our second query our second query is going to combine two relations in this query we're going to find the names of the students and the majors for which they've_applied so now we're involving both the student table and the apply table and the condition we see here is the join condition that tells_us we want to combine students with apply records that have the same student_id this is what would happen automatically in a natural_join of the relational_algebra but in structured_query_language we need to always write the join condition explicitly and finally we get the student name and the major and if we execute the query we get expectedly a bunch of students and the majors that they've_applied for now we do notice here that we have several duplicate values we have two_copies of amy applying to computer_science and two_copies of craig applying to bio engineering as we discussed in the relational_algebra video in relational_algebra which underlies structured_query_language it's by default the set model we don't have duplicates but in the structured_query_language language we do have duplicates it's based_on a multi set model if we don't like the duplicates in our results structured_query_language provides us a convenient way to get_rid of them we simply add the keyword distinct to our query after the word select we execute and now we get the same result but with the duplicate values eliminated our_next query is going to be a little_more complicated it's going to find the names and gpas of students_whose size_high_school is less_than a thousand they've_applied to computer_science at stanford and we're going to get the decision associated_with that so again we have two relations two tables involved the student and the apply we have the join condition making sure we're talking_about the same student and the student and apply tuples very important to remember that one we are going to filter the result based_on size_high_school major and the college to which they're_applying so let's run this query and we will see the result that we have two students_who have applied to computer_science at stanford from a small high_school our_next query is again a join of two relations this time we're going to find all large campuses that have someone applying to that campus in computer_science so this time we're going to join the college table and the apply table and again we need to be careful to make_sure we only join tuples that are talking_about the same college so we have college cname equals apply cname we have an enrollment that's greater_than and a major that equals computer_science let's run this query oops we got an_error well actually i knew that was coming but i wanted to show you what_happens here so the error is that we have an ambiguous column name and that's the one right here the c name so i haven't pointed it out explicitly but whenever i've referred to attributes where there's an attribute from both of the relations we're querying i prefaced it with the name of the relation that we cared about the college here in the apply so the attribute name here in the select_clause is actually ambiguous because there's a c name attribute in college and there's one there in apply now we happen to set those equal but in order for the query to actually run we have to choose so let's just say we're going to take that c name from college now everything should be fine and here we go so those are the colleges where we have at_least one computer_science major and their enrollment is greater_than again we see duplicates so if we don't like the two_copies of berkeley we simply add distinct and we run the query again and now we have berkeley and cornell now let's do a query with a bigger result this time we're finally going to join all three of our relations student college and apply and we're going to apply the joint conditions that ensure that we're talking_about the same student and the same college and then from the result of that big cross_product that big join we're going to get the student_id their name their gpa the college that they're_applying to and the enrollment of that college so just a whole_bunch of information associated_with this students' applications and we execute this and here we get the result with all the attributes that we asked for now one thing i haven't mentioned yet is the order of the results that we get when we run structured_query_language queries so structured_query_language is at its heart an unordered model that_means that we can get the results of our queries in any order and in fact we could run a query today and get our results in a particular order and then run the query tomorrow and get a different order and that's permitted with the specification of structured_query_language on relational_databases if we care about the order of our result structured_query_language provides a clause that we can ask for a result to be sorted by a particular attribute or set of attributes so let's say we want our application information here sorted by descending gpa then we add another clause called the order by clause we tell the attribute we'd_like to be ordering by and then if we want it to be descending we write desc the default behavior is actually ascending so if we run this query now we get our results by descending the gpa we see all the 's and so_forth now we might still want to further sort within all the s if we want to do that we can specify another attribute to sort each group_by so for example if we decide from that we want to sort by enrollment and ascending we won't put anything because ascending is the default and we execute now we still have gpa as descending as our primary sort order and then within each of those will be sorting by ascending enrollment this query introduces the like predicate like is a built in operator in structured_query_language that allows_us to do simple string matching on attribute values let's_suppose for example that we wanted to find all students_who were applying for a major that had to do with bio instead of listing all the biology majors we can simply pattern match the major against the special string here which says match any major where there's some set of characters followed_by bio followed_by some set of characters we execute the query and we'll find the students_who have applied for various bio type majors now i want to introduce another construct i'm going to use the same query to do it which is the construct select star so far we've always listed explicitly the attributes that we want to get in the result of a query but if we simply want to get all attributes then we can just write select star and when we do that we don't project away any attributes but we get all the attributes in the result of the from and where expression while we're at it let's do a gigantic query we'll just do the cross_product and student college without any combination and we'll do select star to get all the attributes out so here goes and you can see we get all the attributes and we get a whole lot of tuples as_well our last query is going to demonstrate the ability to use arithmetic within structured_query_language clauses so we see here a query that selects all the information from the student relation but adds to it a scaled gpa where we're going to boost the student's gpa if they're from a big high_school and reduce it if they're from a small one specifically we'll take their gpa multiply it by the size_high_school divided by a thousand so let's run this query and you can see that we have the whole student table here with an additional column that has scaled their gpa based_on the size of their high_school now if we don't like the label on this column we could change it and so i'll use this query as an example to demonstrate the 'as' feature which allows_us to change the labeling of the schema in a query result let's say as scaled gpa and we should get the same result with a more nicely labeled attribute that_concludes our video introducing the basic select statement we'll see many other features in the upcoming six videos on structured_query_language in this demo we'll be learning some more features of the structured_query_language language specifically we'll be learning_about table variables and about set operators we already learned the basic select statement which can be quite_powerful for writing queries but we'll learn some constructs in these demos that will give_us even more expressive_power the first construct is table variables table variables are in the from clause and they actually serve two uses one is simply to make queries more readable as we'll see but a second purpose is to rename relations that are used in the from clause particularly when we have two_instances of the same relation this is exactly what we needed in the relational_algebra when we wrote joins that included two_instances of the same relation the second construct we'll be learning actually a set of constructs in this video are the set operators and we'll be learning the same three set operators we had in relational_algebra the union_operator the intersect_operator and the except operator which is the minus operator we'll be doing a demo and the demo will use the same college_admissions_database that we've been using in previous demos where we have tables about college information student information and students_applying to colleges let's move to the demo let's start with a big join query that we'll use to introduce table variables this query involves all three relations it joins the three relations on their shared attributes and then it selects a bunch of information so here we see the result of that query so the main point of this query is not the result but just to show you how table variables are used in the from clause we can add two each of our relation names a variable we'll use s for student and c for college and a for apply and then everywhere else in the query instead of writing the full relation name we can just use the variable in this case we're not changing the expressiveness we're not changing the outcome of the query we're really just making it a binary_digit more readable and we can do the same thing here in this left clause we'll take s and a and so on then we'll run the query and we'll get exactly the same result no change now let's look_at where table variables are actually useful what we want to get in this query is all pairs of students_who have the same gpa this is kind of similar to the relational_algebra query we did where we found all pairs of colleges that are in the same state in order to do that we need to have two_instances of the student relation so we'll call one instance s and we'll call the other instance s and the from will do the cross_product of those two so it will consider every every possible pair of students from the student relation from all those pairs we'll take the pairs where the student had the same gpa and will return the id name and gpa for each of the two students so let's go_ahead and execute the query and here we can see the result now this result is exactly what we wrote it literally is every pair of students that have the same gpa but it might not be what we intended amy and amy the same student well amy has the same gpa as herself but more likely we just wanted different students_who had the same gpa so to do that we'll add an and that says these are two different students the sids of the students are different now let's run the query and see what_happens now we see that we no_longer have amy and amy and every student is paired with a different student we do have two amy's here but don't be alarmed this amy is and this amy is so things are looking quite a binary_digit better but there's still one thing that we might not want in the result of the query which is that we have amy paired with doris and then we have doris paired with amy so we're actually getting every pair of students twice in the two different orders as it turns_out that's very easy to fix we only need to erase one character to make that work maybe you can think_about what that character is here it is instead of looking_at not equals we'll just make it less_than and then we'll get every pair of students only once because we'll always be listing the one with the smaller sid first and finally we get the answer that we probably intended in the first place now let's take a look_at the set operators and we'll start with union just like in our relational_algebra video let's use the union_operator to generate a list that includes names of colleges together with names of students so here's the query that will do it for us and we go_ahead and execute the query and we see our result now i left the schema as having the c name in the first part of the union and the s name in the second structured_query_language allowed me to do that and it chose to use the c name to label the result if i want to unify the schemas of the two sides of the union and give a new label for the result i use the as as we saw earlier for re naming attributes in the result of queries so i'll add as name to both_sides of the union run the query and now i see name in the result now one thing you might have noticed is that this result is actually sorted we didn't ask for it to be sorted but for some reason the system sorted it for us and i can actually explain why that happened i'll also mention that if i ran this same query on another system it might not come out sorted in fact it will not come out sorted because i tried it here's the deal the union_operator in structured_query_language by default eliminates duplicates in its results so if we have two amy's which in fact we do we only get one amy in our result and similarly for craig we have two of those as_well so that's the default and it so happens the system i'm using today which is called sqlite eliminates duplicates gets by sorting the result so it sorts the result looks for adjacent pairs that are the same and eliminates all but one of those and then it gives_us the answer but again i want to emphasize that's not something one can count on when one runs the same query on a different system or even on the same system on a different day now if we want to have the duplicates in our result that's something we can do quite easily we add to union the word all that will turn the set operator into what's technically a multi set operator that retains duplicates we run the query well the first thing we notice is it's not sorted anymore that's because it didn't need to eliminate the duplicates but if we look closely we'll also see that the duplicates are now there we have two amys for example and we have two craigs as_well if we want this result to be sorted and to guarantee that the other one's sorted we would add an order by clause so we can just say order by name we run the query and now we have the result in sorted order our_next query demonstrates the intersect_operator this query is going to get the ids of all students_who have applied to both computer_science for a major and ee for a major so very_simple query we get the ids of students_who applied to computer_science the ids of students_who applied to ee and then we perform the intersect_operator on the result of those two queries we execute it and we find that there are indeed two students_who applied to computer_science and ee some database_systems don't support the intersect_operator they don't lose any expressive_power we just have to write our queries in different_ways so this next query is computing exactly the same thing the sids of students_who have applied to both computer_science and ee but this time we're doing it by doing two_instances of the apply relation one of these self joins so we have to use table variables again so we take every pair of apply tuples we look_at cases where it's the same student and in one case they're_applying for computer_science in the other case they're_applying for ee and we'll return the sid of those students so we run the query and we get sort of the same answer but not exactly because we have a whole_bunch of duplicates now that we didn't get when we did it with an intersect_operator now where did those duplicates come from let's take a look_at the apply relation itself here we see that student applied to that there are indeed two students_who applied to computer_science and ee some database_systems don't support the intersect_operator they don't lose any expressive_power we just have to write our queries in different_ways so this next query is computing exactly the same thing the sids of students_who have applied to both computer_science and ee but this time we're doing it by doing two_instances of the apply relation one of these self joins so we have to use table variables again so we take every pair of apply tuples we look_at cases where it's the same student and in one case they're_applying for computer_science in the other case they're_applying for ee and we'll return the sid of those students so we run the query and we get sort of the same answer but not exactly because we have a whole_bunch of duplicates now that we didn't get when we did it with an intersect_operator now where did those duplicates come from let's take a look_at the apply relation itself here we see that student applied to computer_science and to ee and to computer_science again and to ee again and we're gonna get all pairs of tuples where one pair pair of the tuples is computer_science and the other is ee so we'll get computer_science with ee computer_science with ee and so on going back to our query result here it is we can see that we got the four 's when we ran the query well that's easy to get_rid of we just write select distinct and that will get_rid of duplicates and now we're back to our original query result now instead of finding students_who applied to both computer_science and ee let's find students_who applied to computer_science but did not apply to ee for that we need the difference_operator it's called difference in relational algebra sometimes it's called minus the word that's used in the structured_query_language standard is the word except so here's our query we find the student ids who applied to computer_science and then we take away from those the ids of students_who applied to ee we run the query and we find that there are three students_who applied to computer_science and not to ee some database_systems don't support the except operator either and here things get a little tricky so let's try to rewrite that query without using the except operator so as a reminder we want to find students_who applied to computer_science but did not apply to ee so here's my attempt at writing that query i again do a self join of apply with apply and i find all pairs where it's the same student we're talking_about and the major in one of the tuples of computer_science and the major in the other one is not ee well it looks pretty good let's see what_happens whoa we got a lot of results okay well that's probably just that problem with duplicates again so let's just add distinct and go for it it still seems like a lot of results let's go_back to our previous query that uses except and then we found that there were three students in the result where here we're still getting five in the result well if we think_about exactly what we wrote what we wrote is finding all pairs of apply records where it's the same student and they applied to computer_science in one of the pairs and they didn't apply to ee in the other so it could be for example biology or geology but the problem is that when we consider these pairs that doesn't mean there's not another pair with the same student where they applied to computer_science and ee all this is actually finding is students_who applied to computer_science and also applied to another major that's not ee so that's quite different from the query we're shooting for and actually the interesting thing is that with the constructs we've_seen so far in structured_query_language it's not possible to write the query we had earlier without using the except operator but in later_videos we will see additional constructs in structured_query_language that do allow_us to write that query this structured_query_language video which as usual will consist mostly of running live queries introduces sub queries in the where clause as_usual we start with our basic select from where expression and we're going to add to it now the ability in the condition part of the select from where expression to include sub queries sub queries are nested select statements within the condition and we'll see they're actually quite_powerful as_usual we'll be using a sample demonstration database that consists of colleges students and students_applying to colleges as always we'll have our four colleges a bunch of students and a bunch of records that show students_applying to colleges so let's launch right into our first query that shows a sub query in the where clause what this query finds is the id's and names of all students_who have applied to major in computer_science to some college so here's the sub query in the where clause this expression right here in the where clause finds the id's of all students_who have applied to major in computer_science so now we have that set of id's our outer query says let's take from the students those students_whose id is in that set and let's select their id and their name so we go_ahead and execute the query and we find out that five students have applied to major in computer_science now we actually can do this query without a sub query in the where clause so let's take a look we can do it instead by joining the student relation with the apply relation so here we do what we learned in previous_videos we take student and apply we write the joined condition to make_sure we're talking_about the same student we make_sure they're majoring in computer_science and we get their id and their name let's run the query whoops an_error i knew that was coming this is just to remind_you about disambiguating attributes the id here in the select_clause could have come from student or apply and even_though the value is equal we do have to disambiguate by putting one of those so let's put student dot sid and let's run the query okay now we see we got more students back than we got back when we ran the query using the sub query let's go_back and look we got five results here and we got several more here but the additional results are actually duplicate values so we have two_copies for example of amy the reason for that is that amy actually applied to major in computer_science at multiple colleges so if we go_back and we look_at the apply data we'll see that amy who is applied to major in computer_science at stanford as_well as berkeley let's hope she selects stanford in any case that's why we got amy twice in the join because she applied twice back here where we used the sub query we were just looking_at students and whether their id was in the set okay so when we do the join we get basically the same answer but we have some duplicate values of_course we can fix that by adding distinct we run the query and now we have the same result that we got when we used the sub query let's look_at some other similar queries and let's focus again on the duplicates issue because it gets a little tricky as we'll see this query is very similar to the previous one finding students_who are applying to major in computer_science but this time we're only getting the names of the students and not their id's so we run the query and we find our same five students just want to mention that these two craigs are two different craigs if we go_back to our original result there's three four five craig and five four three craig so coming back here we find the names of the students_who majored in computer_science now similarly to what we did previously let's write this query using a join instead of using the sub query in the where clause so here's the join we're joining student and apply on the student's id majoring in computer_science as always the only difference is that we're just selecting the name we run the query and we get again many more results than we got previously because we get two_copies when a student has applied to to major in computer_science at two different places and just as we did before we can add distinct to get_rid of the duplicates well something different happened this time this time when we get_rid of the duplicates we only have four results where previously we had five and the reason is that previously we included the student_id in the result and so the two_instances of craig were two different craigs and didn't cause duplicates to be eliminated we can see that back here craig and craig but in this result because we only kept the names the two_copies of craig turned into one result now we might_wonder_why do we care about duplicates so much let's see an example where duplicates really do matter quite a binary_digit we're going to do exactly the same query again finding students_who have applied to major in computer_science but now we're not retrieving the ids or names we're retrieving the gpas of those students presumably what we're interested in doing is some analysis of the gpa's of students_who choose to apply for computer_science so let's run the query as always we get our five results and here's the gpa's of the five students_who have applied to major in computer_science once again this will be the last time i promise we'll do this query using a join instead of the sub query so here we go we've got student and apply join on sid majoring in computer_science and returning the gpa once again because we have students_who applied multiple_times for computer_science we're getting more_than our five results so we get a rather large number of results here and again we have duplicates so here's where the problem comes in if we use this result to compute the average_gpa we'll be counting some students multiple_times and presumably that's not what we want to do presumably we want to count each student who's applied to computer_science once in the computation of say the average_gpa that worked in the previous query when we got the five results for the five students_who applied to computer_science when we do the join we get too many results but this time again we're going to have a problem when we do select distinct because some of these students have the same gpa and now we only have four gpas instead of the five that we should have and if we compute the average_gpa now then we're not factoring in one of the student's gpas so in this case neither the version with distinct nor the version without distinct gives_us the right number of gpas neither of those will give_us the correct average the only way to get the correct number of duplicates is to use the version of the query that has the sub query in the where clause now let's move to some different examples that also use subqueries in the where clause you_might remember from the previous_video when we were learning the difference_operator that we had a query that we could write using the difference_operator which in structured_query_language is called accept but we were unable to write that query without the difference_operator and the query we were trying to write is to find students_who have applied to major in computer_science but have not applied to major in ee now that we have sub queries in the where clause we can write that query without using the except operator and here it is the query looks for students where their id is among the set of id's of students_who have applied to computer_science but their id is not among the set of id's of students_who are applying to major in ee so let's run the query and we discover that there are three students_who have applied to major in computer_science but not applied_anywhere in ee by the way let_me just show you a slightly different way to write exactly the same query you can see that we use this key word combination not in to specify that the idea is not in this set we can actually write it by writing the sid is in the set and then applying a not to that result we'll execute and we'll get exactly the same result it's fairly common in structured_query_language for there to be multiple ways to write the same query and we'll see more examples of that later in this video so far our examples of sub queries have used in and not in for testing membership in the sets that are produced by sub queries our_next examples are going to show that we can apply the exists operator to sub queries just to test whether they're empty or not empty here's the query this query uses exists to check_whether a subquery is empty or not empty rather_than checking whether values are in the subquery the other new construct that's begin to introduce here's what's_known_as a correlated reference but inside the subquery we're going to refer to a value c that comes from outside the subquery so let's talk_about exactly how this query works first let_me tell you what the query is trying to return the query is going to find all colleges such that there's some other college that is in the same state okay so in our example just a reminder we have stanford berkeley massachusetts_institute of technology and cornell so the two colleges we should get back are stanford and berkeley because in each case there's another college in the same state so how does this query work it says we're gonna to take the colleges and for each college we're going to check_whether their exists another college and we're going to call that one c where the state of c is the same as the state of c this is sort of similar to what we saw when were doing self joins with table variables but now the variables are appearing in the outer query and the inner query okay so let's run the query and we see that we get the wrong answer that was again intentional well here's the problem when we were in this query c and c could be bound to the same college so every college is in the same state as another college of the other college could be the same college what we need to do is add inside the sub query a further condition that says that c and c are different colleges specifically c cname is not equal to c cname let's run the query and now we get the correct answer now let's look_at some other uses of the exists construct and sub query if you happen to already know structured_query_language a little_binary_digit and someone asks you to write a query where you were going going to get a largest value of some type the first thing you would think of is probably using the max operator but we don't know max yet we'll be learning that later_videos and as it happens a number of queries that are effectively computing a max can be written using sub queries and here's our first example this example is finding the college that has the largest enrollment and we're going to do that with the sub query and with the not exists operator specifically we're going to find all colleges where there does not exist another college whose enrollment is higher than the first college so let's go_ahead and run the query and not surprisingly we get berkeley as a result so this is a form of query that we can write any time we're looking for something that's the largest or the smallest let's for example look for the student with the highest_gpa so we'll change it to the student name and we'll be looking instead of colleges at students otherwise this form of this query is going to stay very similar we're going to look for students here as_well and finally we're going to have gpa instead of enrollment so the way this query works is it says i want to find all students such that there does not exist another student who's gpa is higher we run the query and we get four results seems odd actually it's that odd let's just add the gpa to our query and we'll see exactly what_happened we can see that these four students all have a gpa of so they're all tied for having the highest_gpa and very specifically it faithfully runs the query that there does not exist another student whose_gpa is higher than these students now let's see if we can write this same query without using a sub query so as usual if we want to write a query without a sub query we'll need to do some type of joint so we're looking for students with the highest gpas so we need to join two_instances of the student relation as we've done here and then we'll apply a condition that the gpa of the first one is greater_than the gpa of the second one we run the query wow we got a lot of answers there maybe our problem is just one of duplicates so first thing we do when it looks too big we add select distinct nope that doesn't solve the problem either actually this query is fundamentally wrong and we cannot write the query that finds the student with the highest_gpa just by using joins what this query actually does is it finds all students such that there is some other student whose_gpa is lower in_other_words it's finding all students except those who have the lowest gpa now let's see another new construct we can use with sub queries in the where clause and we'll continue with the same query of finding the student with the highest_gpa this query uses the all keyword what all tells_us is that instead of checking whether a value is either in or not in the result of a sub query we're going to check_whether the value has a certain relationship with all the results of the sub query and here in this case we're checking to see if the gpa is greater_than or equal to all elements of the sub query that returns the gpa's of all students if the student's gpa is indeed greater_than or equal to all gpa's then the student has the highest_gpa in the database we'll run the query and we'll get the same four students with the gpa now let's try writing this in a slightly different fashion just for fun to illustrate some concepts once again we're going to try to find the students_whose gpa is highest in the database here's how we're going to do it this time instead of using greater_than or equal to all we're going to use greater_than all so we're going to find all students where their gpa is higher than every other student by saying gpa is greater_than all gpa's of students in the database who are not the student we're looking_at by saying that the id's are not equal let's run the query well we got an empty result let's think_about it for a second that is actually the correct result to the query the query itself was incorrect the query is looking for all students where nobody else has the same gpa as that student everybody else's gpa is lower well remember we had four students with a gpa so none of those students are going to satisfy the query and nor will any other student so this is an incorrect formulation of the query that we wanted now this query would be correct if we knew that every student had the same gp i'm_sorry this query would be correct if we knew that every student's gpa was unique because there would be then one student who had the highest_gpa so let's modify the query to instead look for the colleges that have the highest enrollment because it turns_out in our database every college has a unique enrollment so we'll change it to getting the c name of college instead of student and we'll want the enrollment to be greater_than all other enrollments so we'll enrollment college almost done here grab a cup of coffee if you want i just have to make this be c name and this one be c name and we're all set so what are we asking for here we're asking for all colleges whose enrollment is greater_than all of the enrollments of colleges that are different than the one we're looking_at we run the query and we get berkeley as a result which is exactly what we'd expect so far we've_seen the keyword all for checking whether a value has relationship with all of the results of a sub query there's also a key word any that is a companion but instead of having to satisfy a condition with all of the elements of a set any says you must satisfy the condition with at_least one element of the set so what we're going to do now is going to do the same query but we're gonna write it a little differently let_me just type it in and then explain here what we're going to say is get me all colleges where it's not the case that the enrollment is less_than or equal to any other college okay so in other_words there's_no other colleges have bigger enrollment just think_about it for a second this is if you happen to know predicate logic this is an equivalence where when you say for all it's equivalent to not exists not in any case if you didn't follow that don't let that bother you let's run the query and we see we again get the result berkeley so again all tests a condition against every element in the result of a sub query and the condition is true if it's satisfied with every element whereas any is true if the condition is satisfied with one or more elements of the sub query let's use any for another query this query finds all students_who are not from the smallest high_school in the database so what we are looking for here is all students where the size of their high_school is greater_than any high_school_size in_other_words a student is going to be returned if there's some other student whose size_high_school is smaller than this student we run the query and there's the result and you can verify if you look back at the data but there is in fact a few there are students_who are from high_schools that have students so here we have in our result every student that comes from a high_school bigger than that some systems notably at the current time sqlite do not support the any and the all operators we do not lose expressive_power we just have to write those queries a little differently typically using exist or not exists so let's look_at the same query written without using any here's what we do we look for students where there_exists some other student okay whose high_school is smaller than the student we returned so this is going to give_us exactly the same result and we will see we will get the same set of students no students from a high_school with two hundred but we get all the rest of the students without using any or all and just to emphasize any or all are very convenient for writing queries but they aren't necessary it turns_out we can always write a query that would use any or all by using the exists operator or not exists instead as a grand finale query let's revisit the query that finds students_who have applied to major computer_science and have not applied to major in ee and now we're going to write that query using the any operator two_instances of it now let's go_back and look when we wrote the query using in and not in and we see that there are three results helen irene and craig and now let's look_at our query using any and not equal to any so we find students where their sid is in the set of sid's of students_who have applied to major in computer_science and their sid is not equal to any of the students_who have applied to major in ee and let's run the query well we got the wrong answer and that was once again intentional let's look very closely at what this query asks for this query asks for students students where their id is in the set of id's that applied to computer_science that's all fine and good but this is where things got tricky what we're saying here is that we want the condition to check_whether there's any element in the set of ee's that are not equal to this sid so in fact this second condition is satisfied as long as there's anybody who applied to ee that's not equal to the student we're looking_at and that of course is commonly the case so we made a mistake here and it's actually quite tricky to use the any and all operators and always get the right answer it's especially tricky when you can't just eyeball the answer and check but the correct formulation that we want here is that it's not the case that the sid is equal to any member of the set in_other_words for each member of the set of the ee application that value is not equal to the sid of the student we're going to retrieve and now we run the query and we get the right answer the next set of queries will show introduced the concept of the aggregation in structured_query_language once again we start with the basic select from where construct and this time we're going to introduce what are known_as aggregate or aggregation functions these are function that will appear in the select_clause initially and what they do is they perform computations over sets of values in multiple rows of our relations and the basic aggregation functions supported by every structured_query_language system are minimum maximum some average and count now once we've introduced the aggregation functions we can also add two new clasues to the structured_query_language select from where statement the group_by and having clause the group_by allows_us to partition our relations into groups and then will compute aggregated aggregate functions over each group independently the having condition allows_us to test filters on the results of aggregate values the where condition applies to single rows at a time the having condition will apply to the groups that we generate from the group_by clause all of these constructs will become very clear when we show some examples as_usual our examples we use are simple_college_admissions database that has a table of colleges a table of students and information_about students_applying to colleges as_usual we have four colleges a bunch of students and applications of students to colleges for specific majors our first aggregation query is a very_simple one computes the average_gpa of the students in the database here is the query but just to explain the query let_me first replace the aggregation with star when we run select star from students we get our result here specifically when we look_at the gpa column what the aggregation is going to do is perform a computation over all values in the column and then produce just one tuple in the results that has that value so we'll write average_gpa we'll run the query and we see now the average_gpa in the database our second querie is a binary_digit more_complicated it involves a join what it finds is the minimum gpa of students_who have applied for a computer_science major so we do the join of student and apply on student_id filter for major equal computer_science once again let_me just remove the aggregation first so we can see the result without aggregation here we see all of the information_about students who've applied to a computer_science major the aggregation is going to look_at the gpa column and it's going to take the lowest value in that column so we write min gpa run the query and we discover that the lowest gpa is three point four now let's go_back to the average aggregate function again so let's compute the average_gpa of the students_who have applied to computer_science run the query and we see the result is about three point seven in fact this result is probably not precisely what we were looking for in a previous_video we talked in some detail about this particular form of query versus using a sub query to find the gpa of students_who have applied to computer_science the issue with this particular query and let's go_back to select star version is that if a student applied to computer_science multiple_times for example student amy applied to both stanford and berkeley then when we compute their average_gpa we're going to be counting their gpa twice presumaly what we actually want is to count the gpa once for each student who applied to computer_science no matter how_many times they applied so in order to do that we use the sub query form where we select from student and then we just check for each student whether their id is among those who apply to computer_science so let's just do a binary_digit of editing here from apply where major equals computer_science i'm not a very good typist let's just first take the sub query form and we see that we made a mistake here and it says that we forgot a word here which is in apologize for that okay now we have the students_who applied to computer_science and in this case we only have one instance of each student so now if we run the aggregation when we compute the average_gpa we'll correctly count students gpa only one time so remember with three point seven approximately before now we run the query and we see that the correct result is three point six eight not that different but this one is the numerically correct result so far we've_seen the average and min aggregate functions this query shows the count function so not surprisingly the count function just returns the number of tuples in the result so this particular query finds the number of colleges in our database whose enrollment is greater_than fifteen thousand just for it to be thorough let's run the query without the aggregate function and we see that there are two of them and the aggregate function simply counts those number of tuples we run the query and the result is two as expected let's do another count query that looks very similar in this case we are counting the number of students_who have applied to cornell so the query looks the same will run the query and we discover that six students have applied to cornell well in reality what we've actually counted in the number of applications to cornell not the number of students_who have applied to cornell if a student applied three times then we're counting them three times in this result so in some sense this is similar the previous one we saw we were over counting and we could try to fix it with the sub query and the in and so_forth but actually structured_query_language provides a very nice way for us to perform the query that we want in the count function we can put a special keyword distinct and then the name of one or more attributes and in this case what the count will do is will look_at the result and then it will count the distinct values for the particular attribute so we run the query and we are find that there are three distinct student ids if we ran it without just like this when we see we would look and again we would find that there are three distinct student ids so count distinct actually turnes out to be a very useful feature in structured_query_language here's a rather complicated looking query and i have to admit it computes something fairly obscure but it does demonstrate some features what this query computes is it gives_us back all students where the number of other students_who have the same gpa as the student is equal to the number of other student that have the same high_school_size at the student again i admit it's a little_binary_digit of obscure but let's take a look_at how it works so it looks at the student relation and for each student it counts the number of other students that's by testing that the id is different that have the same gpa it also counts the number of other students that have the same size_high_school and if those two values and the sub queries both produce a single value which is why would contest equality if those two values are the same then the student comes out in the result let's run the query we get our answer i'll leave it to you to verify by looking_at the data that this is indeed the correct result here's another complicated looking query although this one computes something quite a binary_digit more intuitive what this query computes is the amount by which the average_gpa of students_who apply to computer_science exceeds the average_gpa of students_who don't apply to computer_science and we are going to assume it does in fact exceed so we are using in this example sub queries in the from clause which i_hope you remember from the previous_video a sub query in the from clause allows you to write a select from where expression and then use the result of that expression as if it were an actual table in the database so we are going to compute two sub queries in the from clause one of them which is the average_gpa of computer_science applicants and one the average_gpa of non computer_science applicants let's look a little closer here so this query here says let's find the students_who have applied to major in computer_science let's compute their average_gpa and we'll call it average_gpa we'll take the whole result and we'll name it computer_science similarly the second new relation that were computing in the from clause computes the average_gpa of students_who did not apply to computer_science so their student_id is not in the set of students_who applied to computer_science we'll call that one non computer_science so now with this from clause we have a relation called computer_science with an attribute called average_gpa and a relation called non computer_science with an attribute called average_gpa and in the select_clause we'll simply do the subtraction of the non computer_science gpa from the computer_science gpa we run the query and we discover that the computer_science applicants exceed on average the non computer_science by point one nine now just for demonstration purposes let_me show that we can write the same query but using sub queries and the select_clause you_might remember from the previous_video that in a select_clause we can write a sub query as long as it returns a single value we're going to go even further we're going to write two sub queries that return single values and subtract them so i'm going to replace this from with select i'm going to take up this whole first line here and then i'm going to let's see what else do i need to do i'm going to take out the as here and i'm going to replace it with a minus i'm going to take out the as here so now what we've_got is we've_got the average_gpa of computer_science student in the select_clause producing a value the average_gpa of non computer_science students we perform the subtraction as part of the select_clause the last thing we need is something in the from clause so we'll say from student will call the result of this subtraction d as in for difference we run the query and we get almost the same result except for a bunch of duplicates the reason for the duplicates is that we compute this result once for each tuple in student we can add distinct and now we get the single result now let's learn_about the group_by clause which is only used in conjunction with aggregation our first query is going to find the number of applicants to each college and it's going to do so by using grouping effectively what grouping does is it takes a relation and it partitions it by values of a given attribute or set of attributes specifically in this query we're taking the apply relation and we're breaking into groups where each group has one of the college names so it'll be the stanford group the berkeley group and so_forth and then for each group we will return one tuple in the result containing the college name for that group and the number of tuples in the group so to illustrate what's happening with grouping very clearly let_me start_by replacing the select_clause with uh select star removing the aggregation and doing an order by on the college name so that illustrates the groups that we're going to be using in in the actual query so we see there are three tuples for berkeley there six tuples for cornell and so_forth within each group then for the particular query we're doing we're simply going to count the number of tuples so going back to the group_by form we return the college name and we return the count of a number of tuples now before i actually run the query one thing to notice is what it makes_sense to put in that select_clause here we're grouping by the college name so the college name is going to be the same for all of the tuples of the group so it's sensible to include that but it wouldn't really be sensible to include when the other attributes that differs although we'll see an example later where we include that and interesting things happen for now we'll just put the name of the grouping attribute and then we can perform aggregation over that in this case count we run the query and we see that there are three applicants to berkeley six to cornell and so_forth here's a very similar query just as a second example and this example we're finding the total enrollment of college students for each state now we only happen to have three states and four colleges in our database but what this query does is it takes the college relation it breaks it up into partitions by state and then within each partition or group it will return the state for that partition and the sum of the enrollment we run the query and we see the expected result here is a more_complicated group_by query in this case we're grouping by two attributes we also have a join involved and we're going to compute two aggregate functions in our result what this query computes is for each college and major combination the minimum and maximum gpas for the students who've applied to that college as_usual before we do the aggregation let's replace the query with one where we can see the groups explicitly so i'll put gpa here and instead of grouping i'll order by and we run the query and we see for berkeley biology we actually only have one applicant for berkeley computer_science we have two i think stanford computer_science has the largest number of applicants at three so once we put the aggregation back each of these combinations of college and major is going to be considered individually and for each one will compete the minimum and maximum gpa so let's go_ahead and do that all those parentheses ok change this to group_by run the query and here we see for berkeley biology the minimum and maximum are the same because we saw that there was only one uh student uh who applied to berkeley biology stanford computer_science we had three we can see the spread of their gpa's and so_forth for each college major combination now what if we were interested in finding information_about the spread of gpas for each college and major uh what the differences between the minimum and the maximum so let's_suppose in fact what we wanted to find was largest spread but let's take that in steps i'm going to take this current query here and i'm just gonna slap it into the from clause so now in the from clause i'm going to have a relation we'll call it m that's going to have the college major combinations and the minimum and maximum gpa this m is going to now have the result that we see below now once we have that result to work with in the select_clause we can access the attributes here let_me call this one mn and this one mx and if we write just mx minus mn here what we're going to get is a list of the spreads of the min and max gpa for each collage and major so we see many of them are zero those are all of the combination that had just one student but in some cases we actually have a spread but what we want to find it is the largest spread watch this it's very cute we just simply put a max function right here run the query and we find that the largest spread between min and max is approximately one our_next sequence of queries introduces some subtleties of the group_by clause what our query finds is the number of colleges that have been applied for the number of colleges that have been applied to by each student so the query join student and apply it groups the result for the student in the student_id and then for each student_id finds the number of distinct colleges in that group so once again just to illustrate let's take away the aggregation let's replace the group_by by an order by just so we can see the data that we're working on and run the query and we see that student one two three has four applications to stanford berkeley and cornell three distinct colleges two three four has one and so_forth so now let's return to our original query group_by student we'll count the distinct college names run the query and we get the expected answer student one two three applied to three distinct colleges two three four to one and so_forth maybe we'd_like to have the student's name in the result as_well that's easy to do we just add the student name to the select_clause and we run query and now we've added amy is one two three bob is two three four and so_forth that worked out fine in this case but we're gonna see in a moment where simply adding an attributes to the select_clause in the case of a group_by does something a little strange in fact the only reason that it worked nicely in this case is that when we group buy the student_id within each group we have the same student name let's see that let's just take a look_at that again we'll replace the group_by with an order by we're sorting by student_id and we see for the first group which is one two three we have all amys for the three four five group we have all craigs and so on so when we put student name in the select_clause for our group_by query it was ok because for each group we had the same name of the student when that's not the case we should presumably get an_error but let's see what_happens so let's say that we're interested now not only in finding the uh student name in our query but we're further gonna add a college name so let's go_back to the original query distinct college name let's add college name in our result and let's go_back to grouping by student so now for each student we're gonna return the i for each group which is identified by the student_id we're gonna return the id the name the number of distinct colleges and then a college let's run the query and we do get a result we don't get an_error so we've_got amy one two three she applied to three distinct colleges but for whatever_reason the system decided to tell_us about stanford craig applied to two colleges and the system tells_us about massachusetts_institute of technology let's go_back again revert now to our order by form of this query and take away the aggregation and when we run the query we see there's amy and she did apply to four different colleges but when we put the college name in the grouping query it chose to tell_us about stanford what this system is actually doing is when we include in the select_clause of a grouping query again if we go_back to group_by and we put in the select_clause an attribute that's not one of the grouping attributes it actually chooses a random value from the group to include in the case of the student name the random value was always the same because the student name is always the same for the same student_id in the case of the college it shows a random value among the colleges i'm personally not crazy about this behavior among three open_source database_systems that we've been using for our demos two of them allow this behavior sqlite and mysql i happen to be using mysql today if we were using postgre it would actually throw an_error in this case let's go_back to the original query that finds a number of colleges applied to by each student here it is as we originally wrote it and here is the result now there are may some students in the database who_haven't applied to any college at all and they're not going to be represented in our result because they're not going to be in the results of the join and we don't see any zero counts here what if we wanted to actually lift the student ids of students_who_haven't applied_anywhere and include a zero in the result this is actually one of my favorite queries to give as an exercise or an exam question in my class because it takes a little innovation to figure_out how to write it the way we write it actually is by using the union_operator which i_hope you remember from a previous_video we're going to take the union of the students_who have applied somewhere and the number of places they've_applied together with the students_who_haven't applied_anywhere and for those students we're going to put a cero in the result directly so let_me just write the beginnings of this so we're going to find those students_who_haven't applied_anywhere at all so those are the students_whose sid is not in at all the set of sids in the apply relation so that finds the students_who didn't apply anywhere for each student will return their student_id and then we want to have a zero in the result very simple to do we simply write zero we run the query and now we scroll down we'll see that in addition to all the students_who have applied somewhere we get zeros in the result for the students_who_haven't applied_anywhere the last clause that we're going to introduce in this video is the having clause and the having clause is also only used in conjunction with aggregation what the having clause allows_us to do is apply conditions to the results of aggregate functions so the having clause is applied after the group_by clause and it allows_us to check conditions that involve the entire group in contrast the where clause applies to one tuple at a time so this particular query is finding colleges that have fewer_than five applicant so we look_at the apply relation we group it by college name so we're going to have one group for each college then we're only going to keep those groups were the number of tuples in the group is less_than five indicating that we have fewer_than five applicants to the college we'll run the query and we'll see that berkeley and massachusetts_institute of technology each have fewer_than five applicants so presumably cornell and stanford have greater_than or equal to five applicants and you can check that by examining the data now it is possible to write the same query without that having clause and in fact without the grouping clause and let_me show you how that's done we're going to select again the cname from apply and here's what we're going to do we're going to add an attribute there sorry a table variable we're gonna erase this whole business and we're going to find all applicants so all applications where let_me just type this out for you five is greater_than the count from apply a where a dot cname equals a dot cname and let's take a look_at what this is doing so what we're doing here is we're looking_at each application record and we're checking whether the number of other applications to the same college were gonna find all the applications to the same college we're going to count them and we're going to see if that number is less_than five so it's a little_binary_digit non intuitive now remember the result should be berkeley massachusetts_institute of technology let's run the query and we do get berkeley massachusetts_institute of technology we again get duplicates however the reason is that we're running uh we're checking this condition for each application record so for each application to berkeley we checked the condition that will be many of them and for each one to massachusetts_institute of technology and so on of_course as usual we can add distinct we can run the query and now we get the result it does happen actually that uh every query that can be written with the group_by and a having clause can be written in another form sometime it can be in extremely contorted but another sort of complicated exercise i like to give sometimes in my classes to prove the fact that you can write every group_by having query without using those clauses now let's go_back to our original form of the query were we used the group_by and the having so we'll just get_rid of all this i'm_sorry i'm such a terrible typist group by college name having count star less_than five and we'll run the query will get the same result what if we were interested not in those colleges that have fewer_than five applications but rather those colleges that have fewer_than five applicants it's a subtle point but instead of counting the number of apply tuples for each college what we want count is the number of distinct student id's that appear in the group of apply tuples for that college so again now we're looking for the number of colleges who have fewer_than five distinct people distinct students_applying to them and now we see that one more college joins the group so cornell had more_than five applications but at_least five applications but it has fewer_than five applicants here's our grand finale query it has a having clause and group_by and in addition to that is has a sub query within the having clause that also uses aggregation what this query finds is all majors represented in the database where the maximum gpa of a student applying for that major is lower than the average_gpa in the database so we join student and apply and we group_by the major so we can look_at each major one at a time within the major we find the maximum gpa of a student applying for that major and we check_whether it's lower than the average_gpa in the student relation we run the query and we discover that bioengineering and psychology at this point in time are garnering applicants whose uh highest_gpa is lower than the average in the database of_course that does not represent reality in this video we'll be learning_about null_values in structured_query_language as_usual we'll be considering a simple_college_admissions database and we'll be exploring the select from where query expressions now instead of extending what we can write in queries in this video we'll be looking_at extending what's in the data specifically in relational_databases unless specified otherwise any value in an attribute can take on the special value null null is usually used to mean that the value is undefined or unknown for_example we might have a student whose_gpa is unknown or who doesn't have a gpa and we would represent that in our data with null or we might create our reply relation with the decisions not yet decided and those decision values would also be null so what we're going to look_at in our demo queries is what_happens when we have null_values and we run queries over the database here is the set of students in our database in order to explore what_happens when we have null_values let's insert two new students kevin and laurie each of which have a null gpa we go_back and we look_at our student table and now we see kevin and laurie as part of that table and in this particular interface null_values are depicted as blanks now let's run some queries our first query finds students_whose gpa is greater_than it's a simple query to write we run the query and we find a number of students in our result we don't have kevin and laurie because their gpas are null so we can't determine that they're greater_than let's run another query that says gpa less_than or equal to we'll get a different set of students as we see but we still don't get kevin and laurie now let's run a query where we ask for the gpa to be greater_than or less_than or equal to and this is the one that's a little_binary_digit funny actually we talked_about this very same query back when we were talking_about the relational_model when you look_at the query you would think that you would get every student in the database because everybody's gpa obviously is either greater_than or less or equal to or from a more logical point of view this is an expression that's always true but you might not be surprised when we run the query we still don't get kevin or laurie because we can't determine that their gpa satisfies either of these conditions so even when we have a query that looks_like the where clause is a tautology meaning a logical expression that's always true we still don't get all the data in the result if we want this query to return all students in the database we can do that by adding one more clause to the where which is or gpa is null now this is truly a condition that will be matched by every tuple because either the gpa is greater_than less_than or equal or it's a null value is null is a keyword phrase in structured_query_language that matches values that are null now when we run the query we finally get all of the students in the database including kevin and laurie just to drive the point home a binary_digit further let's continue looking_at queries where we have null_values involved in where clauses in this query we're looking for students where their gpa is greater_than or their size_high_school is less_than so let's run the query and see who we get we get all of these students including kevin so although his gpa is null and therefore we can't determine that it satisfies this part of the condition because since his high_school_size is he does satisfy the second part of the condition and he does come out in our result now let's add one more condition which is or size_high_school is greater_than or equal to so now we have again something in the condition that looks_like a tautology it looks_like it should always be true everyone's high_school is either smaller or larger than furthermore in this case we have no null_values for the high_school_size so when we run this query we should get back everybody and indeed when we run the query we do get back all of the students now i'm not going to go into details here because you can certainly read about it the way the where clause is evaluated when null_values are involved is using a three valued logic where every expression is either true or false or unknown these logical values are combined to finally yield a value for the where expression that determines whether a couple is in the result our last series of queries explores the interaction between null_values and aggregate functions specifically in this case the count function there are actually quite a few subtleties about null_values and aggregation and also null_values and sub queries we're not going to do an exhaustive exploration of these subtleties here but just give one example and we encourage_you if you are using a database with null_values to be very_careful when you write your queries to make_sure you understand how the null_values are going to influence the result ok so our query here is counting the number of students_whose gpa is not null for starters so we run the query and we see that there twelve students_who have a non null gpa those are the students we had originally in the database before we added kevin and lorrie with their null gpa's now instead of just counting the students let's count the distinct gpas so among these twelve students how_many different gpas are represented it turns_out there are seven distinct gpas among those that are not null let's further drop the not null condition and just count the the distinct gpas among the students that will tell_us whether count distinct includes nulls or not in its count we'll run the query and we get the same answer so we still have gpas and we are not counting the null_values now let's do one last query which is to take away the and just look_at the distinct gpas themselves so we had seven when we did the count we run the query now and we get eight what happened well this first tuple is hard with the visualization this first answer is empty and that's actually the null value so when we right select the distinct gpa we do include the null value in our result if there is a null gpa however when we count the distinct values we don't include the null and that's really just one example of the type of subtleties and possibly unexpected behavior we might get when we have null_values so again i encourage_you to be very_careful when writing queries over databases that include nulls that you know exactly what you're going to get in your result in this final video we'll learn the modification statements of structured_query_language there are statements for inserting data for deleting data and for updating existing data for inserting data there are two methods the first method allows_us to enter one tupple into the database by specifying it's actual value so that's the command here we say insert_into a table we specify the values of a tuple and the result of that command will be to insert one new tuple into the table with that value the other possibility is to run a query over the database as a select statement that select statement will produce a set of tuples and as long as that set of tuples has the same schema as the table we could insert all of the tuples into the table so those are the two methods of inserting data and we'll see those shortly in our demo to delete data we have a fairly simple command it says we delete from table where a certain condition is true so this condition is similar to the conditions that we see in the select statement and every tuple in the table that satisfies this condition will be deleted now this condition can be fairly_complicated it can include sub queries it can include aggregation over other tables and so on again to be seen in our demo finally we're interested in updating existing data and that's done through a command similar to the delete command it similarly operates on one table it evaluates a condition over each tuple of the table and now when the condition is true we don't delete the tuple instead we modify the tuple we take the attribute that's specified here and we reassign it to have the value that's the result of the expression as we'll see in the demo this condition here can be fairly_complicated it can have sub queries and so on and this expression can also be quite complicated it can involve queries over other tables or the same table in the database finally i wanted to mention that we can actually update multiple attributes in a tuple so if we're updating a table again exactly the same a single table a condition identifies the tuples to update but now we can update simultaneously any number of attributes each by evaluating an expression and assigning the result of that expression to the attribute as always our demos will use the simple_college_admissions database with colleges students and applications as_usual we have four colleges a bunch of students and a bunch of applications for the students for the colleges we'll first see some insert commands then some delete commands and finally some update commands as i_mentioned there's two different forms of insert command one that inserts a tupple at a time by specifying the values and another that uses subqueries to insert tuples so let's start with a simple one let's add a new college carnegie_mellon to our database we do that by saying we want to insert_into college we use the keyword values and we simply list the values we want to insert the name of the college the state and the enrollment we run the query and we go take a look now at the college relation let's go to college here we go and we see now that carnegie_mellon has been added to our database now let's do little_more complicated insert commands now that carnegie_mellon is in our database let's have some students apply what we're going to do is have those students_who_haven't applied_anywhere yet apply to carnegie_mellon to be a computer_science major let_me take it step by step let's start_by finding those students_who_haven't applied_anywhere so this is a review of what we saw earlier we're going to find those students_whose id is not in the sub query that selects all of the ids in the apply relation we run the query and we discovered that we have four students_who_haven't yet applied anymore the next thing that we're going to do is turn this query into something that constructs the couples that we want to insert_into the apply relations as a reminder the apply relation has the student's id the name of the college the major that they're_applying for and the decision so we'll construct the student's id of course we want them to apply to carnegie_mellon we want them to major in computer_science and for now let's say that we don't know what the decision is so we'll put a null value in for the decision so let's run this query and now we see for our four students we've constructed a tuple four tuples that are ready to be inserted into the apply relation they have the appropriate schema so now that we have that query all ready to go we say insert_into apply and we run the query and we'll see that tuples are inserted in the apply relation let's go take a look_at the relation let's try again here we've_got apply and now we see we have our four new tuples and as a reminder in this user interface a blank cell is what's used as a null value now let's see a little_more action for carnegie_mellon let's find students_who have applied for an ee major at other colleges and have been turned down and let's have them apply to carnegie_mellon and let's accept them right away so again i'm going to do this step by step the first thing we'll do is we will find students_who have applied for ee at another college so we'll change this to n where the major equals ee and we want students_who were rejected so the decision equals no we have y n for our decision and let's just check how_many students we have in that category let's run the query here and now we see there's two students and if we went back and looked at the apply relation we would find that indeed they'd applied to ee and been rejected now let's turn this into a query that constructs tuples that we'd_like to insert_into the apply relation so we need the student_id we want them to apply to carnegie_mellon excuse my slow typing as usual this time they're going to apply to ee and we're going to accept them right away so let's just check that query so now we've produced two tuples that are ready to be inserted into the apply relation we say insert_into apply with the sub query we run it and we see that two rows have been inserted into apply let's go take a look_at that and we need to refresh here and we look down and we see that indeed the two students have applied to ee and they've been accepted now let's explore the delete command what we're going to do in this example is we're going to find all students that have applied to more_than two different majors and we're going to decide that they are unreliable students and we are going to entirely delete them from the database so let's start_by forming the query that finds the students_who have applied to more_than two majors here it is you may want to remember the group i_am having clause so it says we go to the apply relation we form groups or partitions by sid's so we're going to consider the set of application for each student individually we're going to count how_many distinct majors there are in each group and if that number is greater_than we're going to return the student's id and for now let's look_at how_many majors they applied for so we find in our database that there are two students_who have applied for three majors and we don't like those students so were just going to get_rid of them here's how we do it we say delete from student where and as a reminder the delete command is of the form delete from the table where and then you can have a simple condition or a complicated condition so this is a sort of complicated condition we're going to see where their sid is in and we're going to turn this into a sub query we don't need to count distinct here and let_me just format this a little better is in the set of student ids who have applied to more_than one more_than more_than two majors so we should be deleting students three four five and eight seven six if all goes well let's run the query we did delete two rows let's go_back and take a look_at the students and we should find that three four five and eight seven six are gone and indeed they are now we've deleted them from the students but we haven't deleted them from the apply relation so we can write the same deletion statement exactly as a matter of fact and just delete from applied now i want to mention that not all database_systems allow this particular deletion some database_systems don't allow deletion commands where the sub query includes the same relation that you're deleting from and it can be a little tricky but some do postgres does that's what we're running today and so we'll run the query and this time eight rows were affected so we had eight applications for students_who had applied to more_than two distinct majors and again it will be those same students or we can go_back and check if we want to look in the apply relation we'll see that and are now gone from the apply relation as_well now going back to our query as i_mentioned some database_systems don't support this form of deletion and so it's a binary_digit more_complicated to do this exact deletion in those systems the way to do it would typically be to create a temporary table put in the results of this sub query and then delete from apply where the student_id is present in that temporary table you can give that a try on structured_query_language light or mysql and see if you get the same results you ought to let's see one more deletion in this example we have decided that any college that doesn't have a computer_science applicant is probably not worth keeping in the database and we'll delete it we'll start_by doing the select command and then we'll translate it to a delete so this select command finds colleges where their college name is not among the college names in the apply relation where the major is computer_science in_other_words this finds all colleges where nobody has applied for computer_science we run the query and we discovered that nobody's applied for computer_science at cornell if we want to now delete the tupple what we do it's very_simple transformation here we just say delete from college and then the rest is the same where the college name is not among those where someone has applied to computer_science we run the query it's successful and if we go_back and now we look_at our college relation we will see that cornell is indeed gone finally let's take a look_at some update commands in this first command we're going to find students_whose gpa is less_than three point six and who have applied to carnegie_mellon we're going to accept those students but we're going to turn them into economics majors let's start_by finding the students_who have applied to carnegie_mellon with a gpa of less_than three point six here the query again this is a review from previous_videos we find in the apply relation where college is carnegie_mellon and where the student_id is among those students_whose gpa is less_than three point six we run the query and find that there are two such applications so now what we want to do is update the apply relation and we're going to accept these students but for an economics major so we change the select to an update and this is were going to update the apply relation and we're going to update every tuple that satisfies the conditions we happen to know it's these two tuples and we're going to set the decision for the students to be equal to yes and we're going to set the major to be equal to economics we run the query it succeeded and we go now and we look_at the apply relation and we find these two students have now applied to economics and they've been accepted here's a more_complicated and highly motivated update_command in this command we're going to find the student who has the highest_gpa and has applied to major in ee and we're going to change them from an ee major to a computer_science and engineering major a computer_science and engineering rather_than just having them waste their time on electrical engineering all right so let's take a look_at this query which is going to find the applications that we're going modify this query is an excellent review from previous_videos because it has triply nested sub queries so again our goal is to find students_who have applied to major in ee so here are students_who have applied to major in ee but we want them to have the highest_gpa of anybody who's applied to major in ee so in the innermost we find the students_who have applied to ee their student id's then moving out one level we find the gpa's of all the students_who have applied to major in ee now we find all students_whose gpa is at_least as high as the highest ee major ee applicant and finally we find all students_who have applied to ee and have that highest_gpa whew ok let's run the query and see who this is we discover it is student and that student has applied three times actually to ee to stanford cornell and carnegie_mellon so now that we have identified those students transforming this command to do the update is actually relatively simple we update apply and instead of having the major be ee then we have the major be csee that major equals sorry computer_science and engineering that's it we run the query and it succeeded and we go_back and we look_at the apply relation and we refresh and here we see that student has now applied to computer_science and engineering rather_than ee at those three universities let's see a couple more updates that are a little silly but demonstrate some features in this example we're going to give every student the highest_gpa and the smallest high_school in the database so what it's demonstrating is that in the set command the right_hand_side of the equals can itself be a sub query here we're updating every student there's no where clause so that means every tuple is going to satisfy the condition and for each student we're going to set their their gpa to the result of finding the maximum gpa in the database and we're going to set their size_high_school to the result of finding the minimum size_high_school we run the query and we go take a look_at the student relation and we will see now that every student has a gpa of and every student has a size_high_school of two hundred what were formerly the largest and smallest values in the database our very last query says we're in a great mood today let's go to our apply relation and let's accept everybody very simple query just says update apply there's_no where conditions so every tuple satisfies the query we set the decision equal y here we go make a lot of students happy let's take a look_at the apply relation and we will see now that everybody has been accepted now we'll learn_about the joined family of operators in structured_query_language going to our select from where statement in the from clause we list tables separated by commas and that's implicitly a clause product of those labels but it's also possible to have explicit join of tables and this follows the relational algebra style of join there's a few different types one of them is what's_called the inner join on a condition and we'll see that that's equivalent to what in relational algebra we were calling the theta_join where the theta here is a condition so it's effectively taking the clause product but then applying the condition and only keeping the tupples in the clause product that satisfy the condition the separate type of join we can use in structured_query_language is the natural_join and that is in fact exactly the natural_join in relational algebra where it equates columns across tables of the same name so it requires the values in those columns to be same to keep the tupples in the clause product and then it also eliminates the duplicate columns that are created we'll see this very clearly when we get to the demo the third type of join operator and structured_query_language is again interjoin but with a special clause called using and listing attributes and that's kind of again the natural_join except you explicitly list the attributes that you want to be equated and finally the fourth type and actually the most interesting type is the other join and there's a left outer join right outer join and full outer join and this is again combining tupples similar to the theta_join except when tupples don't match the theta condition they're still added to the result and patted with no values now i will say right off that none of these operators are actually adding expressive part of structured_query_language all of them can be expressed using other constructs but they can be quite useful in formulating queries and especially the outer join is a fairly_complicated to express without the outer join operator itself so as usual we'll be doing our demo with our simple_college_admissions database with college tables student table and applied table so let's move_ahead to the demo as_usual we'll have four colleges a bunch of students and students_applying to colleges let's start with the simple parade that we've_seen before which matches students names with majors to which they've_applied so that combines the student in apply relation making sure the student_id is the same across the two relations and gives_us the names and major back now if you remember your relational algebra you can see clearly that this is a join of the student on apply relation actually a natural_join but we'll come to them in we're gonna first rewrite it using the equivalent of a theta_join operator which is called inner join in structured_query_language and so this does the theta_join or the combination of student and apply on a specific condition so we'll change the where to on and it is effectively the cross_product of the two tables but then when it does the cross_product it checks this condition and only keeps the tuples that satisfy the condition so let's run that query and of course we get the same result the two queries we saw are exactly equivalent we're just expressing them a little_binary_digit differently now the inner join is the default join operator in a structured_query_language so we can actually take away the word inner and when we run that we again get the same result because join is an abbreviation for inner join happens when we have a joint operator with additional conditions besides the one on the two tables so this is also a query that we've_seen before this times the name and gpa of students_who came from a high_school with less_than a thousand students they've applied to major in computer_science at stanford so we ran the query and we find just to a students in our result so now let's rewrite that using the join operator so we type join instead of comma the comma being the cross_product and the join condition is again combining the student and apply records where the student_id matches and the rest of this becomes our where condition go ahead and run the query and we get the same result now it turns_out that we can actually put all of these conditions into our on clause so we can make this where back into an and and our on clause now is the and of all all three conditions we run the query and we get the same result now you're probably thinking how do i know what to put in the on clause and what do i put in the where clause because this are obviously equivalent well first of all there are many equivalent queries in structured_query_language we can write things in different_ways in theory structured_query_language query processor should execute them all in the most efficient possible way but the join clause in particular is often used as a hint to the query processor on how to execute the query so if we put all of these in the on condition we're sort of saying as the query processor does the join it should be all the conditions when we make this aware it's sort of a hint saying here's the condition that really applies to the combination of the tuples and the rest of the conditions apply to separate attributes now let's take at what_happens the second way to check is based_on a set of axioms a set of rules called armstrong's axioms we saw some rules for functional_dependencies earlier but armstrong's axioms are a specific set of rules that are what's_called complete it's guaranteed that if one thing about functional_dependencies can be proved from another then it can be proved using the armstrong's axioms i'm not going to cover armstrong's axioms in the videos but you can look_at any of the recommended readings and find them there so you_might_wonder why did i introduce this notion of one set of functional_dependencies following from another and for that matter why did i introduce trivial and non_trivial functional_dependencies well i'm going to sum up in one sentence what we're looking for when we specify the set of functional_dependencies for a relation so we have a notion of the real_world data we have our attributes but we need to specify the functional_dependencies in order to get a good designer for some of the reasons that i_mentioned what we would like to find is a minimal set of completely non_trivial functional_dependencies such that all functional_dependencies that hold on the relation follow from using the technical definition i gave the dependencies in this set wow that seems like some very complicated thing but the fact is when you start specifying functional_dependencies you'll discover that you will actually get this definition pretty naturally so to conclude functional_dependencies are a generally useful concept in database_systems they 're a key ingredient of doing relational_design by decomposition because we use the functional_dependencies to get boyce_codd_normal_form which is what we'll cover in the next_video but they're also useful for the system to determine how to store data to compress data and also to reason about query processing in this sequence of videos we'll learn_about designing good schemas for relational_databases so let's_suppose we're building a database for an application or set of applications and we have to figure_out what schema we want to store our data usually there are many different possible schema designs for a database and databases do tend to get quite complicated and some designs are much better than others so how do we choose what design to use now the reality is that people often use higher_level tools to design relational_databases and don't design the schemas directly themselves but some designers do go straight to relations and furthermore it's useful to understand why the relations that are produced by design tools are what they are furthermore from an academic point of view it turns_out there's a very nice theory for relational data base design so let's consider the process of designing the schema for our database about students_applying to colleges specifically for a given student let's_suppose we have their social_security_number and their name the colleges that student is applying to the high_schools they attended and what city those high_schools were in and the student's hobbies so if that's what we want we can create a single relation called apply that has one attribute for each of those pieces of information now let's take a look_at how that database would be populated let's_suppose that we have a student anne with social_security_number she went to different high_schools in palo_alto she plays tennis and the trumpet and she's applying to stanford berkeley and massachusetts_institute of technology so let's look_at some of the tuples that we would be having in the apply relation to represent this information_about anne so we'll have anne her name she's applying to stanford she went to palo_alto high_school and that's in palo_alto and one of her hobbies is tennis and then we also have and she applied to berkeley and went to palo_alto high_school in palo_alto and tennis there as_well of_course she also has a tuple representing the fact that she's applying to berkeley and and we'll stick with palo_alto high_school and she played the trumpet and as you can see we'll have more tuples we'll have various stanford and berkeleys we'll have some for her other high_schools called gunn high_school also in palo_alto and so on so if we think_about it we will need a total of tuples to represent this information_about ann now do we think that's a good_design i'm going to argue no it's not a good_design there are several types of anomalies in that design first of all we capture information multiple_times in that design and i'll give some examples of that for_example how_many times do we capture the fact that the social_security_number is associated_with a student named ann we capture that twelve times in our twelve tuples how many_times do we capture that anne went to palo_alto high_school we're going to capture that six times and we're going to capture the fact that she plays tennis six times and we're going to capture the fact that she went to apply to massachusetts_institute of technology four times so for each piece of information in fact we're capturing it many many_times so that doesn't seem like a good feature of the design the second type is an update anomaly and that's really a direct effect of redundancy what update anomalies say is that you can update facts in some places but not all all or differently in different places so let's take the fact for example that ann plays the trumpet i might decide to call that the coronet instead but i can go_ahead and i can modify say three of the incidences where we captured the fact about her playing the trumpet and not the fourth one and then we end up with what's effectively an inconsistent database and the third type of anomaly is called a deletion anomaly and there's a case where we could inadvertently completely do a complete deletion of somebody in the database let's say for example that we decide that surfing is an unacceptable hobby for our college applicants and we go_ahead and we delete the tuples about surfing if we have students_who have surfing as their only hobby then those students will be deleted completely now you may argue that's the right thing to do but probably that isn't what was intended so now let's take a look_at a very different design for the same data here we have five different relations one with the information_about students and their names one where they've_applied to colleges one where they went to high_school where their high_schools are located and what hobbies the students has in this case we have no anomalies if we go_back and look_at the three different types they don't occur in this design we don't have redundant information we don't have the update anomaly or the deletion anomaly furthermore we can reconstruct all of the original data from our first design so we haven't lost any information by breaking it up this way so in fact this looks_like a much better design now let_me_mention a couple of modifications to this design that might occur let's_suppose for example that the high_school name alone is not a key so when we break up the high_school name and high_school_city we no_longer can identify the high_school in that case the preferred design would be to move the high_school up here so we'll have that together with the high_school name and then we don't need this relation here and actually that's a fine design it does not introduce any anomalies that's just based_on the fact that we need the name of the high_school together with the city to identify it as another example suppose a student doesn't want all of their hobbies revealed to all of the colleges that they are applying to for_example maybe they don't want stanford to know about their surfing if that's the case then we can modify the design again and in that case we would put the hobby up here with where they're_applying to college and so that would include the hobbies that they want to reveal to those particular colleges and we'll take away this one so it looked like we were taking our nice small relations and moving back to a design that had bigger relations but in this case it was very well motivated we needed these attributes together to identify the high_school and we want it to have our hobbies specific to the colleges so what that shows is that the best design for an application for relational_databases depend not only on constructing the relations well but also in what the data is representing in the real_world so the basic of idea of what we're going to do is design by decomposition specifically we're going to do what we did at the very beginning of this example which is start_by creating mega_relations that just contain attributes for everything that we want to represent in our database then we're going to decompose those mega_relations into smaller ones that are better but still capture the same information and most importantly we can do this decomposition automatically so how does automatic decomposition work in addition to the mega_relations we're going to specify formally properties of the data the system is going to use the properties to decompose the relations and then it's going to guarantee that the final set of relations satisfy what's_called a normal_form and we'll be formalizing all of this but the basic_idea behind normal_forms is that they don't have any of those anomalies that i showed and they don't lose any information so specifically for specification of properties we're going to begin by looking_at something called functional_dependencies and once we specify functional_dependencies the system will generate relations that are in what's_called boyse codd_normal form and boyse and codd by the way were two early pioneers in relational_databases in general then we're going to look_at another type of specification called multi_valued dependencies which will add to functional_dependencies and when we have both functional and multi_valued dependencies then we can have what's_called fourth_normal_form and again that would be relations that are generated by the system that satisfy the normal_form boyce_codd_normal_form is stricter than fourth_normal_form specifically if we make a big venn diagram here of all the relational designs that satisfied boyce_codd_normal_form which by the way is very often abbreviated boyce_codd_normal_form then that contains all of the relations that satisfy fourth_normal_form normally abbreviated fourth_normal_form so every relation that's in fourth_normal_form is also in boyce_codd_normal_form but not vice versa you_might be wondering what_happened to first second and third normal_forms so first normal_form is pretty_much just a specification that relations are real relations with atomic values in each cell second normal_form is specifying something about the way relations are structured with respect to their keys neither of those is discussed very much anymore third normal_form is a slight weakening of boyce_codd_normal_form and sometimes people do like to talk_about third_normal_form so you can think of third_normal_form as a little_binary_digit of a even bigger circle here we're not going to cover third_normal_form in this video because boyce_codd_normal_form is the most common normal_form used if we have functional_dependencies only and fourth_normal_form if we have functional and multivalued_dependencies so what's going to happen next is i'm going to give some examples to motivate these four concepts functional_dependencies boyce_codd_normal_form multivalued_dependencies normal_form and then later_videos will go into each one in much greater depth so let_me just give the general idea of functional_dependencies and boyce_codd_normal_form and we'll use a very_simple for example an abbreviated version of our apply relation that has students' social_security numbers the student's name and their colleges that the student is applying to even this small relation actually has redundancy and update and deletion anomalies specifically let's say that our student ann applies to colleges then there will be tuples and there will be instances where we know that a student with the social_security_number is named ann specifically we're going to store for every student the name and social_security_number pair once for each college that they apply to so now let_me explain what a functional_dependency is and then we'll see how functional_dependencies are used to recognize when we have a bad design like this one and to see how we can fix it a functional_dependency in this case from social_security_number to name and we're saying social_security_number functionally determines the student name says that the same social_security_number always has the same name in_other_words every time we see we're going to see ann now it doesn't necessarily go in the other direction it might not be that whenever we see ann it's but whenever we see it is ann and so what we'd_like to do is store that relationship just one time one time say that for the name is ann now what boyce_codd_normal_form says is that whenever we have one of these functional_dependencies then the left_hand_side of that functional_dependency must be a key and think_about what that's saying remember a key says that we have just one tupple with each value for that attribute so if we have say social_security_number to name as a functional_dependency and we satisfy boyce_codd_normal_form then we're going to say that social_security_number has to be a key in our relation and we'll only have one tupple for each social_security_number specifically we can go_back to our original relation we have this functional_dependency social_security_number here is not a key right so then we know that this is not in boyce_codd_normal_form so we're going to use functional_dependencies to help us decompose our relation so that the decomposed_relations are in boyce_codd_normal_form and here's what would happen in this example our functional_dependency would tell_us to pull out the social_security_number and student name into its_own relation where the social_security_number is a key and then we have just one time for each social_security_number that students name and then separately we'll have the information_about the students and which colleges they applied to again we'll completely formalize this whole idea the definition of functional_dependencies their properties the normal_form and how we do the decomposition in a later video now let's similarly motivate the concept of multi_value_dependencies and fourth_normal_form it is actually a little_binary_digit more_complicated but it follows the same rough outline now let's look_at a different portion of the information_about applying and let's_suppose for now that we're just concerned about students what colleges they're_applying to and what high_schools they went to we still have redundancy and update and deletion anomalies for_example a student who applies to stanford is going to have that fact captured once for every high_school that they went to a student who went to palo_alto high school will have that fact captured once for every college they apply to in addition we get a kind of multiplicative effect here because let's say a student applies to c colleges and they went to h high_schools i know students don't go to a lot of high_schools but let's_suppose that this is one that had moved a lot in that case we're going to have c times h tuples what we'd really like to have is something more on the order of c plus h because then we'd be capturing each piece of information just once now the interesting thing is that the badness of this particular design is not addressed by boyce_codd_normal_form in fact this relation is in boyce_codd_normal_form because it has no functional_dependencies it's not the case that every instance of a social_security_number is associated_with a single college name or a single high_school as we will see later if there are no functional_dependencies then the relation is automatically in boyce_codd_normal_form but it's not in and fourth_normal_form so fourth_normal_form is associated_with what are called multi_value_dependencies when we specify a multi_value_dependency as we've done here with the double arrow what this is saying is that if we take a particular social_security_number in the relation we will have every combination of college names that are associated_with that social_security_number with every high_school that's associated_with that social_security_number we'll actually see that when we have this multi_value_dependency we automatically have this one too i know it seems a binary_digit complicated and we will formalize it completely but for now now just think_about the english statement that multi_valued dependency is saying that we are going to have every combination of those two attributes and values in those attributes for a given social_security_number in_other_words those values are really independent of each other so if we have that situation then what we should really do is store each college name and each high_school for each social_security_number one time and that's what fourth_normal_form will do for us fourth normal_form similarly to boyce_codd_normal_form says if we have a dependency then the left_hand_side must be a key in this case it's a multi_value_dependency we're looking_at so it's really saying something different but the basic_idea is the same which is that we want only one tuple that has each value that's appears on the left_hand_side of a multi_value_dependency so let's see what would happen in this example if we use our multi_value_dependencies to decompose the relation based_on the idea of fourth normal_form well it is the intuitive thing that happens we separate the information_about the college names that a student applies to from the information_about the high_schools themselves and then we'll see that that we only store each fact once and we do get the behavior of having c plus h tuples instead of having c times h tuples like with functional_dependencies and boyce_codd_normal_form we'll be completely formalizing all of this reasoning and the definitions in later_videos to summarize we're going to do relational_design by decomposition we're going to start_by specifying mega_relations that contain all the information that we want to capture as_well as specifying properties of the data usually reflecting the real_world in some fashion the system can automatically decompose the mega_relations into smaller relations based_on the properties we specify and guarantee that the final set of relations have certain good properties captured in a normal_form they will have no anomalies and they'll be guaranteed not to lose information we'll start_by specifying properties as functional_dependencies and from there the system will guarantee boyce_codd_normal_form and then we'll add to that properties specified as multi_value_dependencies and from there the system will guarantee fourth_normal_form which is even stronger than boyce_codd_normal_form and is generally thought to be good relational_design this video covers functional_dependencies first a quick recap of relational_design by decomposition the idea is that the application designer writes mega_relations that contain all the information that we want to have and properties of the data that we're storing and then the system will automatically decompose those based_on the properties that are specified the final set of decomposed_relations will satisfy what's_called the normal_form and normal_forms are good relations in the sense that they have no anomalies and they don't lose information from what was specified in the original mega_relations now the properties themselves are defined either as functional_dependencies in which case the system will generate boyce_codd_normal_form relations or multi_value_dependencies which will then yield fourth_normal_form relations so this video as you can tell is about functional_dependencies themselves and let_me say that functional_dependencies are actually a generally useful concept in databases not only for relational_design so for functional_dependencies as we'll see soon are a generalization of the notion of keys and they allow the system to for example store the data more efficiently when the system knows about functional_dependencies compression schemes can be used based_on functional_dependencies for storage and also functional_dependencies as a generalization of keys can be used to reason about queries and for query optimization which is a reminder of a very_important aspect of database_systems which allows declarative queries to be executed by the system efficiently by the way a third use of functional_dependencies is for exam questions in database courses because there is a very nice theory functional_dependencies as you'll see it's quite easy to write questions about them the remainder of the video will cover functional_dependencies in general as a general concept and not specifically to relational_design and then later_videos will tie functional_dependencies back to design by decomposition as always we'll be using as a sample a college application database and this case i've expanded the information that we're including quite a binary_digit we'll be using these same two relations as examples throughout this video and subsequent videos on relational_design in this case we're gonna look_at two relations one with information_about students and then a separate one with information_about where they're_applying the student information will have social_security_number the student's name their address and then three attributes about their high_school we'll assume there are unique codes for high_schools but they also have a name and are in a city finally the student's gpa and a priority field for admissions that we'll see in a moment for applications we'll have the student's social_security_number the college name they're_applying to the state of the college the date of application and the major not all of these attributes will even be used in this video but like i said this will permeate several videos as our running example to motivate functional_dependencies let's focus_on the student relation and specifically on the gpa and priority attributes let's_suppose that a student's priority is determined by their gpa for_example we might have a rule that says if gpa is greater_than then priority is if the gpa is say in between let's say and then we'll set priority to be equal and let's say if the gpa then is less_than then the priority value is three so if this relationship is guaranteed in our data then what we can say is that any two tuples that have the same priority are guaranteed to have the same gpa and let's formalize that concept so i'm going to write a little logical statement here to formalize the concept i'm going to use the for all symbol from predicate logic and i'm going to say if we have any pair of tuples so for all t or u those are tuples in the student relation then if the student if the t and u have the same priorities i'm_sorry the same let_me fix that they have the the same gpa so if t gpa equals u gpa then and this is the logical implication symbol then t priority will equal u priority so this logical statement is in fact a definition of a functional_dependency and we would write that functional_dependency as gpa arrow priority so that says the gpa determines the priority any tuples with the same gpa must have the same priority so that was a specific example now let's generalize our definition so let_me replace gpa and priority here with just two attributes a and b e of say a relation r and then we'll also need to modify our definition so you can see i've erased the specific attributes and relation and i'll just say for every t and u in our relation r if t dot a equals u dot a then t dot b equals u dot b and that's the definition of the functional_dependency a_determines b for a relation r actually i'm gonna generalize this definition even further because functional_dependencies don't always have to have one attribute on each side they can actually have a set of attributes so now i write a a dot_dot dot an on the left_hand_side these will all be attributes of relation r and on the right_hand_side b b comma bm again attributes of r modifying the formal definition in red now i can't use the dot notation anymore so i'll use a square_bracket and i'll write a through an equals u square_bracket a through an so what i'm saying here in this case is that the two tuples t and u have the same values for all of the attributes a through a n and if they do then they will also though have the same values for b through b m we'll be getting to some concrete examples soon just one last binary_digit of notation before we move on for simplicity i'm going to often in the video abbreviate a list of attributes or set of attributes by using a bar so i'll write a_bar to indicate a set of attributes a and b bar to indicate a set of attributes b and again this is just for convenience so we've_seen the motivation for a functional_dependency in a relation a functional_dependency for a relation is based_on knowledge of the real_world data that's being captured and when we specify one just like specifying keys all instances of the relation must adhere to the functional_dependency so just to summarize functional_dependencies we say that attribute a set of attributes a functionally determines a set of attributes b if again any time tuples agree in their a values they also agree in their b values and let's say that our relation here r has the tuples a the tuples and b and also a few more attributes we'll call those c so let_me draw a picture of a relation now here that has those attributes in it so we'll have here lets just three columns but again these are multiple attributes and these are the attributes a these are the attributes b and these are the attributes c and if we put in a couple of tuples then what we'll say is if we have two tuples here that have and i'm gonna use a bar even for the values in the tuples if we have two tuples whose a values are the same then their b values must also be the same and we're going to be using this type of template for some reasoning later on but we're not saying their c values have to be the same so we could have c and and different c values here as_well but again if we specify this functional_dependency we are saying that every instance of our relation must satisfy the condition that if the a values are the same then the b values are also the same finally let's come_back to our example and i think when we start writing functional_dependencies for our actual relations it'll give you a good idea of what they're really capturing so let's write a few functional_dependencies for our student relation based_on what we expect to be true in the real_world in the data that we're capturing in the relation so here's a first example social_security_number functionally determines s name the student's name so what we say we have multiple tuples about a particular student and they have the same social_security_number say two tuples about student we're expecting them to have the same name in fact we're requiring them to have the same name and presumably because to is sort of identifying the student that would be a natural functional_dependency that would hold in this case and similarly we would expect social_security_number to determine address although we're already making an assumption about the real_world here if we have this particular functional_dependency then we're saying a student doesn't move they don't have multiple addresses every tuple that describes that student by their social_security_number will have the same address let's go to the high_school and see what might be going on there so i_mentioned that the high_school_code what i'm trying to capture there is a unique code for each high_school that might be filled in college application then we would expect the high_school_code to determine the high_school name every time we have the particular high_school_code maybe for different students it would have the same name and also it would have the same city so that's an example of a functional_dependency with two attributes on the right_hand_side now let's look_at one that's a little_more complicated which is one that has two attributes on the left_hand_side instead that actually turns_out to be a more interesting case in fact in this particular case we can probably reverse the arrow and have a functional_dependency in the other direction if we have a combination of high_school name and high_school_city i'm going to assume that's unique that there aren't there's never two high_schools with the same name in the same city and if that's the case if that's unique then we would expect a functional_dependency to the high_school_code any time we have the same name and city we're talking_about the same high_school so we should have the same code what other examples do we have if we assume that there's one gpa for each student then we'd have the social_security_number determines the gpa and we already talked_about gpa determines_priority and another example actually if we put these two together we should see well if we have the same social_security_number twice we should have the same priority and you may be thinking well that's kind of a transitive rule if it takes these two and produces that one and indeed it is and we'll talk_about rules for functional_dependencies later and there may be more in this case now let's take a look_at functional_dependencies for our apply relation actually this one is a little trickier it's even possible there are no functional_dependencies at all it really depends on the real_world data the real_world constraints one possibility for example is that every college has a particular single date on which it receives its application so if that were the case then we'd have the college name determines the date in_other_words every application for a particular college must have the same date another constraint might be that students are only allowed to apply to a single major at each college they apply to so if that were the case this is another one with two attributes on the left_hand sid we'd say that the social_security_number together with the college implies the major in_other_words we cannot have a student and college combination with two different majors and that captured that constraint maybe we have a constraint that students are only allowed to apply to colleges in one state that seems rather unlikely but i was struggling to find functional_dependencies for this case in that case we'd have this function dependency again saying a student could only apply to colleges in a single state for the apply relation specifically again it's really the real_world constraints that drive which functional_dependencies hold for the relation but it's important to understand those constraints so they can be translated to functional_dependencies which then can drive a good relational_design so i've alluded a few times to the fact that functional_dependencies generalize the notion of keys and let's make that connection explicit now let's_suppose we have a relation r and r has no duplicate tuples r has some attributes a and it has some other attributes let's call those b and let's_suppose that we have a functional_dependency that a_determines all of the attributes in the relation now let_me draw a picture of that so here's our relation r with attributes a and attributes b and now let's_suppose that we have two tuples with the same values for a now we'll just write those as little a bar and now let's see what_happens with the b values we'll make them b bar and b bar because we have the functional_dependency the equal values here for a say that b and b have to be equal so b equals b let's just erase the little one and two but now we've generated duplicate tuples so what the functional_dependency tells_us in that case is that these two tuples are actually the same or rather we cannot have two separate tuples with the same a values so we cannot have two separate tuples with the same a values is exactly what it means for a to be a key now again this is only the case when we have no duplicates in r but if we have no duplicates if a set of attributes determines all the other attributes then those attributes are a key so here are a few other definitions related to functional_dependencies we have a notion of a trivial functional_dependency a functional_dependency is trivial a to b if b is a subset of a and let's draw a little picture of what that means so here we have our attributes a and then we're saying and that's all of the attributes here and what we're saying is that b is a subset of a so in other_words some portion of these attributes here we'll just mark that in purple here are attributes b well it's pretty obvious that if two tuples have the same values across their entire expanse here for a's then obviously they're also going to have the same values for just this portion here the b portion so that's why it's called the trivial functional_dependency so a nontrivial functional_dependency is a functional_dependency that's not a trivial one by the way fd is a common abbreviation for functional_dependency so if we have a_determines b then that is non_trivial if it's not the case that b is a subset of a going to our picture let's have here our attributes a and now we're saying there are some attributes in b that are not part of a so we can say well maybe b is partially part of a but there's some portion that is not part of a so let's say that these are our b attributes here so now our functional_dependency is actually saying something it's saying we have two attributes that agree in these values then they're also going to agree in these values over here and the last definition is a completely nontrivial functional_dependency and that's a_determines b where a and b have no intersection at all so in that case again going back to our picture we'll have our a attributes here and then our b attributes are going to be some portion of the remaining_attributes and here we're saying a lot we're saying if these two have the same value then these two have the same value as_well and the reality is that completely nontrivial functional_dependencies are the ones that we're most interested in specifying i_mentioned that there are some rules that apply to all functional_dependencies and i'll give a couple of those right now the first one is the splitting_rule the splitting rules says that if we have a set of attributes that determine another set of attributes and this time i'm going to write it out instead of using the bar notation then we also have this implies that we have a_determines b and a_determines b and so on in_other_words we can split the right side of the functional_dependency and if you think_about it this is pretty if we say that the when the a value are the same all of the b values have to be the same then certainly when the a values are the same the b values have to be the same independently now you_might_wonder if the splitting_rule also goes the other way so let's say we have i'll put the left_hand_side i'll write out the attributes explicitly so let's say we have a through a n determines_b then is it from that the case that a_determines b and a_determines b on its_own and so on well the answer to that is no and i'll give a simple example from our college application database so let's say that we have the functional_dependency high_school name and high_school_city determines high_school_code we talked_about that one before oops here that's an arrow there so that says that when we have a particular name and city combination for a high_school that's identifying a single high_school and so it will always have the same code so that makes a lot of sense but it is not the case i'll put a big x here necessarily that if we split the left_hand_side that high_school name alone will determine a high_school_code so for example i would venture to guess that there are a lot of jefferson high schools all over the country and they won't all will be the same high_school so it's really the combination of attributes on the left that together functionally_determine the right_hand_side and so we do not then have the splitting_rule as a general principle the combining rule is the inverse of the splitting_rule it says if we have a_determines b and we have a_determines b and so on up to a_determines b n then we also have a_determines b through b n together next we have two trivial dependency rules let_me remind remind_you what a trivial dependency is it's a_determines b where b is a subset of a so in other_words every left_hand_side determines itself or any subset of itself and that's what drives the two trivial dependency rules one of them says that if we have a_determines b then we also have a_determines a union b so in other_words we can add to the right_hand_side of every dependency what's already on the left_hand_side sort of as a converse we can also say that if a_determines b then a_determines a intersect b actually this one is also implied by the splitting_rule so we have two different rules in this case that are doing the same thing and finally the transitive rule which is the one we alluded to earlier it says if we have a_determines b and and we have b determines c then we have a_determines c now all of these rules can actually be proven formally and i'm going to go through a sketch of this particular one so here's my relation r and i'll have attributes a b c and then let's let d be the left of our attributes and my goal is to prove that a_determines c and the information i have to prove that is these two functional_dependencies here so to prove that a_determines c i have to prove that if two tupples have the same a values we'll put little bars there then they also have the same c values so i need to show that these two c values here are going to be the same so you can see what's going to happen using the first functional_dependency because these two a values are the same i know their b values must be the same and then i just use the second functional_dependency and because the two b values are the same i then know that the two c values are the same and that has shown that this functional_dependency holds and you can do a similar thing to prove the other rules to yourself now i'm going to introduce the concept of closure of attributes let's_suppose we're given a relation a set of functional_dependencies for that relation and then a set of attributes a_bar that are part of that relation i'm interested in finding all attributes b of the relation such that a_bar functionally determines_b and this is what's_called the closure and i'll show in a binary_digit why we might want to compute that notationally the closure is written using the sign so the closure of a_bar is a_bar let_me be a little_more explicit let_me write out a_bar because remember whenever we write bar we're actually talking_about a list of attributes so we're going to write it as a through a n and i'm interested in computing the closure of that set of attributes in_other_words the entire set of attributes that are functionally determined by the attributes a through a n and i'm going to give an algorithm for doing that my algorithm says start with the set itself so i'm going to start with a through an except i'm not going to close that i'm going to leave a little space there and then i'm going to repeat until there's_no change i'm going to add attributes to that set until i get to the closure so i'm going to repeat if a_determines b and now we'll put bars in here and all of a are in the set then add b to the set so i might have my attributes here a through an and it might be the case that a you know determines attributes c and d so i'll add c and d to the set i repeat maybe there's a c goes to e and i'll add e to the set and so on and when there's_no more change then i've computed the complete closure now if you happen to be someone who likes to think in terms of rules instead what we're effectively doing is applying the combining and transitive rules to the attributes in the set until there's_no change so let's run an example of the closure algorithm let's go to our complete student table and let's add three functional_dependencies one that says that student's social_security_number determines their name address and gpa and that would be a normal gpa determines_priority and high_school_code determines high_school name and high_school_city again these are all examples we gave earlier that would be natural functional_dependencies for this particular relation let's_suppose that we're interested in computing the closure of the two attributes social_security_number and high_school_code so in other_words we want to find all attributes in the student relation that are functionally determined by these two attributes so the algorithm says start with the two attributes themselves social_security_number and high_school_code and then add attributes that are functionally determined by ones in the set so if we start with our first functional_dependency here because we have social_security_number that allows_us to add the student name the address the gpa and that's it for that one now let's repeat again because we have the gpa our second functional_dependency tells_us we can add the priorityand that's it for that one and then since we have the high_school_code in this set our third one tells_us that we can add the high_school name and the high_school_city and at that point we certainly know we're done because we've actually got the entire relation at this point now i didn't pick this particular example at random we took two attributes social_security_number and high_school_code we computed their closure and we discovered that they together functionally_determine all attributes of the student relation now remember just a few slides ago when a set of attributes functionally_determine all the attributes then those attributes together form a key for the relation and in fact if you think_about it social_security_number and high_school_code together are a natural key for the relation a student might go to multiple high_schools but there's_no reason to have more_than one tupple with the combination of a particular student and the high_school they attended so let's formalize a binary_digit this relationship between the notion of closure and keys let's_suppose we're interested in answering the question is a particular set of attributes a key for a relation we can use closure to do that remember we have the relation and we have a set of functional_dependencies for the relation so what we do is we compute the closure of a that's going to give_us a set of attributes and if that equals all attributes then a is the key as a more general question let's_suppose we're given a set of functional_dependencies for a relation how can we use it to find all of the keys for the relation so use the same basic_idea of computing closure but this time we have to do it for every subset of the attributes so let's call each subset a_bar and we just check if the closure of a_bar determines all attributes and if it does then it's a key and by considering every subset of the attributes in r then we're considering every possible key and we'll just check for each one whether it's actually a key now that seems fairly inefficient and actually we can be a little_more efficient than that we can consider these subsets in increasing size order so for example if we determine that a and b together determine all attributes functionally_determine all attributes in the relation that tells_us ab is a key and that actually also tells_us that every superset of ab is also a key and if you think_about it that fills out naturally so the real algorithm would say let's start with single attributes and determine if they are key if a single attribute say c is a key then so is every super set of c and then we go to pairs of attributes and so on finally let's talk_about how we specify the set of functional_dependencies for a relation first i'll define a notion of one set of functional_dependencies following from another one so let's_suppose we have a relation r and we have two sets of functional_dependencies that aren't identical s and s we see that s follows from s if every relation instance satisfying s also satisfies s as a simple example suppose s is social_security_number determines_priority and suppose s is the two functional_dependencies social_security_number determines gpa and gpa determines_priority then it's certainly the case that in an for this example s follows from s every time we have a relation that satisfies social_security_number determines gpa and gpa determines_priority then that relation will also satisfy social_security_number determines_priority and we kind of proved that actually in an earlier part of this video so one question you might have is how do we test whether one set of functional_dependencies follows from another that really boils down to testing whether one functional_dependency follows from a set so and let_me just make this a_bar b bar here to make clear they can be sets of attributes because if we have s and s then we just check_whether every functional_dependency in s follows from the functional_dependencies in s there's actually two ways of going about this test one of the ways is to use the closure we'll compute a based_on the functional_dependencies that are in s and then we'll check if b is in the set reminder computing the closure tells_us every attribute that's functionally determined by the attributes in a based_on the functional_dependencies in s if those include b then a_determines b does indeed follow from s now that we've learned about functional_dependencies let's talk_about how they're used to create relations that are in boyce_codd_normal_form very quick reminder about relational_design by decomposition the database designer creates mega_relations that contain all the information to be captured and specifies properties of the data to be captured the system uses the properties to decompose the relations into smaller ones and those final decomposed_relations satisfy what is known_as a normal_form they don't have anomalies and they don't lose information functional dependencies are used to create relations in boys codd_normal form and multi doubt value dependencies are used to create relations in fourth_normal_form this video talks_about the process of using functional_dependencies to create relations in boyce_codd_normal_form let's start_by defining what it means to do a decomposition of a relational schema let's_suppose we have a relation r with a set of attributes a through a n we can decompose r into two relations we'll call them r and r such that r has i'll just label them b through b k and c through c and let's say let_me use the notation for the list of attributes a b and c that i've been using in other videos so r and r are a decomposition of r first of all if the attributes that capture b union c are equal to the set of attributes we started with a in_other_words recovering all of the attributes and furthermore this is the tricky part r natural_join r equals r so let_me draw this pictorially so here's our relation r and all of our attributes together are the a attributes and then we're going to decompose r into r and r so let's say this first set of attributes here are the b attributes and the second bunch of attributes here with some overlap are the c attributes so now r consists of this portion of r and the purple part here now is r so clearly the b and c attributes are equal to the original attributes and then is the join of r and r giving_us r now remember all of this is logical we don't have r itself and we don't have the data and we don't have r and r so everything is being done at the schema level and we will explore later how we can guarantee that this join does return r and not something else now just using a little_binary_digit more relational_algebra here let_me_mention that r can be defined as the projection on the b attributes of r and then in purple r is the projection of the c attributes of r so again all of this is logical but the idea is that when we do the projection if there are duplicates that are present simply because we have say different values in the remaining_attributes those duplicates don't have to be retained in the projection we saw in some of our examples in other videos where we had redundancy because we were capturing information multiple_times that we didn't need to and we're going to see that what boyce_codd_normal_form really does is separate the relations so that we capture each piece of information exactly once i know that's very abstract now but when we see examples we'll see how that works so let's look_at two possible decompositions of the student relation and see which ones are correct so let's start with a decomposition where we take we're gonna decompose student into s and s and in s we'll put the social_security_number name address let_me abbreviate a little_binary_digit here and the high_school_code but no more high_school information the gpa and the priority and then in relation we'll put the high_school_code and we'll put the high_school name and the high_school_city so you can see what i've done done here is i've separated out the high_school information into a separate relation so first of all is this a correct decomposition in the sense that a union b equals c certainly all of the attributes are still present and furthermore if you think_about it and we'll formalize this concept later s join s and that's going to occur by the way based_on this highest school_code value s join s in this case will for the data that you would expect equal student again we'll formalize that momentarily now let's look_at a second possible decomposition of the student relation again into two relations s and s in the first one we'll put the first bunch of attributes so we'll put the social_security_number the student's name their address their high_school_code let's say high_school name and high_school_city and then in the second relation we'll put again the student name we'll put the high_school name and we'll put say the gpa and lastly the priority so again is this a decomposition well certainly again we have the case that the a union b equals c in other_words we've captured all of the attributes of the student relation in our decomposed relation and do we think it's the case that if we join s and s then we'll get the student relation back and i'll put a question mark here and you know of course the answer is going to be no when we join back we'll be joining in this case on the student name here and the high_school name and likely these are not unique values so when we join back we may be getting information together that doesn't really belong together and again we'll be formalizing that and seeing additional examples momentarily so now let's dig a little further into the actual process of decomposition so first of all we definitely want good decomposition so as we saw a good decomposition must capture all of the attributes of course but the more important property is that this reassembly by the join produces the original relation sometimes that's called by the way a lossless join property but the second thing that we want is not only that we have a good decomposition but that the relations that we decompose into are good relations and those relations are going to be the ones that are in boyce_codd_normal_form so let_me first define formally boyce_codd_normal_form and then we'll go_back to figure_out an algorithm for automatically decomposing relations using good decompositions into decomposed_relations that are in boyce_codd_normal_form so here's the formal definition of when a relation is in boyce_codd_normal_form usually abbreviated b c and f a relation r with functional_dependencies is in boyce_codd_normal_form if every functional_dependencies is such that it's left_hand_side is a key ok let's see what_happens when it's not the case that the left_hand_side of a functional_dependency is not the key and we'll see why that's a bad design so here's our relation r and here's a set attributes a on the left_side of the functional_dependency attribute b and the rest and let's just put in some values so let's_suppose that we have two tuples here with the same a value then by our functional_dependency we're going to have the same b value and the rest can be anything what has happened here is that we've captured the piece of information the connection between a and b twice and the reason that's allowed to happen is because a is not a key if a were a key we would not be allowed to have the situation where we have these two tuples both present in the relation so this relation is not in voice cod normal_form and this functional_dependency here is what we would call a b c and f violation that violation is causing us to have redundancy in our relation and that also give_us as we've_seen the update anomalies and deletion anomalies let_me clarify a little_binary_digit the requirement that the left_hand_side of functional_dependencies have to be key so that's what tells_us we're in boyce_codd_normal_form now i'm not saying that the left_hand_side of every functional_dependency has to be declared as the primary_key for a relation only that it is in fact a key and as you might recall the definition of a key is an attribute that determines all other attributes if you're thinking about functional_dependencies or if you don't have any duplicates in your relation then a key is a value that is never duplicated across tacets so if you think_about it for a second you'll realize that whenever a set of attributes is a key so is any superset of those attributes so if a is a key then so is ac and so is a c d and so on so sometimes you'll see in the definition of boyce_codd_normal_form this wording not is a key but will be contains a key which in fact is exactly the same thing or sometimes it will even say is a super key and a super key is a key or a super set of a key again all of those are saying exactly the same thing but i just wanted to clarify because different wording and sometimes different notation is used for that concept so far things have been pretty abstract let's try to get a binary_digit more concrete here let's look_at two examples and determine if those examples are in b c and f remember to determine is something is in b c and f we need the relational schema and a set of functional_dependencies so here we have our student relation and this is a set of functional_dependencies we had in earlier examples where the social_security_number is determining the name address and gpa that_means that if there's two tuples with the same social_security_number they will have the same name address and gpa that's the same student and they only live in one place the gpa determines the priority so any two students with the same gpa will have the same priority and finally the high_school_code determines the high_school name and city so the high_school is a unique identifier for a particular high_school in a city so those are our three functional_dependencies in order to test whether this is relation is in normal_form with respect to the functional_dependencies we need to know what the key of the relation is or the set of keys of the relation and we worked on this in an earlier video using the closure idea so i'll just remind_you now that for this relation this set of functional_dependencies there's one key or one minimal key and that's the social_security_number together with the high_school_code those two attributes do functionally_determine all other attributes in the relation and therefore they are together forming a key so now to check if we're in boyce_codd_normal_form we have to ask the question does every functional_dependency have a key on its left_hand_side and the answer of course is no not all in fact the reality is that no functional_dependency in this case has the key on the left_hand_side we have three left_hand sides and no of them have or contain our one key if you've given any thought at all to this database design you will see that it's not a good one it's combining too much information in one place which is our basic_idea that we start with a mega relation and break it down and so what we're going to do is use these functional_dependencies and specifically the fact that those are boyce_codd_normal_form or boyce_codd_normal_form violations to break this relation down into one that is a better design now let's look_at a second example our apply relation to see if this one is in boyce_codd_normal_form so in this case as a reminder we have social_security_number college state date and major so the date is the date of application the major is major the student is applying for at that particular college and we'll have one functional_dependency which effectively says in english that each student may apply to each college only once and for one major now let's compute the key for this relation or keys for this relation based_on the functional_dependency well it's pretty straightforward that these three attributes form a key because they determine the other attributes in the relation and therefore they determine all the attributes of the relation furthermore we can see that our one and only functional_dependency obviously has a key on its left_hand_side and so so this relation is in fact already in boyce_codd_normal_form and we'll see there's_no way to decompose this relation further into a better design so here we are again talking_about our decomposition process so now we know what good relations are they are in boyce_codd_normal_form and we saw earlier what good decompositions are so now we're going to give an algorithm that's going to perform good decompositions and those decompositions are going to yield decomposed_relations that are in boyce_codd_normal_form so here's the algorithm the input is a relation r and the set of functional_dependencies for that relation and the output is going to be our good decomposition into good relations so let's just go through it step by step the first thing we're going to do is compute keys from r and were going to do that using functional_dependencies as we have seen and we saw in the actual algorithm for doing that in a previous_video then we are going to start doing the decomposition process and we're going to repeat the decomposition until all of the relations are in boyce_codd_normal_form though we're going to take r and break it up into smaller relations and we might further break those into smaller relations and so on until every relation is good so the breaking down process says pick a relation that's bad so we're going to pick a relation r prime in our current set and again we're starting with only r in our set and we're going define a situation where that relation has a functional_dependency and i guess technically speaking this would be with lines on top that violates boyce_codd_normal_form and that violation is what's going to guide us to do the decomposition into better relations so our decomposition then in the second step is going take our prime and and it's going to put the attributes involved in the functional_dependency into one relation and then it's going to keep the left_hand_side of the functional_dependency and put the rest of the attributes along with that left_hand_side into a separate relation so let's draw this as a picture so here's our relation r prime and of course the first time through our loop that relation would have to be r self and then because we have a functional_dependency from a to b and a is not a key that means it's boyce_codd_normal_form violation we're going to decompose this into r and r so r will contain the attributes in the functional_dependency r will contain the left_hand_side of the functional_dependency and the rest we can see clearly that this is a decomposition that keeps all attributes and what we'll see soon is that this is also a good one in that logically the join of these two relations is guaranteed to give_us back what we had originally now the remaining two lines of the algorithm compute after the decomposition the set of functional_dependencies for the decomposed_relations and then the keys for those i'm going to come_back to this particular line here after doing an example this is our same example although squished to give me more space to write and as a reminder in this example we've computed a couple of the times that the key given the functional_dependencies is the combination of the social_security_number and the high_school_code so our goal is to take the student relation and iteratively break it down into smaller relations until all of the relations are in boyce_codd_normal_form so let's start the iterative process we pick some functional_dependency that violates boyce_codd_normal_form and we use it guide our decomposition so all three of these functional_dependencies actually violate boyce_codd_normal_form because none of them have a key on the left_hand_side so let's start with the high_school_code one so to do the decomposition based_on this violating_functional_dependency we're going to create two relations the first one is going to contain just the three attributes that are in the functional_dependency itself so it's high_school_code high_school name and high_school_city and the second one is going to have all remaining_attributes in the relation plus the left_hand_side so we'll have the social_security_number the name the address we will have the high_school_code because it's on the left_hand_side of the functional_dependency we're using but we won't have the name and city from the right side hand_side and i'll have a gpa and the priority now at this point our algorithm computes the functional_dependencies for the decomposed those relations for this particular example we can just see what they are they're the same functional_dependencies that we had for the non decomposed relation sometimes there's a little_binary_digit of computation you have to do and i'm going to talk_about that in a binary_digit but in this case we can see for example for our relation s the only functional_dependency is this functional_dependency here that tells_us that high_school_code here is a key for s so our only functional_dependency has a key on the left_hand_side and that tells_us that this relation is in boyce_codd_normal_form so we're done with that one but we're not done with s so for s the key is still the social_security_number and high_school_code together so we still have these two functional_dependencies that are boyce_codd_normal_form violations so let's take the gpa priority one and let's guide that to decompose s further we'll decompose s into s and s s will contain the gpa and priority from the functional_dependency we're using and then s will take the remaining_attributes in s together with the left_hand_side of the gpa so we'll keep our social_security_number name address high_school_code and gpa but we don't keep the priority so at this point s is completely gone and let's take a look_at the remaining relations s now just has one functional_dependency that applies and the left_hand_side is now a key and so now we're done with s it's in boyce_codd_normal_form but we're not done i'm_sorry we're done with s but we're not done yet with s s still has social_security and high_school_code as its key and so we still have a violating_functional_dependency so let's decompose s further we decompose into s and s s contains the attributes in the functional_dependency that we're using now so it's the social_security_number name address and gpa and then as contains the remaining_attributes plus the left_hand_side so that's the social_security_number and the high_school_code and i will just tell you right now because you might be getting bored with this example we're done with s s and s are now both in boyce_codd_normal_form so this is our final schema it contains relations s with the information_about high_schools s with the information_about gpa's and priorities s has student with their name address and gpa and s a student with the high_school they went to and if you think_about it this really is a good schema design and it's what's produced automatically by the boyce_codd_normal_form decomposition algorithm using our functional_dependencies let_me mention a few more things about the algorithm first of all i left this step kind of mysterious which is how we compute the functional_dependencies for the decomposed_relations we can't just take the functional_dependencies we already have for the bigger relation and throw away the ones that don't apply exclusively to one or the other of the decomposed we actually have to compute the functional_dependencies that are implied and that apply to these relations so in the video on functional_dependencies we learned all of implied functional_dependencies and we would use the closure as we did in that video to determine the implied functional_dependencies now the reality is for many examples it's pretty obvious we saw in the previous example it is and the other thing is that this is being done by a computer so we don't actually have to worry_about it except when we're doing exercises for our class second let_me_mention that there is little nondeterminism in this algorithm it says pick any of our relations with a violating_functional_dependency and use that to guide the next decomposition step so the fact is that you can get a different answer depending on which one you choose at this point in time all of the results will be boyce_codd_normal_form decomposition but they might not be the same one and in fact if you go_back to the example that i did and you pick the functional_dependencies in a different order you might get a different final schema but again it will be in boyce_codd_normal_form and lastly some presentations of the boyce_codd_normal_form decomposition algorithm actually have another step here which is to extend the functional_dependency that is used for the decomposition so we're using a to b but if we have a to b we also have a to b and we can add more attributes those in the closure of a if you remember the closure and that's also a correct functional_dependency by doing this extension we will still get a correct boyce_codd_normal_form answer but we'll tend to get relations that are larger than the ones we get if we don't do the extension first in some cases larger relations are better because you don't need to join them back when you're doing queries but that can depend on the query load on the data base so to conclude does boyce_codd_normal_form guarantee a good decomposition well of course the answer is yes or i wouldn't have spent all this time teaching you about it does it remove the anomalies that we looked at in our first example in another video of bad relational_design yes it does remove anomalies when we have multiple instances of the same piece of information being captured that's what's squeezed out by the decomposition into boyce_codd_normal_form and that's fairly easy to see through the examples that we've done already it's a little less obvious seeing why boyce_codd_normal_form composition does allow_us to have a breakdown of a relation that logically reconstructs the original relation so let's look_at that a little_binary_digit more so we're taking a relation in r we're producing r and r and we want to guarantee that when we join r and r we get r back we don't get too few tuples and we don't get too many tuples too few is pretty easy to see if we break r into r and r and their projections of r then when we join them back certainly all the data is still present if they're too many tuples that's a little_binary_digit more_complicated to see let's just use a simple abstract example so here's a relation r with three attributes let's have two tuples and let's_suppose that we decompose r into r and r r is going to contain ab and r is going to contain bc so let's fill in the data in r we have and in r we have now let's see what_happens when we join r and r back together when we do that you might see what's going to happen we're actually going to get four tuples we're going to get and that is not same as our original relation so what_happened well what_happened is we didn't decompose based_on a functional_dependency the only way we would decompose with b as the shared attribute were if have a functional_dependency from b to a or b to c and we don't in both cases there's two values of b that are the same where here the a values are not the same and here the c values are not the same so neither of these functional_dependencies hold n b c and f would not perform this decompostion so in fact b c and f only performs decompositions when we will get the property that they're joined back again that's called a lossless join so b c and f seems great we just list all our attributes a few functional_dependencies and the systems churns on and out comes a wonderful schema and in general that actually is what_happens in our student example that worked very well there are however shortcomings of b c and f and we will discuss those in a later video this video continues the topic of relational_design talking specifically about multivalued_dependencies and fourth_normal_form i know i've reminded you many_times about relational designed by decomposition so let_me do it very quickly the designer specifies mega_relations with all the information they want to store and properties of the data the system decomposes the mega_relations into smaller relations that have good properties no anomalies and no lost information when we have functional_dependencies as are properties of the data we get boyce_codd normal_form and then when we add to the functional_dependencies multi_value_dependencies we get fourth_normal_form and the specification of multi_value_dependencies and decomposition into fourth_normal_form is the topic of this video as a reminder from earlier fourth_normal_form is stronger than boyce_codd_normal_form so if we have here all of the relations that are in boyce_codd_normal_form some subset of those are also in fourth_normal_form when we have functional_dependencies we can guarantee boyce_codd_normal_form and then when we add multi_value_dependencies that's what allows_us to narrow down to the stronger property of fourth_normal_form so let's start with an example we have information_about students_applying to colleges the student is identified by their social_security_number they may apply to several colleges and in this video we're not going to have college states just college names we'll assume they're unique and then the student may have hobbies and they may apply as i've said to several colleges and have several hobbies but let's assume for now those are independent so do we have any functional_dependencies for this relation actually we don't have any all the social_security_number does not determine the college name or the hobby or anything in the other direction with no functional_dependencies the only key for the relation then is all attributes of the relation so is this relation in boyce_codd_normal_form as you might remember from the previous_video boyce_codd_normal_form says all functional_dependencies have a key on the left_hand_side well since we have no functional_dependencies then the answer is yes it is in boyce_codd_normal_form on the other_hand do we think this is a good_design i'm going to say no this is not a good_design why not well let's_suppose that somebody applies to five colleges and they have say six hobbies then to have all combinations of colleges and hobbies that would yield tuples in the relation and clearly that's not a good idea we'd rather separate the college and hobbies if they are independent so the separation of independent facts is what fourth_normal_form is about and now let's get a little_binary_digit more formal like functional_dependencies multivalued_dependencies are specified based_on knowledge of the real_world constraints on the data being captured and all instances of a relation with a multivalued_dependency must adhere to the dependency now let's define exactly what a multi_value_dependency is for relation r we write a multi_value_dependency using a double headed arrow and we say 'a' multi_determines 'b' in this case again with 'a' and 'b' possibly being sets of attributes so that would be a one through a n and b one through b m which i'm abbreviating with a_bar and b bar so let_me write the formal definition of a_multi_determines b again using first order logic similarly to what we did with functional_dependencies but this one's a binary_digit more_complicated it says for all tuples t and u that are in relation r if t with the attributes a of t equal u for the attributes a of u again these are lists of attributes so if the two tuples agree on their a values then and remember for functional_dependencies it was simple we just said they agreed on their b values but now it gets more_complicated we're going to say that there_exists a third tuple v in r that has the following properties v has the same a values as t and u so v sub a equals t sub a furthermore v has its b value okay drawn from t so it's equal there and finally it has its rest so those are all the attributes other than a and b equal to u rest okay so that's a mouthful but let's look_at that pictorially so here's our relation r and we'll have the set of attributes a the set of attributes b and the rest of the attributes and now let's make some tuples so let's say that this is tuple t and this is tuple u and we said that t and u agree on their a values so they have the same a values and then they don't have to have the same b values so we'll call the first one b and the second one b and then for the rest we'll call this r and r so what the multi_value_dependency says is that we have a third tuple v and v again has the same a and it has its b value from tuple t so it has b but it has its rest value from tuple u so then it has r here so again what we're saying is that if we have these first two tuples t and u then we also have tuple v now let_me do something a little tricky let_me swap the roles of t and u and show that we also with this definition are guaranteed to have a fourth tuple and we'll call that fourth tuple w by swapping the roles of t and u w has again the same a value now it will take its b value from u and that will give_us b and we'll take its rest value from t and that gives_us r so what we can see here is that when we have the first two tuples that have this particular combination of b values and rest values it tells_us we must have the other combinations as_well we must have b with r and b with r what it's really saying is those b values and the rest values are independent of each other and we'll have all combinations so that might get you thinking back to our colleges and hobbies incidentally sometimes multi_value_dependencies are called tuple generating dependencies and that's because the definition is is about having additional tuples when you have some existing tuples unlike functional_dependencies which just talk_about the relationships among existing tuples so let's go_back to our example now we have students_applying to colleges and having hobbies those are independent facts about the student we'll write our multi_value_dependency as 'social security_number multi determine c name' and now lets use some example data to see our definition and how it works here here's our apply relation with the social_security_number the college name and the hobby let's_suppose that we have a student who's applied to stanford and plays the trumpet now let's_suppose that same student has applied to berkeley and plays tennis so what our multivalued_dependency says and let's make this tuple t and tuple u is that there's a further tuple v v takes the same social_security_number and it takes the first value for the college name and the second for the hobby it says if we have a playing trumpet at stanford and tennis at berkeley then that same person will be playing tennis at stanford furthermore i show that the same definition will generate automatically a fourth tuple with the other combination which would be berkeley and trumpet by the way one thing you might notice here is that we also have the multivalued_dependency social_security_number multi_determines hobby this is actually one of the rules for multivalued_dependency saying that when you have a_determines b then you a multidetermines b then you also have a_multi_determines rest and we'll see some rules for multivalued_dependencies later let's look quickly at a modification of our example where the real_world assumptions about the data are different so we still have exactly the same relation with the same attributes but let's_suppose that we don't want to reveal every hobby to every college maybe we'll decide that we don't want stanford to know that we're a surfer or berkeley to know that we're on the speech and debate team so if that's the case then what multivalued_dependencies do we have in this relation we actually have none and we don't have any functional_dependencies either by the way and is this a good_design well actually i would argue yes in this case this design is a good one because we're not going to have that multiplicative effect of information every tuple that we have in the applied relation will be an independent piece of important information let's look_at one more example before we go on to talk_about properties of multivalued_dependencies i've extended the apply relation now to not only include colleges and hobbies but also the date of application to a college and the major or majors that are being applied for let's continue to assume that hobbies are revealed to college selectively we don't need to have same hobbies for each college that a student applies to secondly lets assume that we restrict students to apply only once to each college but what i what we mean by that is just on one day a student can still apply to multiple majors at a single college and to different majors at different colleges let's also assume that majors are independent of hobbies which seems to make_sense it takes some thinking to come up with the right functional and multivalued_dependencies to capture these constraints but here they are the first one when we say that we reveal hobbies to college selectively is actually the absence of a multivalued_dependency on hobbies and colleges the second one says as we apply once to each college or on one particular day to each college so that would say that when we have a particular student and a particular college that always going to have the same date so any two tuples for a student and college combination will be on the same date the last dependency that we will have involves the independence of the majors that are being applied for and the hobbies that a student has so we'll write that as the multivalue_dependency social_security_number plus college name plus date multidetermines major and remember what that's saying is that major for a given student college and date the majors that they apply for are independent of what we call the rest which in this case is the hobbies so you might take some time to look_at the formal definitions of functional_dependencies multivalue dependencies and maybe write out some sample data to convince yourself that these are the dependencies that are capturing the assumptions that we make about the real_world like with functional_dependencies we have a notion of trivial dependency those that always hold we also have some rule for multi_valued dependencies the definition for a trivial multi_valued dependency a_multi_determines b is in this case that either b is a subset of a or a union b are all attributes a multi_value_dependency is non_trivial if that's not the case so let's take the look_at why these multi_value_dependencies are trivial so let's start with the first case where we have our attributes a and the rest and then attributes b are a subset of a so lets say that these are attributes b so what are definition of multi_valued dependencies says that when we have the same values for a in two tuples so here a and a then we have every combination of the b values and the rest well obviously we do since the b's are subsets of the a's here the b values are going to be the same as_well and we clearly have every combination for the other case of trivial multi_value_dependencies we have a and b together being all attributes of the relation so in that case there's_no rest so clearly we have every combination of values of a and b and rest because there's_no rest to combine with like with functional_dependencies there are a whole_bunch of rules that hold for multi_valued dependencies we will just talk_about three of them and the first one is the most_important and interesting and that's the rule that says if we have a functional_dependency from a to b then we also have a multi_valued dependency from a to b and i'm gonna go_ahead and prove that rule for you again because this is an important one i'm going do this proof using a template for the relation similar to the what i did with rules for functional_dependencies so let's say we have our a attributes our b attributes and our rest and what we need to prove to prove the multi_value_dependencies is when there are tuples t and u with a certain form there_exists a tuple v of another form so let's fill in some values first for the tuples so let's say that we have a and a here that's what we need for the equality of the a values then we have b and r and we have b and r and in order to prove this multi_value_dependency i need to prove that there_exists a tuple v that has the same a value that it has b from tuple t and r from tuple u and what i have in order to prove that is the fact that we have a functional_dependency from a to b because we have the functional_dependencies and because t and u have the same a value what that tells_us is that b equals b here and so if b equals b then we know that this value b here is equivalent to b and in order to prove the existence of this tuple well we have that tuple here already and we're done so you might check that again but what that says is using the knowledge of a functional_dependency we can prove that we always have a corresponding multivalued_dependency there are a couple more rules for multivalued_dependencies that you can prove for yourself if you're so inclined the first one is the intersection rule it says that if we have a_multi_determines b and a_multi_determines c then we have a_multi_determines b intersects c the transitive rule is slightly different than from exact transitivity what it says is if we have a multi determine b and we have b multi_determines c then we have a multi determined not c exactly but c minus b and you might work some examples because it yourself why we don't have just a_multi_determines b and to subtract the attributes for b although it's fairly_complicated so again these rules can be proven and there are many other rules of multivalued_dependencies that you can read about in any of the readings provided on our website by the way regarding rules let's come_back to the fact that every functional_dependency is a multivalued_dependency so we can use another venn diagram this is different than our previous one we can list all of our multivalued_dependencies here and the functional_dependencies are a subset of those so what that tells_us is if we ever have a rule that applies for multivalued_dependencies here that will cover the entire ven diagram and so that rule will apply for functional_dependencies as_well so every rule for mvds is also a rule for functional_dependencies on the other_hand if we have a rule that applies for functional_dependencies that rule does not necessarily have to apply all multivalued_dependencies because it might be specialized just for this portion of the venn diagram so an example of such a rule is the splitting_rule the splitting_rule is a rule that applies to functional_dependencies but does not always apply to multivalued_dependencies and again you could work an example to convince yourself of that fact woo so after all that set_up of multivalue dependencies we're finally ready to talk_about fourth_normal_form the definition of fourth_normal_form looks very similar to the one for boyce_codd_normal_form says we take a relation and we take now a set of multivalued_dependencies for that relation and the relation is in fourth_normal_form if every non_trivial multivalued_dependency has on it's left_hand_side a key remember for functional_dependencies it looks exactly the same except we have the functional_dependency all here instead of multivalued_dependencies so let's see exactly what fourth_normal_form telling us and why it's a good thing so we have a b and rest as usual and let's_suppose that we have a non_trivial multivalued_dependency so that's telling us that if we have tuples t and u and we'll put in some values for b and the rest then we're going to have the combination of those as_well so that's kind of the proliferation of tuples we get when we squish independent facts in the same relation but if the left_side is a key so if the a attributes are a key here then we won't have those tuples and will never have to worry_about the proliferation now remember that i said fourth_normal_form implies boyce_codd_normal_form or if you prefer it in venn diagram format fourth_normal_form is stronger than boyce_codd_normal_form and let's see why that's the case if we have a fourth_normal_form and we want to show that we're in boyce_codd_normal_form then we have to show that if we have a functional_dependency then the left_hand_side a is a key that would tell_us we're in boyce_codd_normal_form well if we have a functional_dependency we had a rule that tells_us we also have the multivalued_dependency and then since we're in fourth_normal_form we get that a as a key so again fourth_normal_form implies boyce_codd_normal_form now let's take a look_at the decomposition of algorithm into fourth_normal_form it's extremely similar to the boyce_codd_normal_form decomposition algorithm the input is a relation a set of functional_dependencies and multi_value_dependencies and we need to separate them because we use the functional_dependencies to find keys the output is a decomposition of r into good relations in this case fourth_normal_form and it's a good decomposition in the sense that reassembling the relations gives you back the original as with boyce_codd_normal_form we start_by computing keys using the functional_dependencies and then we repeat the decomposition process until all of our relations are in fourth_normal_form just as with functional_dependencies in boyce_codd_normal_form we pick a relation that has a violating dependency in this case a multi_value_dependency and we split the relation based_on that dependency so we create one relation that has the attributes of the dependency and another relation that has the left_hand_side of the dependency and the rest of the attributes after that we need to compute the functional_dependencies for the decomposed relation and the multi_value_dependencies for it and then we can compute the keys now finding these multi_value_dependencies is actually a fairly complex process usually it's very intuitive but i'm going to refer you to the readings to read about the algorithm itself and in fact it can be so complicated in the general case that some of the readings don't even provide the algorithm but again in general it's very intuitive our first example is going to be very fast to do as you remember this example has one multi_value_dependency social_security_number determines college name multi_determines college name and it has no keys other than all of the attributes so obviously this is a violating multi_value_dependency and so we decompose into two relations we'll call them a and a the first one has the attributes of the multivalue_dependency the social_security_number and the college name and the second one has the left_hand_side multivalued_dependency as_well as all the remaining_attributes which in this case is the hobby these two decomposed_relations actually have no fds and no mvds so in that case we're definitely in th normal_form and we're done with the decomposition and i think we can agree that this looks_like a good schema for the data at hand our second example is quite a binary_digit more_complicated remember in this example we have that the social_security_number and college name functionally_determine date that_means we have each student applies to each college on a specific date and secondly we assume that majors that were being applied for were independent of hobbies so we have social_security_number college name and date multi_determines the major and incidentally that would mean it multi_determines the hobby too once again we have no keys for the relation except for all attributes so we have both a violating_functional_dependency in this case and we have a violating multivalue_dependency let's use the multivalue_dependency for our first decomposition step so we'll create a and a a will contain all the attributes of our multivalued_dependency and then a will contain all the remaining_attributes along with the left_hand_side of our multivalue_dependency and that turns_out to be all of the attributes except the major now let's look_at our decomposed_relations and see what we have in terms of functional_dependencies and multi_value_dependencies for them so after the decomposition we don't have any more multivalued_dependency but our functional_dependency actually applies to both of the decomposed_relations and we still don't have a key on the left_hand_side so we need to decompose further based_on the first functional_dependency so let's start_by decomposing a we'll turn a into a and a and a will have the functional_dependency all three attributes and then a will have the left_side of the functional_dependency and the remaining_attributes which in this case is the major so now we're finished with a and we have a similar problem with a and so we decompose a similarly although we'll discover that a is the same relation in the decomposition of a as we got with a so we actually only add one more relation now which is a that contains the social_security_number and the college name from the left_side of the functional_dependency and the hobby which is the remaining attribute and then we cross out a now the only functional_dependencies are multi_value_dependencies we have left do have a key on the left_hand_side i'll let you verify that for yourself and these three relations are our final decomposition into th normal_form and i think you will agree that this is a good_design again for the data at hand so let's wrap_up this long unit on on dependencies and normal_forms with a quick summary if we have a relation rabc a functional_dependency from a to b tells_us that when we have the same a values we have the same b values and the boyce_codd_normal_form tells_us to factor that those attributes into their own relation so that we don't repeat that relationship over and over for multi_value_dependencies let's say we have the relation rabcd and if we have the multi_value_dependency a_multi_determines b what that tells_us is that we have every combination for a given a of b values and compact disc values we called those rest earlier and when we have that multiplicative effect of combinations again we take the a and b attributes and we put them in a separate relation so that we can separate out those facts from the independent fact of a and its compact disc values finally in the design process multi_value_dependencies are something we add to functional_dependencies only they're stronger so fourth_normal_form is a stronger property than boyce_codd_normal_form now usually this design process works very well and is very intuitive for many schemas i_hope for the examples that i gave here but there are actually a few shortcomings to using boyce_codd_normal_form or fourth_normal_form and we'll cover those in the next_video the last several videos talked_about boyce_codd normal_form and fourth_normal form as describing good relations as a remainder boyce_codd_normal_form is based_on functional_dependencies and it is says whenever we have functional_dependency on a relation the left_hand_side needs to be a key or contain a key fourth normal_form uses multi_value_dependencies and says whenever we have a non_trivial multi_value_dependency again the left_hand_side is a key and as a reminder functional_dependencies are also multi_value_dependencies so fourth normal_form implies boyce_codd_normal_form what we can see in this video is a few examples where boyce_codd normal_form or fourth normal are actually not necessarily desirable for the specific relations we are designing as_usual we'll be using our college application information database although each of our examples will be a binary_digit different for our first example let's take a look_at the relation and let's_suppose that we have the student's social_security_number the college that they are applying to the date of the their application and the major they are applying for and further more let's say that each student can apply to each college only once and for one major so that would be on one date for major furthermore let's_suppose that all of the colleges in our database have non overlapping application dates and this is obviously contrived for the specific example that we want to demonstrate so under these assumptions the functional_dependencies for our relation will be that the social_security_number and the college name determine the date and the major and so that's based_on our first assumption and we have one more functional_dependency which is that the date determines the college name and that's based_on our second assumption so if we have two tuples with the same date they have to be the same college because colleges have non overlapping dates so using these functional_dependencies we can determine that the key for the relation is social_security_number and college name together since they determine the other two attributes so is this relation in boyce_codd_normal_form the answer is no and the reason is the second functional_dependency which does not have key on its left_hand_side so let's follow the decomposition process and create two relations from our big relation the first one will have the attributes from the violating_functional_dependency and the second one will have all the remaining_attributes plus the left_hand_side of the functional_dependency so that would be the social_security_number the date and the major so did we think this is a good_design it certainly is in boyce_codd_normal_form but i would argue it is not really a good_design we do correctly factor out the information connecting the application dates and the colleges on the other_hand we've now separated a student's application the date and the major of their application from the college they're_applying to so even to check this first functional_dependency here would require us to join these two relations together intuitively we might just prefer to keep that information together even if we are capturing some information multiple_times so i'd say not necessarily good_design here and there is another normal_form it's called third_normal_form and i'm not going to define it here but third_normal_form actually allows this relation here to stay as is without being decomposed and you can read about third_normal_form in any of the readings mentioned on the website just to put third_normal_form in context we'll go_back to our venn diagram remember that fourth_normal_form is stronger than boyce_codd_normal_form so everything that's in fourth_normal_form is also in boyce_codd_normal_form and third_normal_form is even weaker than boyce_codd_normal_form so if we have a relation that's in third_normal_form it's not necessarily in boyce_codd_normal_form and here's an example of one that's not but if we have something in boyce_codd_normal_form it is in third_normal_form and again you can read about third_normal_form on the readings from the website for our second example lets go_back to our student relation and now we're going to have a student's social_security_number the high_schools that they've attended their gpa and their priority for admission and let's assume that students might attend multiple high_schools and that the priority is determined from the gpa so in that case our functional_dependencies in this case are social_security_number determines gpa we're going to assume that students have one gpa we'll have gpa determines_priority and by the way we also have using the transitivity rule social_security_number determines_priority the key for this relation is the combination of social_security_number and high_school name because students could go to multiple high_schools but once we have the social_security_number we do functionally_determine through these functional_dependencies the remaining_attributes the priority and the gpa so is this relation in boyce_codd_normal_form no it's clearly not and in fact all three of our functional_dependencies violate boyce_codd_normal_form so let's go_ahead and do the decomposition so we'll decompose into s and s let's start with the social_security_number determines_priority so then we'll have social_security_number and priority in s and in the other one we'll have all the remaining_attributes and the left_hand_side high_school name and that would be the gpa then the second one still needs to be decomposed further so that one will become s and s s will have the social_security_number and the gpa based_on the first functional_dependency and then s will have the social_security_number and the high_school name and then we take away s now do we think this is a good_design again i would say not necessarily it doesn't quite feel right for one thing we've lost the gpa to priority functional_dependency we can join the two relations s and s to check that dependency but it would be nice if that dependency were together in a relation and in fact in this case we can have a boyce_codd_normal_form relation that does maintain that dependency so if we had made s have gpa and priority together then we wouldn't have needed s and we're actually still in boyce_codd_normal_form so that would would have happened if we had started with the functional_dependency which is also implied that was ssn to gpa and priority actually way back in the decomposition algorithm i_mentioned that sometimes when people use that algorithm they try to start with the biggest functional_dependencies they can to get a better end design and this is a case where we would want to do that if we prefer to end up with a design with just these two relations so overall with the first two relations that illustrated when you have boyce_codd normal_form and fourth_normal form it's possible that after the decomposition there's_no guarantee that all of our original dependencies can be checked on the decomposed_relations they may require joins of those relations in order to check them now lets look_at a different type of example let's_suppose that we have a relation that contains the scores of students_who are applying to college so we'll have the student's social_security numbers for and their name and then sat scores and act scores and they might have many sat's and act's so the only functional_dependency we'd have in that case is the one that says social_security_number determines the student name and as far as keys go there's_no key now in this example we do have a multi_valued dependency if a student has several sat and act scores we can assume they're independent of each other and so that's captured in the multi_valued dependency that says for a given student identified by their social_security_number and name if they have a set of sat scores those sat scores are independent of the rest of the attributes you remember that from the mvd video which in this case would be act in that case we'll have for each student every combination of their sat and act scores so is this relations in fourth_normal_form well clearly it's not we have a violating multi_value_dependency here since it doesn't have a key on the left_hand_side and we also have a violating_functional_dependency so let's quickly do the decomposition we'll start with the multi_value_dependency so that would give_us in the first relation the attributes of the multi_value_dependency and then it will give_us the attributes that are remaining plus the ones on the left_hand_side so social_security_number student name and act so now we're done with the multivalue_dependency actually in this case because it's now a trivial multivalue_dependency when it covers all attributes and now let's take a look_at the functional_dependency that's still a violation because the social_security_number is not a key on the left_hand_side for either of these relations so we'll split s into s and s s will continue the social_security_number and student name and s will contain the social_security_number and the sat and actually similarly need to split s and that will give s which contains the social_security_number and the act score and so now regard of s and s an just in case you're getting confused at this point this is our final schema and this schema is in fourth_normal_form and that's good we've separated out all the relevant facts so actually it feels like a pretty good schema but let's_suppose now that all of the the queries that we're going to run on these relations take a social_security_number and what they return is the student's name and some composite score that's based_on all of their sat and act scores and again let's_suppose every single query does that if that's the case then every query is going to have to recombine all of these three relations in order to compute it's results so we might have been better off even if it included some redundancy and some additional storage with our original design because each query again is going to access all of the data in that one relation so there is something called a de normalize relation and when queries tend to access all attributes when every query would be reassembling the normalized relations it actually might be preferable to use one that is quote de normalized and here's our final example this time let's talk_about college information so we have a college and the state it's in let's_suppose we have some other information and we decide to put it in separate relations we have the size of the college the number of students in the college and we might have the average sat score for each college the average_gpa for each college and maybe some additional relations each containing one fact about the college so all of these relations in boyce_codd normal_form and first normal_form yes they are actually for each relation we have a functional_dependency from the college name to the other attribute but the left_side will be a key so were in a good shape is this a good_design once again i say not necessarily we may not want to decompose so much i sort of feel like this relation is too decomposed because we can capture all of the information in one relation or a couple of relations still being in boyce_codd_normal_form so one of the problems i actually like to give in my database class is to create a theory of composition that's sort of a compliment to the theory of decomposition figuring out when you can take multiple relations and combine them while still staying in a desirable normal_form so you might give that a thought so in conclusion when designing a database schema there are often many different designs that are possible some of the designs are much better than others and we have to have a some way of choosing the design we want to use for our application we do have a very nice theory for relational database design that we've gone through in the past several videos we define normal_forms that tell_us when we have good relations we have a process for designing by decomposition and it's usually quite intuitive and works well there are however some shortcomings to the normal_forms that we've defined and in this video we saw some specific shortcomings involving and forcing dependencies in decomposed_relations about considering what the query workload might look like when one does one's database design and finally the possibility of over decomposing one's relations unnecessarily now let's turn to the subject of querying extensible_markup_language first of all let_me say right up_front that querying extensible_markup_language is not nearly as mature as querying relational data bases and there is a couple of reasons for that first of all it's just much much newer second of all it's not quite as clean there's_no underlying algebra for extensible_markup_language that's similar to the relational_algebra for querying relational data bases let's talk_about the sequence of development of query languages for extensible_markup_language up until the present time the first language to be developed was xpath xpath consists of path_expressions and conditions and that's what we'll be covering in this video once we finish the introductory material the next thing to be developed was extensible_stylesheet_language_transformations extensible_stylesheet_language_transformations has xpath as a component but it also has transformations and that's what the t stands for and it also has constructs for output formatting as i've mentioned before extensible_stylesheet_language_transformations is often used to translate extensible_markup_language into hypertext_markup_language for rendering and finally the latest language and the most expressive language is xquery so that also has xpath as a component plus what i would call a full featured query language so it's most similar to structured_query_language in a way as we'll be seeing the order that we're going to cover them in is first xpath and then actually second xquery and finally extensible_stylesheet_language_transformations there are a couple of other languages xlink and xpointer those languages are for specifying as you can see links and pointers they also use the xpath language as a component we won't be covering those in this video now we'll be covering xpath xquery and extensible_stylesheet_language_transformations in moderate detail we're not going to cover every single construct of the languages but we will be covering enough to write a wide variety of queries using those languages to understand how xpath works it's good to think of the extensible_markup_language as a tree so i'd like you to bear with me for a moment while i write a little_binary_digit of a tree that would be the tree encoding of the book store data that we've been working with so we would write as our root the book store element and then we'll have sub_elements that would contain the books that are the sub_elements of our bookstore we might have another book we might have over here a magazine and within the books then we had as you might remember some attributes and some sub_elements we had for example the isbn_number i'll write as an attribute here we had a price and we also had of course the title of the book and we had the author excuse me over here i'm obviously not going to be filling in the subelement structure here we are just going to look_at one book as an example the isbn_number we now are at the leaf of the tree so we could have a string value here to denote the leaf maybe for the price for the title a first course in database systems then our authors had further sub_elements we had maybe two authors' sub_elements here i'm abbreviating a binary_digit below here a first name and a last_name again abbreviating so that might have been jeff ullman and so on i think you get the idea of how we render our x and l as a tree and the reason we're doing that is so that we can think of the expressions we have in xpath as navigations down the tree specifically what extensible_markup_language consists of is path_expressions that describe navigation down and sometimes across and up a tree and then we also have conditions that we evaluate to pick out the components of the extensible_markup_language that we're interested in so let_me just go through a few of the basic constructs that we have in xpath let_me just erase a few of these things here that got in my way okay i'm gonna use this little box and i'm gonna put the construct in and then sort of explain how it works so the first construct is simply a slash and the slash is for designating the root_element so we'll put the slash at the beginning of an xpath query to say we want to start at the root a slash is also used as a separator so we're going to write paths that are going to navigate down the tree and we're going to put a ' ' between the elements of the path all of this will become much clearer in the demo so i'll try to go fairly quickly now so we can move to the demo itself the next construct is simply writing the name of an element i put 'x' here but we might for example write 'book' when we write 'book' in an xpath expression we're saying that we want to navigate say we're up here at the bookstore down to the book sub_element as part of our path expression we can also write the special element symbol ' i ' and ' i ' matches anything i i so if we write ' i ' then i we'll match any sub_element of our current_element when we execute xpath there's sort of a notion as we're writing the path_expressions of being at a particular place so we might have navigated from bookstore to book and then we would navigate say further down to title or if we put a ' i ' then we navigate to any sub_element i if we want to match an attribute we write ' ' and then the attribute name so for example if we're at the book and we want to match down to the isbn_number we'll write isbn in our query our path expression we saw the single slash for navigating one step down there's also a double_slash construct the double_slash matches any descendant of our current_element so for example if we're here at the book and we write double_slash we'll match the title the authors the off the first name and the last_name every descendant and actually we'll also match ourselves so this symbol here means any descendant including the element where we currently are so now i've given a flavor of how we write path_expressions again we'll see lots of them in our demo what about conditions if we want to evaluate a condition at the current point in the path we put it in a square_bracket and we write the condition here so for example if we wanted our price to be less_than that would be a condition we could put in square_brackets if we were actually better be the attribute at this point in the navigation now we shouldn't confuse putting a condition in a square_bracket with putting a number in a square_bracket if we put a number in a square_bracket n for example if i write three that is not a condition but rather it matches the nth sub_element of the current_element for_example if we were here at authors and we put off square_bracket two then we would match the second off sub_element of the authors there are many many other constructs this just gives the basic flavor of the constructs for creating path_expressions and evaluating conditions xpath also has lots of built in functions i'll just mention two of them as somewhat random examples there's a function that you can use in xpath called contains if you write contains and then you write two expressions each of which has a string value this is actually a predicate will return true if the first string contains the second string as a second example of a function there's a function called name if we write name in a path that returns the tag of the current_element in the path we'll see the use of functions in our demo the last concept that i want to talk_about is what's_known_as navigation axes and there's axes in xpath and what an axis is it's sort of a key word that allows_us to navigate around the extensible_markup_language tree so for example one axis is called parent you_might have noticed that when we talked_about the basic constructs most of them were about going down a tree if you want to navigate up the tree then you can use the parent access that tells you to go up to the parent there's an access called following_sibling and the colon colon you'll see how that works when we get to the demo the following_sibling says match actually all of the following siblings of the current_element so if we have a tree and we're sitting at this point in the tree then we the following_sibling axis will match all of the siblings that are after the current one in the tree there's an axis called descendants descendants as you might guess matches all the descendants of the current_element now it's not quite the same as slash_slash because as a reminder slash_slash also matches the current_element as_well as the descendants actually as it happens there is a navigation access called descendants and self that' s equivalent to slash_slash and by the way there's also one called self that will match the current_element and that may not seem to be useful but well see uses for that for example in conjunction with the name function that we talked_about up here that would give_us the tag of the current_element just a few details to wrap_up xpath queries technically operate_on and return a sequence of elements that's their formal semantics there is a specification for how extensible_markup_language documents and extensible_markup_language streams map to sequences of elements and you'll see that it's quite natural when we run an xpath query sometimes the result can be expressed as extensible_markup_language but not always but as we'll see again that's fairly natural as_well so this video has given an introduction to xpath we've shown how to think of extensible_markup_language data as a tree and then xpath as expressions that navigate around the tree and also evaluate conditions we've seen a few of the constructs for path_expressions or conditions we've seen a couple of built in functions and i've introduced the concept of navigation axes but the real way to learn and understand xpath is to run some queries so i urge you to watch the next_video which is a demo of xpath queries over our bookstore data and then try some queries yourself in this video we'll demonstrate xpath by running a number of queries over our bookstore data let's first take a look_at the data we've expanded it slightly over what we've been using in previous_videos but it continues to have pretty_much the same structure we have a number of books books have attributes isbn price sometimes in addition they have a title sub_element authors with first name and last_name so we have our first course book and our complete book and our complete book also has a remark as you may recall then i've added a couple more books i've added hector and jeff's_database_hints by jeffrey_ullman and hector garcia molina with a remark an indispensible companion to your textbook i've also added jennifer's economical database_hints for that at a mere price of you get some hints and then finally just to demonstrate certain expressions i've inserted three magazines two national geographics and a newsweek and finally a magazine seen called hector and jeff's_database_hints so with this data in mind let's move to the queries we'll start with simple queries and get more_complicated as we proceed in this window we'll be putting our xpath expressions in the upper pane then we'll execute the query and we'll see the results in the lower pane the way xpath works the first part of every expression specifies the document document over which the xpath expression is to be evaluated so we have the data that you saw in a document called bookstoreq xml and you'll see in each of our expressions that we begin by specifying that document and then move_ahead to the rest of the xpath expression our first expression is a very_simple path expression it says navigate through the extensible_markup_language by going first to the root_element called bookstore then look_at all the books so the elements of book store and finally all the titles of elements let's run the query and we will see our results below so as we can see our results here is actually written in extensible_markup_language little header appears and then we see the four titles of books that are in our database now let's modify our path expression instead of only getting book titles let's get book or magazine titles we do that by extending our middle matching element here to use a sort of regular expression like syntax book or magazine and we put it in parentheses so now it says match any path of the data that starts at the bookstore element follows either a book or magazine sub_element and then finally a title sub_element when we run the query we see now that we get not only the titles of our books but also the titles of our magazines so far we've mentioned element names explicitly in our path_expressions but as i_mentioned in the introductory_video we can also use what's_known_as a wild card symbol the symbol star star says to match any element name so now we're going to start again with bookstore match any element below bookstore and finally find titles of elements below those any elements now it so happens that the only elements below bookstore are books and magazines so when we run the query we will get exactly the same result so far we've been navigating with the single slash operator which tells_us to go one element at a time we're at a particular element and then we match sub_elements with the specific tag that we typed there is also the double_slash operator as you recall from the introductory_video double_slash says match myself or any descendants of myself to any length so if i put a double_slash title what we'll be matching is any title element anywhere at all in the extensible_markup_language tree we run the query and again we get exactly the same result because we had already been getting all of the titles which were sub_elements of books or magazines now let's get something a little different let's put slash_slash star now that's kind of a wild thing to put because it says i'm going to match any element in the entire tree and furthermore it can be of any the element type let's run the query and see what_happens what we get is a huge result let_me just scroll down so you can see the result in fact what we're getting is every element at every level of the tree including all of its sub_elements so in fact the first element in our result is our entire tree because it's our book store element and we'll go all the way down to the end of the book store the next element in our result is some children of the book store so we get the book elements and we're also going to get their children in the answer and as we keep scrolling down we'll see that we get every element of the entire database that's not a useful query but it does demonstrate the construct the double_slash matching any element in the tree and the star matching any tag of any element now let's turn to attributes let's_suppose we're interested in returning all the isbn_number in the database so we'll go_back to saying book store books of elements and then we'll get the attribute isbn so we type at sign and isbn let's run the query and we get an_error it turns_out that attributes cannot be what is called serialized in order to return them in an xml looking result so what we need to do actually is obtain the data from the attribute itself and once we do that we'll see that we're getting the answer that we desire so we'll ask for the data of the attribute run the query and now we see we have all its isbn numbers now the attribute data is just strings so we're returning the isbn numbers as a set of strings with blanks between them so some of these are sort of peculiarities of how xpath works again we were not able to return an attribute because it didn't know how to structure the result but once we extracted the data from the attribute it returned it as string values so far we've only seen path_expressions with no conditions involved so let's throw in a condition let's say that we're interested in returning books that cost less_than so what we're going to do here is navigate to the book and then we're gonna use the square_bracket which says start evaluate a condition at the current point of the navigation so the condition that i'm going to put is that the price of the book is less_than we'll run that query and we'll see that we have two books whose price three books i apologize whose price is less_than now here we return the book that satisfied the condition what if what we actually want to return is the title of the books whose price is less_than what we can do is after evaluating this condition on the book we can actually continue our navigation so we just put slash title here it says find the books only keep the ones that match the condition and then continue navigating down to their titles and return that as the result of the query we run the query and we see our result now another type of condition that we can put in square_brackets is an existence condition instead of a comparison if we put for example just the label remark inside our square_brackets that says that we should match books that have a remark so putting an element name in square_brackets is an existence condition on that sub_element existing once we've isolated the books that have a remark we'll return the title of the books we run the query and we discover that two of our books have a remark you can go_back and check the data and you'll see that's indeed the case let's get a little_binary_digit more_complicated now let's get_rid of this query and put in a whole new one in this query we're going to find the titles of books where the price is less_than and where ullman is one of the authors so now we have in our square_brackets a longer condition the price is less_than ninety and there_exists and implicitly this is an exist there_exists a sub part from the book author slash author slash last_name where the value of that is ullman if we satisfy both of those conditions it will return the title of the book so we run the query and we discover two books that are less_than where ullman is one of the authors now let's expand the query by adding another condition we want not only the last_name of the author to be ullman but the first name to be jeffrey so now we're looking for books where jeffrey_ullman is one of the authors and the books are less_than so we run the query and we get the same result not surprisingly since ullman is always paired with jeffrey but actually this is not doing quite what we're expecting and i'm gonna explain why by demonstrating some changes let's say that we change our query to not look for jeffrey_ullman as an author but to look for jeffrey widom hopefully we'll get no answers but when we run the query we see still get a book the first course in database systems so the two authors of that book if you look back at the data are jeffrey_ullman and jennifer widom so let's see why that book was returned in this query the reason is if we look closely at this condition what we're saying is we're looking for books where the price is less_than and there_exists an author's author last_name path where the value is widom and there_exists an author's author first name path where the value is jeffrey well that in fact is true we have one author whose last_name is widom and another author whose first name is jeffrey let's try to formulate the correct that query now so instead of matching the entire path to the last_name and then the entire path to the first name separately through the author's sub_elements what we want to do so if we want to look_at each author at a time and within that author look_at the last_name and first name together so to modify our query to do that wer're going to use a condition within the condition specifically within the author slash author we'll look_at the last_name and the first name this syntax error is temporary once we finish the query everything will look good so we put a second bracket there and let_me show again what i've done that said we're looking for books where the price is less_than and there_exists an author slash author sub_element where the last_name is widom and the first name is jeffrey hopefully we'll get an empty answer here we execute the query and indeed we do now our original goal was to have jeffrey_ullman so finally we'll change jeffrey_ullman run the query and now we get the correct answer incidentally it's a very common mistake when we have a condition to put a slash before the condition if we did that we would get a syntax error when we write the square_bracket it essentially acts like a slash so when we reference a sub_element name within a square_bracket we're implicitly navigating that sub_element next we're going to try a similar query with a twist we're going to try to find books where ullman is an author and widom is not an author so we we navigate the books as usual and we look for cases where there's an authors author last_name equals ullman and there's an authors author last_name not equal to widom now you may already detect that the this is not the correct query but let's go_ahead and run and we see that we got three books but we know the first two books widom is an author so as you may detected this is not correct what this asks for are books where there's an author whose last_name is ullman and there's some author whose last_name is not widom well in fact every book with ullman as an author has some author whose last_name is not widom that would be ullman so even if i took away this condition and ran the query again i'll get exactly for the same results well actually i got a syntax error i forgot to erase the and so let's get_rid of that run the query and now we do in fact get the exact same result so as a reminder we were trying to find books where the last where ullman is an author and widom is not in fact we do not have construct yet to write that query a little later in the demo we'll see how we can in a kind of tricky fashion but for what we've_seen so far with path_expressions and conditions we're unable to write that specific query so far we've_seen two types of conditions in brackets we saw comparisons and we saw existence constraints where we checked to see whether a particular sub_element existed as you might remember from the intro we can also put numbers inside in square_brackets and those numbers tell_us to return the f sub_element specifically if we look_at this query we're using slash_slash to navigate directly to authors elements and then we want to return the second author sub_element of each author's element so we run the query and we'll see if we look that our data that jennifer widom jeffrey_ullman and hector garcia melina each appear once as the second author of a book or a magazine if we changed this to three we'll be returning third authors only and we can see only jennifer widom as a third author if we change this to ten hopefully we'll get an empty result and in fact we do now let's take a look_at some built in functions and predicates in this query we're going to find all books where there's a remark about the book that contains the word great so we're going to navigate using slash_slash directly to book elements and within the book element we'll have a condition that invokes the built in predicate contains which i_mentioned in the introductory_video which looks at two strings and checks whether the first string contains the second one so if we have a book where there's a remark which is a string that contains the word great then the book matches the condition and will return the title of the book we run the query and we see that we have one book that has the remark containing the word great our_next query does something kind of new i like to call this query a self join but that's probably only because i'm a relationally biased person but what it's actually doing is querying sort of two_instances of our bookstore data at once and joining them together so we'll see that our doc bookstore appears twice in this expression let_me explain what this expression is doing it's finding all magazines where there's a book that has the same title as the magazine and here's how it does it so our first path expression navigates two magazines and then it extracts in the condition the title of the magazines the magazine will match if the title equals some book title and so to find the book titles we need to go_back to the top of the document so we get a second incidence of the document and we find book titles now when we have the equals here this equals is implicitly be existentially quantified did you follow that implicitly existentially quantified that_means that even_though we're doing equals on what's effectively a set the condition is satisfied if some element of the set is equal to the first title okay there's a lot of implicit existential quantification going on in equality in xpath and in xquery as_well as we'll see later on in any case let's run the query and we will get back the fact that the magazine called hector and jeff's_database_hints has the same title as a book and if you look back in the data you'll see we do have a book of the same name we saw one example of a built in predicate contains this example shows another built in function in this case the name function and it also shows our first example of a navigation axis we're going to use the parent axis what this query is going to find is all elements whose parent element tag is not bookstore or book of_course this is just for demonstration purposes it's not really that useful of a query but let_me just walk through the construction of the query so we're starting with our bookstore and then we're using which finds all elements we saw earlier when we ran the query we saw that it matched every element in the book in the database now since we've already put in bookstore we're not going to match the bookstore element itself but we'll match every child of the bookstore element so what the condition looks for is the tag of the parent of the current_element and it sees if it's book store or book and we return the element if it's neither book store or book at the parent tag here's how we find the parent tag so name is a built in function name operates on an element and it returns the tag of that element the element we want to look_at is the parent of the current_element and the way we do that is with the parent navigation axis which is parent colon colon finally the star is matching the tags of the parents well here we say match any tag of the parent extract the tag and check if it's book store or book so when we run the query we'll see that we get that pack a lot of data but all of them are elements in the database whose parent is not the book store or book here's another example of a navigation axis in this case we're using following_sibling following sibling says if we are at a specific point in the tree you should match every sibling so every other element at the same level that's later in the document that follows the current sibling so let's walk through this expression and see what we're doing what this expression is looking for is all books and magazines that have a non_unique title in_other_words all books or magazines where some other book or magazine has this same title so we navigate down to books or magazine elements this is what we saw in one of our earlier path_expressions we'll match any book or magazine element and then we want to find one where the title is equal to some title of a later sibling now our books and magazines are all at the same level in our data so when we do following_sibling we're going to be matching all other books and magazines that appear after the current one and again this star says that we can match on element of any type we could equivalently put book or magazine in here because we know they're all books or magazines and we'll do that in a moment but for now let's just focus_on running the query so we execute the query and we find two answers we find hector and jeff's_database_hints which is a book because we had a magazine of the same title and we find national_geographic which is a magazine because there's another magazine of the same title so actually this query was somewhat incomplete and that was our fault the way we wrote the query we said that we want to return book or magazine elements when a later one has the same title so that doesn't actually return all of the ones with non_unique titles it only returns the first instance of each one with a non_unique title let's modify the query to do the right thing what we need to do is not only check_whether the title equals the following_sibling title of some book or magazine but whether it might also equal a proceeding one so we add title equals the same construct using the proceeding sibling axis slash_slash title here we go and now when we run the query we see that we get hector and jeff's_database_hints and national_geographic but we also get another instance of national_geographic and another instance of hector and jeff's_database_hints so now we have the correct answer we don't only get the first instance of duplicated titles but we get both of them now to show the use of the star we were matching any book or magazine as the following_sibling what if all we were interested in is cases where there's a book that has the same title but not a magazine and we can do the same thing here in that case we shouldn't get national_geographic anymore let's run the query and indeed all we get in fact is hector and jeff's_database_hints as a magazine because that was the only instance where there was an actual book that had the same title as opposed to matching books or magazines with the star don't take a look_at this query yet let_me explain what i'm doing before you try to untangle the syntax to do it as i_mentioned earlier xpath revolves around implicit existential quantification so when we are looking for example for an author whose name is ullman implicitly we will match the path if any author has the last_name ullman and in general most of xpath revolves around matching sets of values and then returning things if any element of that set matches the condition what if we want to do universal quantification in other_words for all that turns_out to be more_complicated but we can do it in a tricky fashion so what i'd like to do with this query is we're going to find books where every author's first name includes j if we wrote it in the fashion that we might be tempted to or we just say book author author first name includes j then we'll get books where some authors first name contains j to get books where all author's first names contains j is more difficult and the way we're going to do it is it's kind of a kluge we're going to use the built in function count so here's what we're doing in this query we're finding all books where the number of authors whose first name includes j is the same as the number of authors of the book without a condition okay so specifically under book we count the number of matches of an author's author sub_element where the built in function the built in predicate contains is true where the first name contains j and so we are counting the number of authors whose first name contains j and we're setting that equal to the count of the first name sub_elements we'll run the query and we will find indeed that there are two books where all of the authors' first name includes j we can use a related trick to write the query we tried to write earlier but failed to find books where ullman is an author and widom is not an author so with the implicit existential what_happened before is that we found books where there was an author whose name was ullman and then there was an author whose last_name was not widom and of course we still got everything back what we want to find is books where there's a last_name that's ullman and where none of the authors have the last_name of widom that's effectively again a universal quantification for all for all of the authors their last_name is not widom since we don't have a for all construct in xpath we're again going to use the count trick so in this query we're looking for books where one of the authors' last_name is ullman and the number of authors using count again the number of authors whose last_name is widom is zero so now we've expressed that query we run it and we get the correct answer that_concludes our demonstration of xpath we've shown a large number of constructs and we've written some fairly_complicated queries on the other_hand we certainly have not covered the entire xpath language if you're interested in our many online materials we'll also provide a data and we encourage_you to experiment on your_own this video gives an introduction to the xquery query language for extensible_markup_language as a reminder querying extensible_markup_language is not nearly as mature as querying relational_databases it's much newer and there is no clean underlying algebra that is equivalent to the relational_algebra the sequence of development of extensible_markup_language querying which is started with xpath which we've already covered then access lt which we'll be covering later and in this video and the subsequent demo we'll be covering the xquery language xquery is an expression language also known_as a compositional language and we've_seen that already with relational_algebra what that means is when we run an expression of the language on a type of data the answer to that expression or query is the same type of data so let_me just draw the picture here we have some data we run an expression or query over that data and we get get a result back and that result is also going to be in the same type of data that_means we can run another query or expression over the same type of data that was the result of the previous one and again we'll again we get a result of the same type of data now that also means that we can sort of put these together and when we put them together that will give_us additional expressions or queries that are valid in the language when we talked_about compositionality in the relational_model the types of data we were using were relations we would have maybe some relations here we run a query over those relations the result itself is a relation and we can run further queries over that relation that's the answer and then when we looked at relational_algebra we saw a composing the expressions of relational_algebra into more_complicated expressions and everything worked together in extensible_markup_language it's similar except the expressions operate_on and return what are known_as sequences of elements now we're not going to go into a great detail of this model as we mentioned for xpath the sequences of elements can be generated from an extensible_markup_language document they can also be generated from an extensible_markup_language stream and the interpretation is quite natural now let_me_mention that one of the basic types of expressions in xquery is xpath so every xpath expression is in fact an xquery expression or a valid query in xquery then we can use xpath and other constructs of xquery to put together into more_complicated queries now one of the most commonly used expressions in xquery is what's_known_as the flwor expression and it looks closest to structured_query_language of any of the constructs in xquery let_me explain how it works we have up to five clauses in that flwor expression and that's where the flwor comes from the first the for clause sets up what are known_as iterator variables so the idea here is that in the for clause this expression is evaluated and it will produce potentially a set result and then the variable will be backed count to each element of the set one at a time and then the rest of the expression will be evaluated for each element so in other_words if this produces a set of end results then we will effectively evaluate the rest of the queries n times we will see that much more clearly when we do the demonstration the let clause is more of a typical assignment so it's only run once each time the rest of the query is run and so this expression is evaluated and even if it's a set it's assigned once to this variable so it's not iterating now it's just doing an assignment again it'll become quite clear when we do the demonstration the where clause specifies a condition and it's a filter very similar to the filters that we've_seen in structured_query_language the order by is also sort of similar to structured_query_language it sorts the results so that you can get the result in a particular order and finally the return clause says what we want to actually get in the result of our query and just as a reminder when we start the query with the for if we are effectively executing the query n times then each one of those n executions may result in one of the elements in the result the flwor expression has up to five clauses but actually all of the clauses except the return clause are optional the return is the only one that's required to have a well_formed query and to get a result i also want to mention that the for and let clause can be repeated multiple_times if we want to set_up multiple variables or multiple assignments and they can be interleaved with each other they don't need to be in a particular order a next query it's possible to mix query evaluation with simply writing down the extensible_markup_language data that we want in the result and here's an example in this case we're writing the opening and closing_tags that we want to be in the result of our query and then inside curly_braces we write the query itself and what these curly_braces effectively say are evaluate me the curly_braces are an indicator to the xquery processor that what's inside them needs to be run as a query is replaced with the extensible_markup_language that's the query result and the final output is our opening and closing_tags with the extensible_markup_language query result inside at this point let's move_ahead to the demo we'll once again be using our bookstore data and we'll do a sequence of xquery examples over that data again we are not going to be comprehensive xquery is a big language but will show the flavor of the language and a lot of its most useful constructs and we'll be able to write some quite_powerful queries in this demo we're going to run a number of queries in the xquery language we'll be using the same extensible_markup_language data we've used for previous demos here we can see the book store database with a number of books four books and a few magazines xquery language is quite complex certainly more complex than structured_query_language we'll be covering a number of the constructs but we won't be able to cover everything and even the ones we cover will take a little getting used to i highly suggest that you take time to pause the video to take a look_at the queries or even better download the data and the queries and try them for yourself our first query is a fairly simple one demonstrating a flwor or f l w o r expression that's the basic expression of the xquery language here we only have the f w and r part for where and return this query is going to return the titles of books that cost less_than ninety dollars where ullman is an author let's go_ahead and take a look_at the constructs of the query the four construct as we described has an expression in this case it's an xpath expression that returns the books in our document it binds the variable dollar b to each book one at a time and run the rest of the query for that finding the next thing it does is check_whether the price of the book is less_than ninety and whether there_exists an author slash author the last_name under the book element where the value of that is ullman in the case where both of these conditions are true it will return the title of the book let's run the query when we run the query we see that we get a result that's formatted as extensible_markup_language with two titles of the books that cost less_than ninety and ullman is an author our_next query is a binary_digit more_complicated it still consists of a for where and return clause but in the where clause we have existential quantification and then in the return clause we're constructing our result in extensible_markup_language what this query looks for is books where the title of the book contains one of the author's first names for each of those books it returns the book title and the first name of the author so we again in our for clause bind dollar b to each each book in the database then in our where condition what we look for is a first name subelement of the book which gets bound to fn such that that the title of the book contains that first name so these as a existential quantified expression some in and satisfies our keywords so some binds to a variable which we bind in the set and then we check if any of those bindings satisfy this condition again i urge you to take a close look_at this you may want to pause the video once we've determined that our book satisfies the condition then in return clause we're constructing an extensible_markup_language element where the opening and closing_tags are book and then within that we return the title of the book and we return the first name of all authors of the book whew so let's run the query we find that there are two books satisfying the conditions where there is a first name in the title hector and jeff's_database_hints and jennifer's economical database_hints now there is tricky thing here which is that in hector and jeff's_database_hints that title does in fact contain a first name contains hector but it does not contain jeffrey our query returned the title of books satisfying the condition with every first name of an author of that book what we're going to do next is restrict the result of the query to only return the first names that are actually part of the book title what we're going to do is modify the second portion of our return statement to be a little_more complicated in fact we're gonna put an entire for return a query right inside the braces here in xquery we can mix and match queries and expressions as we wish so what i've done now is i'm again returning the title but in the second clause instead of returning all the first names i'm going to find the first names that are within the book and when the title contains the first name then i'll return that one so effectively i'm restricting the first names returned to just be the ones that appear in the title let's run the query and we can see that correctly jeffrey disappeared from the first book element returned our_next query again demonstrates a few new constructs first of all we'll be using the let clause in this query rather_than the for clause second of all we'll be showing some aggregation and finally we've embedded the full query inside extensible_markup_language so we've put averages opening and closing_tags for our result and within that we're putting our entire query our query says that we're going to assign the variable key list to the result of this expression so remember the for clause is an iterator while the let clause is an assignment so this expression is going to find all of the price attributes in the database assign it the p list as a list and then it will return the average of the elements in that list let's go_ahead and run the query and we see that our average book price is sixty five we can actually run this query in an even more compact fashion we can assign variable 'a' to be the average of this entire expression here and then we can just return 'a' not much more compact but perhaps a little_binary_digit more intuitive let's do that let's erase the answer to run the query again and again we get the same result now let's see a query where we use both the let and the for expressions in this query we're going to start_by assigning dollar a to the average book price just like we did in the previous query and then we're going to find all books where the price of the book is below average so we'll again as in previous queries assign dollar b one at a time to the books in our database and then for each one we'll check if the price is less_than the average price that we had from our let clause if it is we'll return the book element and we'll return the title of the book and we'll put as a subelement in this book element the price and here we can see where we're taking an attribute and we're turning it into an element so we have our attribute the price we obtain the data as we saw we needed to do in the x demo and we place it inside the price element let's run the query and we see indeed that we have two prices whose books are below average and here we've converted the price from an attribute to a sub_element as a reminder the flwor expression in xquery has a for let wear order by and return we see in all of the clauses except the order by so let's see the order by in this example we're going to find the title and prices of books just as we found before we'll convert the price to a sub_element but in this case we want to order the result by the price of the book so we do so by adding this clause here between the for and return saying we want to order by the price easy enough we run the query and we see out result actually it doesn't look quite right does it we have one hundred before and eighty five well that's because price is actually a string and so it was doing a lexical graphic ordering of the string we can fix that easily by calling a built in function called xs int that converts that value to an integer when we run the query now we get the correct ordering based_on the values of the price now that we've_seen ordering let's take a look_at duplicate elimination let's a query that finds all the last names in our database so we write a simple query that says for all names in the xpath expression that finds the last names and just as a reminder here we use the double_slash that looks at any depth in the extensible_markup_language tree and picks out the last names will return those last names and we know that these are our last names and we've_got many repeats of them because these last names appear several times in the database so let's see about getting rid of those repeats there is a built in function in xquery called distinct values so what we can do is add distinct values here in our for clause we can apply it to the last_name and now our dollar n will be bound to each value only once and then we'll return the result we run the query and we find that we have our three last names appearing only once but it's probably not quite what we wanted this time when we run distinct values it just turns these three values into three separate strings and the returns one at a time rather_than embedding them with the last_name tag which was what we got when we didn't use distinct values so if we want the last_name tag then we can add the last_name here to our return clause let's just put in the opening_tag and the closing_tag was put in for us so let's put dollar n here so now we've added opening and closing_tags to our previous query we run it and whoops what do we get we got dollar n this is a reminder that when we write a return clause if we want actually have an expression evaluated in the curly brackets so by putting dollar n in curly brackets here now the execution engine will actually evaluate this query and put the result within the opening and closing_tags we run the query and now finally we got exactly what we were looking for the three last names that appear in the database with the duplicates eliminated in a previous query we saw existential quantification in the where clause we were using the some keyword s o m e now we're going to see universal quantification in the where clause so for all and for that we use the every keyword what this query finds is books where every author's first name includes the letter j once again we use the for clause to bind b to every book in the database and then for each book we check our where clause our where clause requires that every first name that's a sub_element in that book satisfies the condition where the first name contains the letter j if we have such a book then we return it as a result of the query so now we can see that our result is a first course in database systems and jennifer's economical database_hints because for both of those all of the first names include the letter j this query demonstrates what i like to call a self join because it's combining two_copies of the book data specifically what the query is looking for are titles of books that share a common author and we'll assume we're just looking for common last names this is also the first query we're seeing where we have two_copies of the for clause so we're setting up two iterator variables essentially one called b and one called b that are both iterating over the books in the database if you'd like to think of this in relational terms it would be similar to having two_copies of the book table one of them bound to variable b and one to variable b then what we look for in the where clause is whether b and b have an author last_name in common and we do that by checking these two xpath expressions and seeing if they're equal now we saw this behavior in xpath and we're seeing it again here where the where clause has effectively an existential quantification occurring automatically what it's looking for is if there is some last_name under b that is equal to some last_name under b even if b or b have many last names in the case where that equality is satisfied then we will construct a book pair where we return the first title and the second title and here we're taking the titles which were originally attributes oh no i'm_sorry those were originally sub_elements we're taking those sub_element titles and we're calling them title and title so let's go_ahead and run the query and we did get a bunch of book pairs probably more_than we expected now all these books do in fact have a common common last_name in their authors but what we forgot to do was eliminate books with themselves because of course every book has in common a last_name with itself so let's modify our query so that we return only books where they are two different books and we can do that fairly easily by just saying b title is not equal to b title okay here we we go we run the query and we got an_error because i typed bluetooth instead of b let's run that again alright and now we see that we now are not getting the pairs of books with themselves we're still perhaps getting more_than we expected however what's going on well one thing we're seeing is that we're getting every pair twice in both orders if you take a look_at the data so this is a same old trick that you may remember back from the relational query examples instead of doing not equals let's try doing less_than in_other_words we're going to return each pair once and we're going to have the lexical graphically lesser book listed first now we've run the query again and now we see we actually got what we were expecting as our grand finale we're going to invert our bookstore database the way we set_up our extensible_markup_language data we had our books and then underneath our books we had the authors of the books what if we want to instead our data constructed where we have the authors as the outer elements and within each author we list the books that they've written now to understand this query you're absolutely going to need to pause the video let_me just briefly show what's going on but again it would take quite some time to go through every detail the way we are going to construct our inverted bookstore is to find the authors by last_name as the outermost portion of our query for each author's last_name we're going to get their first names and then we're going to return the author with the first name the last_name and next find all of the books that were written by that author return the book with their isbn price title okay again i urge you to pause the video and look very closely at what's going on or even better download the data in the query run it yourself and play with it until you understand it let's of the query and we'll see our result just scroll up a little_binary_digit here and we'll see how the query did effectively invert the bookstore now we have our authors as the outermost elements within each author the first one jeffrey_ullman we have the books that were written by that author including their isbn and price as attributes and the title as a sub_element now in my original version of the query i didn't include the edition or the remark since those didn't appear in every book but in fact it doesn't cause any problem at all to add those in so let_me just add right here the edition so we're using dollar b as our variable for the book and the edition is an attribute again not every book has an edition but we'll see that it's not going to cause a problem when it doesn't and similarly down here we'll include the remark again for those books that include them let's run the query and let's take a look_at our results and see what_happened so for jeffrey ullman's first book we got the edition for the second book we got the remark and everything just worked out just fine so again there is our inverted bookstore that_concludes our demonstration of the xquery language i'll again emphasize that it's a very_large language very_powerful we've seen a number of different constructs we've written some pretty interesting queries but to fully understand the language you'll need to run a bunch of queries for yourself and experiment with how it works in this video we'll introduce querying extensible_markup_language data using extensible_stylesheet_language_transformations as a reminder querying extensible_markup_language data is not nearly as mature as querying relational data due to it being much newer and not having a nice underlying algebra like the relational_algebra we already talked_about xpath which was the first language developed for querying extensible_markup_language data and we've also talked_about xquery which was actually developed after extensible_stylesheet_language_transformations but it's similar to xpath in it's style where extensible_stylesheet_language_transformations which we're going to cover in this video is actually quite different extensible_stylesheet language stands for the extensible stylesheet_language and it was introduced originally but soon extended to included transformations and extensible_stylesheet_language_transformations is currently much more widely_used than extensible_stylesheet language here's how we can think of extensible_stylesheet_language_transformations as a query language we have an extensible_stylesheet_language_transformations processor and we feed to that processor our extensible_markup_language data in the form of a document or a stream and we also give the processor a specification in extensible_stylesheet_language_transformations which by the way is expressed using the extensible_markup_language format the processor takes the data and the specification and it transforms the data into a result which is also expressed as an extensible_markup_language document or string now if we think_about traditional database query processing there's actually a natural mapping if we think even about relational processing we have a query processor and a database we feed the data to the query processor we feed the query to the query processor as_well and out comes the answer so extensible_stylesheet_language_transformations processing although it really is through transformations it can be thought of very much like querying a database so even_though extensible_stylesheet_language_transformations be thought of as a query language the query paradigm itself is quite different from what we're used to with structured_query_language or even with xpath or xquery it's based fundamentally on the notion of transforming the data and that transformation occurs with rules to understand what the rules do and how the transformations work it's again very instructive to think of the extensible_markup_language as a tree so let's take our bookstore data and again make it a tree as we did before when we were first learning_about xpath so we have some books sub_elements and we have a magazine sub_element and i won't be elaborating all of these we'll just imagine sub trees here with our book we have a title and we have some authors the title might be our leaf so we'll have a first course in database_systems for example whereas our authors may have author sub_elements and within those author sub_elements we might have first name name and last_name abbreviated here with string values for those and of course more authors sub_elements as_well so that give the basic_idea of a tree structure of extensible_markup_language exactly as we've_seen before so now let's see what_happens with extensible_stylesheet_language_transformations in light of this tree structure so the first thing that we have is the concept of matching a template and replacing it so the idea in extensible_stylesheet_language_transformations is that we can write an expression that finds a template that finds portion of the extensible_markup_language tree based_on template matching for_example we might find books that have certain authors and once we find those will actually replace the entire subtree with the result of what we put in our template for_example we might decide that want to pick the title here and replace this entire subtree with the title or we might match down to our authors and we might find our first name and last_name and say replace this entire author sub_element with the concatenation of the first and last_name again the idea being that you write templates that match within the tree using in fact xpath as we'll see as one of the portions of writing those templates and then replace that portion of the tree we can also do that recursively so we can for example decide that we're going to replace this book with a different element and then recursively apply our templates to its children we'll see that in a demo it takes a little getting used to again the extensible_stylesheet_language_transformations language has the ability to extract values and again it often uses xpath expressions in order to do that it also has some programming language like constructs it has a for each so we can do iteration and it has conditionals so we can do if all of these will be much better seen in the demo finally i'll have to mention that there's some somewhat strange behavior having to do with white space in extensible_markup_language data and some default behavior which we'll see in the demo and there's also an implicit priority scheme when we have multiple templates that can all match the same elements so let's move directly to the demo we're again going to be using our same bookstore data and we'll see a number of extensible_stylesheet_language_transformations examples even more_than xquery or xpath our examples will not be exhaustive but they will give a flavor of the language and you'll be able to express some fairly powerful queries using just what we show in the videos now let's see extensible_stylesheet_language_transformations in action let_me first explain what we have on the screen in the upper left window we have the document that we'll be querying over it's the exact same bookstore data that we've been using for all of our examples so i'm actually going to make that a lot smaller so that we can see our templates better in the upper right corner extensible_stylesheet_language_transformations templates and every example we're going to do is going to have us opening and closing a style sheet with some parameters is to tell_us how we'd_like to display our results and then i'll be putting different templates between those opening and closing_tags notice again that extensible_stylesheet_language_transformations is expressed using extensible_markup_language once we have our data and our set of template matching rules we'll run our transformation and in the bottom we'll see our result so you can think of it as a query in the upper right the data in the upper left and the result displayed in the bottom now even more_than xquery it's not going to be possible to explain every single intricacy of the templates that we're going to write so i again encourage_you to pause the video to take a look as_well as download the data file and the transformation file so that you can experiment with them yourself our first example is going to do some very_simple template matching it's going to look for book sub_elements and when it finds them it's going to replace those book sub_elements with a book title element the value of the title component of the book and a closing_tag book title and it's similarly going to match magazines of elements and replace those magazines of elements with an element that's an opening_tag of magazine title the value of the title sub_element of the magazine and the closing_tag so again the template will look through the extensible_markup_language tree they will match the sub_elements in the tree it'll match the book of elements and the magazine of elements and for each one it will replace those subelements with the expression in this case with our opening and closing_tags that have changed and the value of the title we run the transformation and we see indeed that the results are our four book titles now opening and closing_tags that are book titles and our four magazine titles for our next example we're going to only match books that satisfy a condition we do that by in our matching expression using xpath now there's one small strange thing here which is we can't write the less_than symbol we actually have to use the escape symbol for less_than but otherwise this template finds books whose price attribute is less_than just like we do in xpath using the square_brackets for conditions and when it matches those books what it does here is it copies those books so this is an important construct that says if i match the book i'll copy the book i'll select dot which the current_element so in effect it's saying find the books and retain them exactly as they are let's run the transformation and take a look_at what we get we can see that we got this book because it's price is and we have another book whose price is and another book whose price is but we do see something a little_binary_digit strange here we got our books so we also have these strings here these long bits of text that we well we don't really know where they come from well this is one of the peculiarities of extensible_stylesheet_language_transformations when you have elements in your database that aren't matched by any template what extensible_stylesheet_language_transformations will do is actually return the concatenation of the string leaf or text leaf values of those elements i know it seems kind of strange there's actually a simple fix for that we're going to add a second template that matches those text elements and for those returns nothing so here we've added a template and let_me explain what we're matching here is elements that satisfy the text predicates so that will match those leaf text elements and when we write a template that has no body so we open the template and then we close the template with no body at all that says match the element and then don't replace with anything at all so this is very useful construct the templates that don't have a body for getting rid of portions of the data we're not interested in so let's run the transformation now and take a look_at the result and now when we scroll down we see that all of that extraneous text that we saw in the previous example is now gone so as we've_seen extensible_stylesheet_language_transformations works by defining templates that are matched against the data when a portion of the data is matched by a template the template says what to do we might place that portion of data with something different and we might just remove that portion of the data from the answer or we might just copy it over into the answer now let's explore what_happens when we have portions of the data that are matched by more_than one template in our extensible_stylesheet_language_transformations specification so here we're going to have three templates the first two templates both match book elements the first template says when we match a book element just throw it away again this is an example of the template when we don't have a body that says eliminate the matched elements from the answer the second template says to do exactly the opposite says when we match a book sub_element keep that book sub_element exactly as it is as a reminder this body here says copy the current_element into the result our third template matches magazines and this one we just have one and it says copy the magazine into the result so let's go_ahead and run this transformation and see what_happens well first of all we got an ambiguous rule match so that's good the system recognized that we have two different rules that are matching the same element but then it did decide to give_us a result so let's take a look_at what_happened it did return in fact all of the books in the database as_well as all the magazines so we can see that it chose to use the second template instead of the first template when we had the ambiguity so let's try an experiment let's take our two book templates and let's just reverse their order so now we have the one that copies first and the one that eliminates second let's run the transformation and indeed something changed we no_longer got the books so what we can deduce from that is that when we have two templates that both match and we get this ambiguity warning it still does the transformation and it chooses the second of the matching transformations actually it turns_out not to be quite that simple it doesn't always choose the second one in this example we're going to change our first template to match only books whose price is less_than so we'll use the same syntax we used before that before we have to escape that less_than character like this less than close our score bracket so now our first transformation says when we find books that are less_than let's return them and when we find any book let's not return it so again we're going to have some ambiguity let's run the transformation well we actually didn't get an ambiguity error this time or warning and the reason is that extensible_stylesheet_language_transformations actually has a built in notion of some templates being more specific than others and when a template is more specific it is considered the higher priority template so what_happened when we ran this particular transformation is the books that where the price was less_than were matched by the first template and because that one's considered more specific they were not matched by the second template so we can see below that we did get back all of the books that are less_than and none of the other books and again we got back all of our magazines so let's make one last change to experiment let's take our second book and let's add to it a simple condition that's satisfied by every book which is the condition that the book has a title sub_element again this is xpath now perhaps our two rules have equivalent specificity in which we case we would again have ambiguity let's just delete our result here and then let's run the transformation and see what_happens indeed now we have an ambiguous rule match because both of these templates have a condition so they are considered equivalent again just when just like when neither of them had a condition and now that they're considered equivalent again the second one is going to take precedence because as you can see we didn't get any books in our result so even_though we have some books that are less_than those books also have a title so those books were matched by the second template and they were not returned so what you can see from these examples is that you do need to be very_careful when you write extensible_stylesheet_language_transformations programs or queries where multiple templates will match the same data now let's look_at a couple of different_ways of copying our entire input data as a result of our query our first example is the simplest one we write a template that matches the root_element of the document as you may remember from xpath a single slash is the root_element and then as the body we have that copy of template that copies the entire current_element let's run the transformation and we will see the we get our entire database as a result incidentally we could change that slash to be bookstore it would do exactly the same thing since our bookstore is our root_element okay delete this run the transform and once again we get the entire database as our result now i'm going to show action with a much more_complicated way of copying the entire document but it uses an important kind of template that we'll see in other contexts this template is our first example of recursively applying templates to our result what we have here is a template that matches absolutely anything in extensible_markup_language data this is actually an ex path expression that says math an element with star that means any element tag any attribute at star or any text leaf of the extensible_markup_language data so again this or construct here is seen quite frequently in extensible_stylesheet_language_transformations specifications to match just anything at all in the data when anything at all is matched that element of the data is copied and then the templates are applied recursively to everything below that's of any type so it may be best just to take my word for it or you can spend some time on your_own thinking about exactly why this works but again the idea that we match any type of element in our extensible_markup_language element attribute or text and we copy that object and then we apply the templates to all of its sub_elements recursively again copying them now obviously this is not the best the easiest way to copy an entire document we saw the easiest way to do it with our previous example but we'll soon see why this particular template is valuable when we run it of course we get back the entire document now the reason that this type of template is valuable is that we can use this as one of our templates and then add additional templates that give_us exceptions to copying the whole document and that will allow_us to copy the whole document except with changes in certain parts and what i'm adding here actually is a whole_bunch of additional templates so the first one says apply all templates recursively to link to the entire document the second says when you find while you're applying them recursively that you're at an attribute called isbn we'll change that to a sub_element so we'll match the isbn attribute we'll change it to a sub_element similarly to what we saw before by giving an open tag isbn and the value of the current_element we'll similarly take our attributes our price attributes and change them to sub_elements and our editions our months and our years and our magazine and last of all we'll also make a change to our authors when we match an author instead of having sub_elements we'll convert those sub_elements to be attributes the last_name attribute and the first name attribute so let's run the transformation and we'll see our data is now significantly restructured we have our bookstore and we have our books but our isbn numbers are now sub_elements and in our authors the last names and first names are attributes and all of the books are restructured in that fashion and our magazines again have attributes restructured as sub_elements now let's see what would have happened if we ran this extensible_stylesheet_language_transformations specification but we didn't have this mega template at the beginning that does the recursive application of templates to the entire database when we run the transformation now well we get a kind of surprising result we won't try to analyze it in its entirety it's a combination of only matching automatically of sub_elements and not attributes and furthermore dumping out all the text leaves like we saw in an earlier example so again presuming that we would not want this to be our result that shows the necessity of including the sort of generic template that matches every type of object in the database and recursively applies templates to its children now let's switch gears entirely what we're going to do in this transformation is effectively write a program we're going to use the for each and sorting and an if statement and the program is furthermore going to take the extensible_markup_language data and it's going to transform it into hypertext_markup_language which we can then render in a browser so it's just one template that matches the root_element of our document and once that root_element is matched it spits out the tag hypertext_markup_language it sets up the table so again we're actually writing the result here and put some headers for the table and then we see a for each that says we're going to run the body of the for each for each book in the database we're gonna sort the result by its price if the price is less_than then we're going to generate a row in the table and that row is going to be set_up with italics for the title and it's going to give the value of the price it's going to close the row and we're going to close all the tags so again this is quite different in a couple of ways first of all that it's written more in a programmatic style and second of all that the result actually going to be hypertext_markup_language let's run the transformation and we can see the result here which is indeed hypertext_markup_language in fact we can take this very hypertext_markup_language and we can render it in a browser and see how nice it looks and here it is we can see very beautifully formatted the three books that cost less_than sorted by price with the title in italics all formatted in an hypertext_markup_language table and that was with not a very complicated extensible_stylesheet_language_transformations program so it's not surprising that extensible_stylesheet_language_transformations is used frequently for for translating data expressed in extensible_markup_language to hypertext_markup_language format for rendering as_well as being used as a query language our last two examples are back to a more traditional template matching style again we're going to start with this recursive template match that matches everything in the database that_means we're gonna copy everything over except we're gonna make one type of change specifically we're going to change we're going to take jennifer out of the database and then we're going to change widom to ms widom so every place where we have jennifer as the first name and widom as the last_name we'll end up with just a name ms widom specifically we do it with two templates the first template says when we find a first name where the data in that first name equals jennifer okay so we're again are using the dot to refer to the current_element the data is a built in function so a first name that's equal to jennifer when we match that we want to we'll actually return nothing there's no body in this template so that will remove that element now you_might_wonder why we didn't just write a condition that said first name equals jennifer the problem is to write that condition the current_element would be the parent and we don't want to remove the parent we actually want to remove the first name itself in addition to removing first names that are jennifer we'll also match last_name templates where the value is widom and we will replace those with an opening_tag name the string is widom and a closing_tag name so let's run the transformation and let's take a look and we will see in the case where the author was jennifer widom it's now the single element name ms widom and we should see that occur a few other times in the database as_well as our very last example let's perform the same transformation but let's do it with just one template what we'll do is we'll look for office of elements where the first name equals widom now we don't need to use data so first name equals widom and we'll take those entire author sub_elements and we'll replace them with an author sub_element where the name is widom so we need to put author here let's get_rid of this automatic simply generated closing tab we want it to be over here we'll get_rid of this first template so again we're going to make exactly the same change but we're gonna do it with a single template it's going to look for authors where the first name is whoops better make that jennifer and it's going to replace them with the author sub_element with just ms widom we run the transformation and let's take a quick look_at what we got and we again see exactly the same result with a somewhat simpler program that_concludes our demonstration of extensible_stylesheet_language_transformations again we've shown only some of the constructs we haven't gone into great detail or walked through the syntax extensible_stylesheet_language_transformations is very_powerful we've seen quite a few different things we've also seen a little_binary_digit of non intuitive behavior we have to be a little careful with white space we have to be a little careful when we have multiple templates that match the same data but once we get it all figured out it can be quite_powerful for transforming data and for querying data this video talks_about data modeling and user_mode_linux the unified modeling language the area of data modeling consists of how we represent the data for an application we've talked a great length about the relational data_model its widely_used and we have good_design principles for coming up with relational schemas we also talked_about extensible_markup_language as a data_model extensible_markup_language is quite a binary_digit newer and there are no design principles that are analogous to the ones for the relational_model but frequently when people are designing a database they'll actually use a higher_level model that's specifically for database design these models aren't implemented by the database system rather they're translated into the model of the database system so let's draw a picture of that let's_suppose that we have a relational database_management system which is abbreviated relational database management system often and i'll draw that as a disk just out of tradition so if we create a database in a relational system the database is going to consist of relations but instead of designing relations directly the database designer we'll draw that up here will use instead a higher_level design model that model will then go through a translator and this can often be an automatic process that will translate the higher_level model into the relations that are implemented by the database system so what are these higher_level models historically for decades in fact the entity relationship model also known_as the er model was a very popular one but more recently the unified modeling language has become popular for higher_level database design the unified modeling language is actually a very_large language not just for database designs but also for designing programs so what we're going to look_at is the data modeling subset of user_mode_linux both of these design models are fundamentally graphical so in designing a database the user will draw boxes and arrows perhaps other shapes and also both of them can be translated generally automatically into relations sometimes there may be little human intervention in the translation process but often that's not necessary so in the data modeling subset of user_mode_linux there are five basic concepts classes associations association classes sub_classes and composition and aggregation we're just going to go through each one of those concepts in turn with examples so that class concept in user_mode_linux is not specific to data modeling it's also used for designing programs the class consists of a name for the class attributes of the class and methods in the class and that's probably familiar to you again from programming for data modeling specifically we add to the attributes the concept of a primary_key and we drop the methods that are associated since we're focusing really on the data modeling at this point so we'll be drawing our examples as usual from a imaginary college_admissions_database with students and colleges and students_applying to colleges and so_forth so one of our classes not surprisingly will be the student class and in user_mode_linux we'll draw a class as a box like this and at the top we put the name of the class and then we put the attributes of the class so let's_suppose that we'll just keep it simple we'll have a student_id a student name and for now the student's gpa and down here in user_mode_linux would be the specification of the methods again we're not going to be focusing on methods since we are looking_at data modeling and not the operations on the data and so one difference is that we'll have no methods another is that we specify a primary_key if we wish and that's specified using the terminology pk so we'll say that the student_id in this case is the primary_key and just as in keys in the relational_model that means that when we have a set of objects for the student class each object will have a unique student_id there will be no student ids repeated across objects in our college application database we're also likely to have a class for colleges so we'll have a class that we call college and for now we'll make the attributes of that class just the college name and the state and again in full user_mode_linux there might be some methods down here and we'll make the college name and this case be the primary_key so we're assuming now that college names themselves are unique so that's it for classes pretty straightforward they look a lot like relations and of course they will translate directly to relations next let's talk_about associations associations capture relationships between objects of two different classes so lets suppose again that we have our student class and i won't write the attributes now i'll just write it like that and we have our college class in our user_mode_linux design if we want to have a relationship that students apply to colleges we write that just as a line between the students and the college classes and then we give it a name so we'll call it applied and that says that we have objects in the student class and objects that are in the college class that are associated_with each other through the applied association if we want to introduce a directionality to the relationship so to say that student are applying to colleges we can put in a arrow there that's part of the user_mode_linux language although we'll see that it doesn't really make much difference when we end up translating user_mode_linux designs to relations when we have associations between classes we can specify what we call the multiplicity of those and that talks_about how_many objects of one class can be related to an object of another class so we'll see that we can capture concepts like one one and many one and so_forth so let's look specifically at how we specify those in a user_mode_linux diagram and for now i'll just use two generic classes so let's say i have a class c and i have a class c and let's say that i have an association_between those two classes so that would be a line and i could give that a name let's call it a let's say that i want to specify that each object in class c well i'm just going to write those objects kind of as dots here below the class specification let's say that i wanted to say that each one of those is going to be related to at_least m but at most n objects in class c so here are class c objects i'm going to have this kind of fan out in my relationship to specify that in the user_mode_linux diagram i write that as m and on the right side of the association line and again that's say each object then in c then will related to between m and n objects of c now there are some special cases in this notation i can write m dot_dot star and star means any number of objects so what that would see is that each object in c is related to atleast m and as many as it wants elements of c i can also write zero to end and that will say that each object in c is related to possibly none for example here we have one that i haven't draw any relations tips possibly none and up to n elements of c i can also write zero_dot_dot star and that's basic no restrictions on the multiplicity and just to mention the default actually is one_dot_dot one so if we don't write anything on our association we're assuming that each object is related to exactly one object of the other class and that's in both directions by the way so i can put a x y here and now we'll restrict how_many objects of element of c is related to incidentally user_mode_linux allow some abbreviations can be abbreviated as a just plain old one and can be abbreviated with just star so let's take a look_at our student and college example and what the multiplicity of the association of students_applying to colleges might be so let's_suppose that we insist that students must apply somewhere so they apply to at_least one college but they're not allow to apply to more_than and further more lets say that no college will take more_than applications so this example is contrived to allow me to put multiplicity specifications on both_sides so again we'll have our student class and we'll have our college class and we'll have our association_between the student and the college class and i'll just write the name underneath here now applied so lets think_about how to specify our multiplicities for this so to specify that a student must apply somewhere but cannot apply to more_than colleges we put a one_dot_dot five on this side it really takes some thinking sometimes to remember which side to put the specification on but that's what gives_us the fan out from the objects on the left to the objects on the right so it says each student can apply to up to five colleges and must apply to at_least one so we won't have any who_haven't applied_anywhere on the other side we want to talk_about how_many students can have applied to a particular college and we said it can be no more_than we didn't put a lower restriction on that so we would specify that as to so i_mentioned earlier that multiplicity of associations captures some of these types of relationships you might have learned about somewhere else called one to one many to one and so on so let_me show the relationship between association multiplicity and this terminology so if we have a one to one relationship between c and c technically one to one doesn't mean everything has to be involved what it really means is that each object on each side is related to at most one on the other side so to say it's a one to one relationship we would put a zero_dot_dot one on both_sides let's see if i can use some colors here so what about many to one many to one says that we can have many elements of c related to an element of c but each element of c will be related to at most one element of c so in that case we still have a zero_dot_dot one on the right side indicating that each c object is related to at most one object of c but we have the star on the left_hand_side indicating that c objects can be related to any number of c objects and as a reminder star is an abbreviation for zero_dot_dot star many to many has no restrictions on the relationships so that would be a star on both_sides pretty simple and the last concept is the idea of complete relationships so a complete relationship is complementary to these others it says that every object must participate in the relationship so we can have a complete one to one and that would be one_dot_dot one on both_sides we could have a complete many to one and that would be on the left_side one_dot_dot star and on the right side one_dot_dot one and finally a complete many to many would be one_dot_dot star on each side as a reminder the default if we don't specify the multiplicity is a one_dot_dot one both_sides so that would be a complete one to one relationship ok we've finished with classes and with associations now let's talk_about association classes association classes generalize the notion of associations by allowing us to put attributes on the association itself and again we'll use our example so we already knew how to specify that students apply to colleges but what if associated_with the application we wanted to have for example the date that they applied and maybe the decision of that application we don't really have a way to do that without adding a new construct and that construct is what's_known_as an association_class so we can make a class and we'll just call it app info and it looks_like a class it's got the box with the name at the top and the attributes and then we just attach that box to the association and that tells_us that each instance of the association_between a student and a college has additional_information a date of that application and the decision of that application now there's a couple of things i want to mention first of all in a number of examples i'll probably leave out the multiplicities on the ends of the associations that doesn't mean i'm assuming the default one one it's just when it's not relevant i'm not going to focus_on that aspect now when we have students associated_with colleges so we have a student here we have a college then we have an association_between those now what we're saying is that association is going to have affiliated with it a date and a decision what we cannot describe in user_mode_linux is the possibility of having more_than one relationship or association_between the same student and the same college so when we have an association that assumes at most one relationship between two objects so for example if we wanted to add the possibility that students could apply to the same college multiple_times so maybe you know that want to apply for separate majors that would actually have to be captured quite differently we'd have to add a separate class that would for the application information with separate relationships to the students and colleges so this is a in my mind a slight deficiency of user_mode_linux again that and it only captures at most one relationship between the two specific objects across the two classes now sometimes we can make a design that has an association_class and it turns_out we didn't really need it and we're going to come_back to multiplicities to see how this can happen so again let's take a look_at just generic classes c and c let's say that we have an association_between them and then we have an association_class we'll just call it alternating current and that's gonna have some attributes we can call them a and a for now and of course there's attributes in c and c as_well let's_suppose that the multiplicity on let's say the left_side is star so anything goes and on the right side we have one to one so what that multiplicity says is that each object of c is related to at most one object of c so actually exactly one object in this case so we know that there's going to be just one association for each object of c and if there's only going to be one association actually we could take these attributes and we could put those attributes as part of c instead of having a separate association_class so for example if this class happened to be the student class and this was the college class and we insisted that each student apply to exactly one college then the attributes we had down here the date and decision could be moved into the student class because we know they're only applying to one college so that would be the date and the decision for the one college they're_applying to furthermore if we had zero_dot_dot one we can still move these attributes here and in that case if a student was not involved in a college had not applied to a college at all or more generally an object of c was not related to any object of c then those attributes would have the equivalent of null_values in them by the way it is possible for an association to be between a class and itself for_example we could have our student class and maybe we're going to have an association called sibling a student being associated_with another student because they're siblings an association_between a class in itself is written with a line tgat just goes between the class and itself and then we could label that sibling and for multiplicities we can assume that every student has between and an arbitrary number of siblings lets say so we can put a star on both ends of that association a more interesting association might involve colleges where say we have for every college a flagship main campus but then some colleges have separate branch or satellite campuses so that would be an association_between a college and itself saying that one college is a branch of another college now let's think_about the multiplicities here first of all when we have a self association in user_mode_linux we're allowed to label the two ends of the association so i could for example say on one end we have the home_campus and on another end we have the satellite campus and now with those labels we can see the asymmetry and that lets us get our associations right so let's say that every satellite campus must have exactly one home_campus so that would be a one_dot_dot here and every home_campus can have any number of satellite campuses or actually let's say something else let's say every home_campus can have between zero and ten satellite campuses be a zero_dot_dot ten on that side of the self association ok we're finished with the first three let's move on to sub_classes for sub_classes we're gonna do a fairly large example that involves students that we're gonna separate into foreign students and domestic students we're also going to separately specify students_who have taken ap classes and those will be our ap students so we're going to have the student class as the top of our hierarchy and the student class will again have the student_id let's say the student name and gpa and we'll say the the student_id is the primary_key for objects in that class we're going to have three sub_classes one is going to be the foreign students we'll call it foreign s one is going to be the domestic students and then we're also going to have a sub_class for ap students and i'm going to assume that you already know a little_binary_digit about sub classing from programming so the idea is that when we have a sub_class there are attributes that are specific to the objects that are in that sub_class and they'll inherit the attributes from their super_class so we're gonna make student be a super_class here and this is how we draw it with three sub_classes here for foreign student domestic student and ap student and we'll say that foreign students have in addition to a student_id a student name and gpa a country that they come from we'll say that domestic students are going to have a state that they come from and we'll also say that they have a social_security_number which we don't know that foreign students would necessarily have ap students interestingly is going to be empty it's not going to have any additional attributes but the ap students are the students that are going to be allowed to have a relationship with ap courses we'll say that the ap course has a course number and that's probably the primary_key and maybe a title for the course and some units for the course and then when one of our ap students takes the course we'll call this association took we're going to have an association_class that goes along with that that's going to have the information let's called it ap info about them taking that particular ap class and we'll say that association_class has for example the year that they took the class and maybe the grade that they got in the class and lastly let's add some multiplicities let's say that ap students can take between one and ten ap classes but they taken at_least one to be an ap student and let's say that every course has taken by at_least one student and arbitrary number of students so this is one of the biggest user_mode_linux diagrams we've_seen so far again this is a superclass up here and we have our subclasses down here and then we also have an association and an association_class and some multiplicities and again notice that is ok that there are no attributes in the ap student sub_class that sub_classes define as those student who have taken ap course here are some terminology and properties associated_with sub_class relationships a super classes and user_mode_linux are sometimes called generalization with sub_classes called specialization and some sub_class relationship is said to be complete if every object in the super_class is in at_least one sub_class and it's incomplete if that's not the case and incomplete is also sometimes known_as partial a sub_class relationship is known_as disjoint if every object is in at most one subclass in_other_words we don't have any objects that are in more_than one subclass and that's sometimes called exclusive and if it's not disjoint then it's overlapping meaning that objects can be in multiple sub_classes we can have any combination of these pairs so we can have incomplete overlapping or incomplete disjoint a complete disjoint that are complete overlapping lets take a look back at our example for this example we will probably have the case that it's a complete subclass relationship in_other_words every student is in at_least one subclass presumably every student is either a foreign student or a domestic student and further more we're going to say that it's overlapping because we will have students_who for example are both a domestic student and an ap student and in user_mode_linux the actual notation is to put little curly_braces here to specify that that subclass relationship is complete and overlapping to illustrate some of the other cases let's_suppose that we didn't have this whole section here with the ap students we only had foreign and domestic students in that case we would say that the subclass relationship is complete but in that case it would not be overlapping it would be disjoint or suppose we didn't have this whole left_side here so all we had was the ap student subclass in that case it would probably be an incomplete complete subclass relationship because not everybody is an ap student and they wouldn't make any difference between overlapping and disjoints since there would be only one subclass in that case okay we've now made it to our last concept which is composition and aggregation let_me start_by clarifying right off that aggregation here has nothing to do with aggregation in structured_query_language well it's a completely different concept so let's first talk_about composition composition is used when we have a database structure where objects of one class kind of belong to the objects of another class and the example i_am going to use is colleges and departments so i've drawn the two classes here and let's say for the department we have the department name and we have say the building that the department is in and so we're assuming that each college has a whole_bunch of departments now we can make a relationship an association_between colleges and departments to say that the department is in a college but when we have the idea that the departments belong to a specific college then that's when this composition construct is used and the way the composition is written is by putting a diamond over here on the end of the association so composition is really a special type association and we'll fill in that diamond here to indicate composition aggregation happens to have an empty diamond which we'll see in a moment so when we have the diamond and we're creating one of these composition relationships there's implicitly a one_dot_dot one on the left_side so each department belongs to one college but what's kind of interesting here what's little different from the normal relationship is that we're not assuming that this department name is a primary_key exactly we could have this same department in fact even in the same building in different colleges and that would be okay because a department is through this relationship associated_with it's college so that was composition objects of one class belonging to objects of another let_me give an example of aggregation this is a slight stretch but what i'm going to make is a class of apartments not departments but apartments so we're going to imagine that there are apartment buildings represented in our database maybe they have an address that the primary_key and something like the number of units and what we're going to imagine is that some apartment buildings are owned by or associated_with the college but not all of them are and that's what aggregation does so for aggragation we again have a relationship here but in this case we make a diamond on this side that is open and what that says is that each apartment each object in the apartment class is belonging to a college either at most one college or no college at all so we can have apartments that belong to a college we can have kind of free floating apartments and that's what the open diamond which is aggregation is about so in conclusion the data modeling portion of the unified modeling language can be used to perform database design at a higher_level it's a graphical language we went through the five main concepts of the language and also very importantly user_mode_linux designs can be translated to relations automatically and that is the topic of the next_video in this video we're going to learn_about translating designs in the user_mode_linux modelling inter relational schemas as a reminder if the application developer is using a high_level design model then they will create their design usually using a graphical language that's sent to a translator and the translator will then produce a schema using the data_model of the underline database_management system which frequently is relational so in our case we're looking_at high_level design in the user_mode_linux data modeling subset which is then translated to relations and installed in a relational database system it's this translation process that's the topic of this video in the data_model of subset of user_mode_linux we have five concepts that we learned in the previous_video and we'll see now that designs using these concepts can be translated to relations automatically with one provision which is that every regular class has a key and we'll see what we mean by a regular class in a moment so what we're going to do is go through each one of these concepts one at a time and show show how the concepts are translated to relations for our examples we'll use primarily the same examples that we used in the previous_video where we introduced user_mode_linux for classes will have a student class and a college class our students have a student_id which is the primary_key a student name and a gpa and our colleges will have a college name which we'll assume is unique so that's the primary_key the state and the enrollment the translation from classes to relations is absolutely direct we take the student class and we make a relation called student we put the three attributes down for that relation and then the primary_key from the student class becomes the key attribute in that relation and similarly our college relation has the college name as a key the state and the enrollment so all we're doing to turn classes into relation is basically turning them side ways so now we're done with classes and let's move on to associations we'll see that each association is going to be translated to its_own relation that grabs a key from each side of the association so let's go to our example the same one we used earlier that has students_applying to colleges so here's our diagram with students_applying to colleges and we'll already have generated the two relations for our classes the student and the college relation and for the association applied between students and colleges we create a relation we call it applied and that relation has attributes the keys from both_sides so that would be the student_id from the student class and the college name from the college class and if you think_about it it makes a lot of sense applied is capturing relationships between students and colleges so we'll capture each of those relationships with one tuple in the applied relation identifying the student with the key and the college with the key now one question you might have is what is the key for a relation that we generate from an association it turns_out that depends on the concept of multiplicity that we learned about in the previous_video so let_me setup a generic example of two classes with an association and then and we'll talk_about multiplicity and keys ok so here we have both classes we'll call them c and c and each one has a key attribute we called it k and k over here and then one other attribute and and then we have an association a between the two classes so in terms of their relations that will be generated we'll have for c k with k as a key for c we'll have k with k as key and then for our association a we'll grab the key from each side k and k and the question we have now is what is the key for relation a well as a default the key can be both attributes together but in certain cases we can be more specific and again that's going to depend on the multiplicity on our association let's_suppose that our multiplicity is on the left_hand_side and a star on the right_hand_side and let's look_at what that represents in terms of the type of relationship we're capturing and i'll make_sure get it right this time so what this is saying here is that if we have objects of c on the left_hand_side each one can be related to many objects of c on the right_hand_side but each object of c can be only be related to at most one object of c and some of them might not be related to any so remember now it's these edges that are being captured by the tuples in our relation for the association and we can see that each element on the right_hand_side can only be involved in at most one tuple of a so that tells_us that k is actually a key for a so when we have zero_dot_dot one or one_dot_dot one for that matter on the left_side or on one side of an association then the key attribute from the other side is a key for the association so lets test out that rule on our student and college association and see if it makes_sense so i've drawn the association here and we're interested in the relation that's going to be generated for the association itself which will be the applied relation with the student_id on one side from one side and the college name from the other so that's the relation we're going to generate for the association and the question is what's key for that relation well let's add the constraint that every student applies to exactly one college so that would be a one_dot_dot one on the right and then a star on the left if a college can have any number of applicants so our rule of thumb it's actually a rule said that if we have one_dot_dot one or zero_dot one_dot_dot one on one side then the other side would be the key so that would tell_us that if we have this one_dot_dot one on the right that student_id would be a key for applied and indeed that makes complete sense if each student can only apply to one college then they will indeed be a in the applied relation now there's actually a related concept here where we might need a relation for associations at all and again that depends on multiplicity and again let's start with a generic example so here's our generic example and from this our standard translation would give_us three relations one for c one for c and then one capturing the association a which would have a key from each side now what we're going to discover is that in come cases it's actually possible to fold relations a into either c or c will end up with just two relation instead of three and will be capturing the same information so let's_suppose we have a and on our left_hand_side so again we're going to have the situation where from the left_side to the right we have a fan out so each one on the right is related to exactly one on the left if that's the case then instead of having a separate relation for the associations basically for capturing these edges here we can simply take the related element up from the left the key from the left and add it to the element for the right let_me show how that's done so what we'll do is we'll change this c to have k and o go to as before but also to have the key from the left_hand_side of class or relation so the key from c and then we don't need a any longer and we can see why that works because every element in c is related to exactly one element in c so we just add the key for that single element that is related to that relation now what if the left_hand_side were zero_dot_dot one instead of one_dot_dot one in that case it would be possible for there to be some elements in c that aren't related to any elements in c and that would still be okay with this design as long as null_values would be allowed in the third attribute of the relation for c and finally what's the key to this relation well we knew before that the key for c was k just by definition of it being the primary_key for the class and that's still the case in the expanded c k will still be a key because we'll only have one instance of each object and the one k one that it would be related to through the association so what we saw to summarize is that when we have zero_dot_dot one or one_dot_dot one on one aside and then we have an association and instead of making a relation for the association we can add the key from the side with the zero_dot_dot one or one_dot_dot one to the relation that we generated for the class on the right_hand_side so let's take a look again with students and colleges just to confirm this intuition so let's again suppose that a student applies to exactly one college and our rule of thumb says that we have a one_dot_dot one on one side then we can take the key from that side and add it to the relation for the other side so we would be adding to the student relation the college name attribute and we'd be getting rid of applied entirely let's just think_about if that makes_sense if every student is applying to exactly one college it makes perfectly good sense to just add that college name to the student relation and furthermore if we had students just applying to either zero or one college that would still be an acceptable design provided that null_values are allowed for the college name attribute ok we've finished with classes and with associations now let's talk_about associations classes association classes are pretty straight_forward we're not going to generate new relations more then we're just going to add attributes to relations that we're generating anyway so let_me use our usual example with the students and colleges and we'll add some information to their application ok so here's our user_mode_linux diagram we still have students_applying to colleges and then we've added an association_class which as you remember is attached to an association and it gives extra attributes for that association so here we're saying when a student applies to a college we'll have a date of that application and a decision of that application the first scheme that i've shown down here is what we would get if we use the techniques we've already learned without the association_class so the student class generates the student relation college generates college and then the applied association generates a relation that has a key from each side and by the way right now let's say that there's_no multiplicities or other information that's going to give_us special keys so in that case the applied relation doesn't have any keys other than the two attributes together and further more because we have no special multiplicities we won't be folding that relation into others as we showed in the previous example so now what do we do with our association_class well as you can probably guess it's quite simple all we do is extend our applied relation to include the attributes in the association_class so we just add date and decision right here and then we're all set now there's actually a few things i want to mention at this point first of all i discussed in the video on umo modeling the fact that umo assumes that when you have a relationship or an association_between two classes there's at most one instance of that association_between any two elements of the class and that is can be seen quite well in this relational scheme up because we're assuming we have a most one relationship between any student and any college and then we have associated_with that one relationship the date and the decision a second thing i wanted to talk_about at this point in time is the fact that we for an automatic translation require that we have a key for every regular class when i_mentioned that at the beginning of the video i wasn't able to motivate it very well but this example explains it pretty well when we want automatic translation the translation for an association requires a key from each side and each side is going to be a regular class in that case so we needed to have a student_id or some key for the student class and we needed a key for the college class in order to capture the association on the other_hand here the application info is not a regular class this is an association_class and we're just defining that as not regular and we don't need to have a key for this one because we're just adding their attributes to the relation for the association itself and the last thing that i wanted to mention is that the rules we saw for determining keys for the relation associated_with associations and for folding in the class and relations for associations also work when we have an association_class and it just goes naturally you just bring the attributes with the association_class along with the attributes that you have for the association you_might want to give that a try on an example just to see how it works but again it's pretty straight_forward now let's take a look_at how self associations are translated to relations it actually follows exactly the same rules but it's worth while looking_at to see exactly what_happens so here's our first example of association which was sibling relationships between students so in this case we generate the relation for the class as usual student_id name and gpa and then we generate a relation for our association just following the same that we already had when we had an association_between two different classes so we need to grab one key from each side well it's the same side that we're grabbing from so the one thing we need to do is just change the attribute names so that we have two_instances of the key attribute from the class but they have different names so you can see what we're doing here we're just saying that we have sibling relationship we take the student_id from the two students_who are siblings and that pair becomes a tuple in our sibling relation and because so we have stars on both_sides so we're not making any assumptions about multiplicities we don't have any zero_dot_dot ones or one_dot_dot ones then we don't have any key for the sibling relation except the two attributes together now the other example we had in self association was colleges being branches of other colleges so here's our college relation that we generate with the usual attributes and then we have our that's the key there we have our association which we're calling branch which takes a home_campus and a satellite campus and since we've labeled those two sides we can actually use those labels as the attributes for the relation we generate so we'll call it branch and we'll have home and satellite so that's saying that the satellite the campus on the the college on the right_hand_side is a satellite of the one on the left_hand_side now these values here will be college names that will be the domain that we're drawing from but we'll calling home and satellite to distinguish their roles in the association now what about keys we said before that every campus every satellite campus has exactly one home_campus so we write it that way and that a home_campus could have i think we said something like zero to ten satellite campuses but in terms of generating our relations the only really important thing is this one to one and if you remember what our rules said it said that if we have one one to one on one side then the other side is a key in the association relation so what that would tell_us is that satellite is a key here and that does make_sense so we'll only have each satellites home_campus listed once and but a home might have many satellites so the left_hand would not be a key ok we're getting there we finished the first three and now it's time for sub_classes this is a pretty big one first of all it turns_out that there's well atleast three and three commonly use translations from a sub_class relationship into relations so let_me setup a generic sub classing setup and then we'll talk_about the three different translation and when we might use which one so here's our generic set_up i had to draw it a little funny to fit it in the space s is our super_class and then we have two sub_classes s and s and just as a reminder what this says is that we have object of type s and they have a key attribute call k and another attribute call a and then we have sub_classes of those one called s which will have attributes k and a and will also have an attribute b and the difference to the sub_class as two that will have attributes k and a inherited from its parent and then an additional attribute c now there are three different_ways as i said atleast three that we could translate this user_mode_linux diagram to relations in the first way we have a relation for each of our classes including the sub_classes and the sub_class relations will contain their own attributes plus the key of the super_class in the second case we still have one relation for each of our three classes but in this case the sub_class relation contains all of the attributes from the super_class and then the third case we just use one mega relation for the whole thing that contains all of the super_class and sub_class attributes so let's take a look_at what the three different translations would produce for this particular setup for the first one we'll have our relation for s that's going to have k and a then we'll have one relation for each of the two sub_classes s that will contain the key for the super_class so it will be k and that will still be a key here for the sub_class and b so to find all components of an object of s will get it's a competent from the super_class following that key and then we'll get the b component from this relation and then finally say s will be similar it will have the key for the super_class and attribute c again what this will require is some assembly to get all attributes of the sub_classes now let's look_at the second translation we still have the super_class and our sub_classes now are going to contain all of the attributes that are relevant so they'll have the key attribute from the super_class they'll also have attribute a and attribute b and then s will similarly have k and then a and then c so in this case what we can see is that when we have an object that's in a sub_class all of it's information will be in it's sub_class relation and the super_class will only be used for objects that are in the super_class but not in any of the sub_classes and the third translation says let's just make a mega relation that contains everything so it will have the key attribute k and a and b and c and in that case we can see that we may have some null_values so if we have an object that's only in sub_class as one for example it would then have a null attribute c if we add an object that was only in the super_class and not in any of the sub_classes it would have a null for both b and c now as you may have noticed what has already been on the slide the entire time is that the best translation may depend on the properties of the sub_class relationship and if you remember we had the properties overlapping versus disjoint and complete versus incomplete so overlapping meant that we might have objects that were in more_than one sub_class disjoint meant that's not possible complete said that every object that's in the super_class and the super_class is also in at_least one of the sub_classes where incomplete said that there would be some objects or they could be they're in the super_class and not in any sub_classes sort of alluded to how some of those properties affect the different translations but let's look_at it very specifically let's_suppose for example that we had a heavily overlapping sub_class relationship in_other_words we have many objects that are in multiple subclasses if that's the case then we might prefer design three because design three captures all of the different attributes in one place so if many objects have all those attributes we might like to just have them together rather_than needing to assemble them from the different pieces on the other_hand let's say that we have have a disjoint and furthermore let's say it's complete so we have every element being in exactly one subclass and there are no elements elements that are in just the super_class so in that case we might like to use design two because design two puts each object in individual subclass relation and furthermore since it's complete we could actually in this particular case get_rid of the first relation we wouldn't need that and so the best design would be number modified to only have the subclass relations so now let's revisit our gigantic example from the user_mode_linux modeling video and see how that would be translated to relations so just to remind_you what's going on in this big diagram we have students and students have a student_id and a name and then some of our students might be foreign students and they have a country some of our students may be domestic students and that they would have a state and a social_security_number we'll assume that every student is either foreign or domestic and then some of our students are ap students and interestingly they have no attributes but those are the ones who have an association called took with ap courses ap courses have a course number and a title and then when a student takes an ap course there's an association_class that says the year they took it and the grade they got so let's translate this to relations the whole diagram and we're going to use the first translation from our three schemes so that's the one where the sub_class relations contain the super_class keys and then all the specialized attributes so let's start_by generating the relation for the student class and that's straightforward that's just the student_id and the student name with the student_id being the key and then we're going to generate one relation for each of our three sub_classes so that would be the foreign students which will take the key then from the student relations so their student_id and the country that they're from they'll be the domestic students and there we'll have again the student_id inherited from the super_class and the state they're from and their social_security_number and then we'll also have the ap students and those have none of their own attributes but we can get the key and we do from the super_class so this is just going to be a list of the student id's who are ap students now let's keep going so let's take a look_at ap students taking courses so we'll have from the ap class a straight_forward translation to the course number and the title of the course and then finally we're going to have a relation for the fact that a ap student took classes we had some multiplicities on that the first time but neither of them were a zero one or one one so they're not going to be relevant in changing our design so took is going to have the key from both_sides well we don't see any key in here do we but subclasses always inherit the key from their parents so the key here is implicitly the student_id and that's what we'll be using here student id the key from the right_hand_side the course number that they've taken and then we'll have the two attributes from the association_class the year and the grade so this actually looks_like a pretty good_design let_me just make a few comments the first one has to do with the ap student relation so if every ap student does have to does have to take at_least one course so if we have for example a one_dot_dot something over there then we could actually eliminate it's relation because every student_id that appears in ap student will also appear in the took relation so this one will be redundant in that case so again that could be eliminated based_on the multiplicity though i wouldn't really expect an automatic translator to necessarily figure that one out another possibility i should mention is that we could have a primary_key specified here for domestic students for social_security numbers since we would expect that to be unique and that would translate to a key here but let_me be clear this would be a separate key it wouldn't be social_security_number and student_id together but these would be two different keys and in structured_query_language you can actually distinguish between those two but we can't do it the way we've written the relations here and finally let_me_mention again that requirement that we have keys for regular classes if we want to do translation automatically and you might have noticed that for example we certainly didn't have a key here for a foreign student with country being the only attribute but subclasses are also not considered regular classes so subclasses and association classes don't need to have keys and we can still have an automatic translation logically subclasses are inheriting their keys from their super_class and that one does need to have a key in order to have automatic translation so that was a big one but you'll be glad to know that composition and aggregation is going to be quite quick so here is our example where we have our college class as usual but colleges contain departments and this solid diamond here is the composition operator that says that we have objects from the right_hand_side class that are components of the left_hand_side objects so let's look_at the translation to relations we'll translate the college side as usual with a key attribute college name and the other attributes and then although this is an association we're not going to have a separate class for it we're going to have the right_hand_side class have both the values of the object in that class and the association captured together so we'll have a relation called department and it will have the department name and the building and then it will also include the key of the object it belongs to so in this case that would be a college name now if you think carefully about it this translation actually makes a lot of sense and is consistent with what we've already done we said when we introduced the notion of composition that we have effectively have by definition a one_dot_dot one on the left_hand_side of the composition so if we treated this as a regular association used our regular translation and then used our rule that allowed us to get_rid of association relations we'd actually end up at exactly the same design by the way this is a last example where we have a class that's not one of those regular classes that require a key we don't have to have a key for the right_hand_side of a composition in order to have an automatic translation aggregation by the way was the case where we have the mc diamond and that's implicitly a zero_dot_dot one instead of one_dot_dot one we had an example with apartment buildings i'm not going to bother to give that one again but in that case where we have an aggregation should have in an association all we need is the same design but the ability for that key we're grabbing from the left_hand_side to be null and then everything works out fine so to conclude the data modeling portion of user_mode_linux is a popular high_level language for database designs it's graphical and it can be translated automatically to relations as long as every regular class has a key and that typically is the case this video talks_about indexes it's actually a relatively short video about a very_important topic before i get started however let_me_mention that indexes are also sometimes prefer two as indices those are equivalent i personally prefer using the term indexes the reason indexes are so important is that they are the primary way of getting improved performance out of a database indexes are a persistent data structure they're stored together with the database itself now there are many very interesting implementation issues in indexes but in this video and in this course in general we're focusing on the perspective of the user and application so we'll talk_about how applications will use indexes to speed_up performance so let's_suppose we have a very_simple table t that has three columns but we're going to focus_on columns a and columns b and we can see that column a is a string valued column with animal names and column b is an integer column now we're gonna be asking queries that involve conditions over these two columns in order to speed_up those queries if we're concerned about evaluating conditions on column a then we can build an index on that column so we call that an index on column t a what that index allows_us to do and us in this case is actually the query processor is ask questions for example let's ask what tuples have cow in the value of t a if we ask that question of our index that that index will quickly tell_us that tuple and tuple have a value cow without scanning the entire table we could also ask the index what tuples have say value cat and if we ask the index that question it will tell_us tuple and tuple and tuple have the value cat if we're interested in evaluating conditions in column b then we can also build an index on column b for_example now we could ask questions like when is t b equal to the value two we asked the index and the index will tell_us that tuple and tuple have the value two we could also ask for example when the value in t b is less_than six and the index in that case would tell_us that tuple is less_than six two wow most of them three five and seven we could ask an even more_complicated question we could ask when the value for t b is say greater_than four and less_than or equal to eight again we ask the index and in this case the index would tell_us that it is tuple two and tuple seven in that case lastly suppose we're interested in having conditions that are on both columns a and b then we can build an index that is on both columns together now we could ask questions for example like when is t a equal to cat and t b say greater_than five do we have any of those well we have just one of them there that's tuple six we could also have inequalities by the way on the first column so we might ask when is t a less_than say the value d and t b equal to say the value and in that case we'll get the tuple as a result so i think this gives an idea with a simple table of how indexes are used to go directly to the tuples that satisfy conditions rather_than scanning the entire table so that's the main utility of an index again the tables can be absolutely gigantic in databases and the difference between scanning an entire table to find that tuples that match a condition and locating the tuples more or less immediately using an index can be orders of magnitude in performance difference so really it's quite important to take a look_at the database and build indexes on those attributes that are going to be used frequently in conditions especially conditions that are very selective now i_mentioned that we're not covering the implementation of indexes in this video but it is important to understand the basic data structures that are used specifically there are two different structures one of them is balance trees and substantiation of that is typically what's_called a b tree or a b tree and the other is hash tables now balance trees indexes can be used to help with conditions of the form attribute equals value they can also be used for attribute less_than value for attribute between two values and so on as we have shown earlier hash tables on the other_hand can only be used for equality conditions so only attribute equal value and if you're familiar with these structures then you'll know why there's the limit on hash tables so balanced tree indexes are certainly more flexible now there is one small downside for those of you who are familiar with the structures and with the running time the operations on the balance trees tend to be logarithmic in their running time while well designed hash tables can have more or less constant running time even in large databases logarithmic is okay although when only equality conditions are being used then a hash table index might be preferred now let's take a look_at a few structured_query_language queries and see how indexes might allow the query execution engine to speed_up processing we'll use our usual student and college database the first one is a very_simple query it's looking for the student with a particular student_id so if we have an index on the student_id then again the index will allow the query execution engine to go pretty_much straight to that tuple whereas without an index the entire student table would have to be scanned now let_me_mention that many database_systems do automatically build indexes on primary keys so it's likely that in an application the student_id would be declared as a primary_key and there would be an index automatically but it's a good thing to check if this type of query is common and some systems even also build indexes automatically on attributes that are declared as unique as a reminder from the constraint video every table can have one primary_key and then any number of additional keys labeled as unique now let's take a look_at a slightly more_complicated example here we're looking for students_whose name is mary and whose_gpa is greater then and there may be a few of those students so one possibility is that we have an index on the student name and if that is the case expand the query processing can find quickly the tuples whose student name is mary and then check each one of those to see if the gpa is greater_than alternatively we might have an index on the gpa in that case the system will use the index to find the students_whose gpa is greater_than and then look to see if their name is mary finally it is possible we can have an index on the two attributes together so we can have s name and gpa together and then this index can be used to simultaneously find students that have the name mary and the gpa greater_than now i should mention that because this is an inequality condition it is important that the gpa is a tree based index in order to support that evaluation of this condition where the student name is an equality condition so that could be a hash based index or a tree based index now let's look_at a query that involves a joint we're joining the student and apply tables in order to find the names of the colleges that each student has applied to and we're returning the student name and the college name so let's_suppose for starters that we had an index on the student_id attribute of the apply relation if that's the case then the query execution engine can scan the student relation and for each student use that sid and quickly find the matching sids in the apply relation alternatively let's_suppose we had an index on the sid attribute of the student relation in that case the system could scan the apply relation and for each student_id and each apply tuple find the matching student ids in the student tuple using the index that we have there in some cases it's actually possible to use the two indexes together and make the query run even faster i'm not going to go into detail but indexes often allow relations to be accessed in sorted order of the indexed attributes so suppose we can get the student relation in sorted order and the apply relation in sorted order then we can kind of do a merge like operation of the two indexes to get the matching student and apply records those whose sids are equal if we had additional conditions in the query there might be even more choices of how to use indexes and that gets into the entire area of what is known_as query planning and query optimization and this is actually one of the most exciting and interesting areas of the implementation of database_systems and is what allows_us to have of a declarative query language that's implemented efficiently so indexes seem like great things we just throw some indexes onto our data and all of a sudden our queries run much much faster so there must be some downsides and of course there are let_me list three of them from sort of least severe to most severe so the first one is that indexes do take up extra space as i_mentioned they are persistent data structures that resides with the data i consider this sort of a marginal downside especially with the cost of disk these days its really not that big of deal to use additional space even to potentially double the size of your database the second downside is the overhead involved in index creation so when a database is loaded if we're going to have indexes those indexes need to be created over the data or if we add indexes later on they need to be created index creation can actually be a fairly time consuming operation so i'm going to make this as a medium downside on the other_hand once the index is created all the queries run faster so it's usually worthwhile to do it the last one is the most significant one and that's the issue of index maintenance so the index is a data structure that sits to the side of the database and helps answer conditions when the values in the database change then the index has to be modified to reflect those changes so if the database is modified frequently each of those modifications is going to be significantly slower than if we didn't have indexes so in fact in a database that's modified a whole_bunch and not queried all that often the cost of index maintenance can actually offset the benefits of having the index so it really is a cost benefit trade off to decide when to build indexes so given that we have this cost benefit trade off how do we figure_out which indexes to create when we have a database an applications on that database the benefit of an index first of all on how big the table is since the index helps us find specific portions of the table quickly it depends on the data distributions again because the index helps us find specific data values quickly and finally how often we're going to query the database first of all it's how we're going to update it as i_mentioned every time the database is updated indexes needed to be maintained and that's costly every time we query the indexes may help us answer our queries more quickly fortunately over the last decade or so many database system vendors have introduced what's_called a physical design_advisor in this case physical design means determining which indexes to build on a database the input to the design_advisor is the database itself and the workload the workload consists of the sets of queries and updates that are expected to be performed on the database as_well as their frequency now actually the design_advisor doesn't usually look_at the entire database but rather looks at statistics on the database that describe how large the tables are and their data distributions the output of the design_advisor is a recommended set of indexes to build that will speed_up the overall workload interestingly physical design advisors rely very heavily on a component of database_systems that already existed actually one of the most_important components of database_systems which is the query optimizer that's the component that takes a query and figures out how to execute it specifically it'll take statistics on the database the query to be executed or the update_command and the set of indexes that currently exist and it will explore the various ways of actually executing the query which indexes will be used which order things will be done in it estimates the cost of each one and it spits out the estimated best execution plan with the estimated cost so now let's look_at how this component can be used to build a design_advisor let's just draw the design_advisor around the whole thing here and the input to the design_advisor again are the statistics and the workload and the output is supposed to be the indexes so what the design adviser actually does is it experiments with different set ups of indexes for each set_up of indexes it takes the workload it issues the queries and updates to the query optimizer it doesn't actually run them against the database and see's what cost the query optimizer produces it tries this with different configurations of indexes and then in the end determines those indexes that bring down the cost the most in_other_words it will give you back those indexes where the benefits of having the index outweigh the drawbacks of having that index in terms of the workload and using the costs that were estimated by the query optimizer if you're using a system that doesn't have a design adviser then you'll have to kind of go through this process yourself you'll have to take a look_at the queries and updates that you expect how often you expect them to happen and which indexes will benefit those queries and hopefully won't incur too much overhead when there are updates just quickly here's the structured_query_language standard for creating indexes all indexes are given names we can create an index on a single attribute we can create an index on several attributes together we can also say that we want our index to enforce a uniqueness constraint so when we add the word unique it sort of adds constraint enforcement it says we're going to check that all values for a are unique using our index and will generate an_error if there are two values that have the same two tuples that have the same value for a and finally we have a command for dropping indexes in summary indexes are really important they're the primary way to get improved performance on a database by building the right indexes over a database for its work flow we can get orders of magnitude performance improvement although we do have to be careful because there are trade offs in building indexes especially for databases that are modified frequently there are persistent data structure that are stored together with the database and there are many interesting implementation issues but in this video and course we're focusing specifically on the user and application perspective determining which indexes to build and how they will gain performance improvement for us this video introduces the concepts of transactions and interact actions with database_systems transactions are a very_important concept the concept of transactions is actually motivated by two completely independent concerns one has to do with concurrent access to the database by multiple clients in this video we'll delve into more_detail about the properties of transactions as a reminder transactions are a concept that's been introduced as a solution to both the concurrency control problem and the system failure problem in databases specifically a transaction is a sequence of operations that are treated as a unit transactions appear to run in isolation even if many clients are operating_on a database at the same time and further more if there is a system failure in unexpected software hardware or power failure every transactions changes that were issued to the database are either reflected entirely or not at all every database connoisseur knows that transaction support what are known_as the atomicity consistency isolation durability properties although not everybody always remembers what a stands for atomicity c stands for consistency i stands for isolation and d stands for for durability and we're going to talk_about each of these four properties in turn we're going to talk_about isolation first we're going to talk_about durability second then we'll next talk_about atomicity and we'll conclude talking_about consistency so here's the deal with isolation we'll have a whole_bunch of clients operating_on our database and we'd kind of like each client to imagine that they're operating_on their own so as we discussed in the previous_video each client issues to the database system a sequence of transactions so this first client might be issuing first transaction t then t t and so on over here we have t t t and as a reminder each transaction itself can be a sequence of statements so this might be statement one statement two statement three and so on and then those statements will be treated as a unit so the isolation property is implemented by a very specific formal notion called serializability what serializability says is that the operations within transactions may be interleaved across clients but the execution of those operations must be equivalent to some sequential serial orderof all the transactions so for our example over here the system itself may execute all of the statements within each transaction and over here concurrently but it has to guarantee that the behavior against the database is equivalent to some sequence in order again so perhaps the equivalent sequential order will be as if the system first did transaction t then may t t and t maybe back to t and so on and again the system has to guarantee that the state of the database at this point in time even if its internally the statements within any of these transactions looks as if these transactions executed in order now you_might_wonder how the database system could possibly guarantee this level of consistency while still inter leading operation it uses protocols that are based_on locking portions of the database now we're not going to describe the implementation because implementation aspects are not the focus of this course what you need to know from a user's application perspective is really the properties that are being guaranteed now with the formal notion of a let's go_back and look_at the examples from the previous_video that motivated the problems we could get into with concurrent access the first one was the example where two separate clients were updating standford's enrollment let's just call one of them t it's not a transaction and the other t so when we run thing is against the system and serializability is guaranteed then we will have a behavior that is at_least equivalent to either t_followed_by t or t_followed_by t so in this case when we start with our enrollment of either execution will correctly have a final enrollment of solving our concurrency problems here's our second example in this case the first client was modifying the major of student in the apply table and the second was modifying the decision and we saw that if we allowed these to run in an interleaved fashion it would be possible that only one of the two changes would be made again with serializability we're going to get behavior that guarantees it is equivalent to either t and then t or t and then t and in both cases both changes will be reflected in the database which is what we would like the next example was the one where we were looking_at the apply and the student table and we were modifying the apply table based_on the gpa in the student table and simultaneously modifying that gpa so again if these are issued as two transactions we'll have either t_followed_by t or t_followed_by t or at_least we will have behavior that is equivalent to that now this case is a binary_digit interesting because either of these does result in a consistent state of the database in the first case we'll update all the decision records before the gpas are modified for anyone and in the second case will update the apply records after the gpas have been modified the interesting thing here is that the order does matter in this case now the database_systems only guarantees serializability they guarantee that the behavior will be equivalent to some sequential order but they don't guarantee the exact sequential order if the transactions are being issued at the same time so if it's important to get say t before t that would actually have to be coded as part of the application and our last example was the case where we had the apply table the archive table and we were moving records from one table to another in one of our clients and the other client was counting the tuples and again so t and t they're issued as transactions the system guarantees that we'll either move all the tuples first and then count them or will count the tuples and then move them now again here's a case where the order makes a difference but if we care specifically about the order that would have to be coded as part as the application ok so we've finished our first of the four atomicity consistency isolation durability properties the other three will actually be quite a binary_digit quicker to talk_about let's talk now about durability and we only need to look_at one client to understand what's going on so let's say that we have our client and the client has issuing a sequence of transactions to the database and each transaction again is a sequence of statements and finally at the end of the transaction there is a commit so what durability guarantees for us is that if there is a system crash after a transaction commits then all effects of that transaction will remain in the database so specifically if at a later point in time after this occurs there's a failure for whatever_reason the client can rest assured that the effects of this transaction are in the database and when the system comes back up they will still be in there so you may be wondering how it's possible to make this guarantee since database_systems move data between disc and memory and a crash could occur at anytime they're actually fairly_complicated protocols that are used and they're based_on the concept of logging but once again we're not gonna talk_about the implementation details what's important from the user or application perspective is the properties that are guaranteed properties down now let's talk_about atomicity again we'll only look_at one client who's issuing a sequence of transactions to the database and let's look_at transaction t which itself is a sequence of statements followed_by commit the case that atomicity deals with is the case where there's actually a crash or a failure during the execution of the transaction before it's been committed what the property tells_us is that even in the presence of system crashes every transaction is always executed either all or nothing on the database so in other_words if we have each of our transactions running it's not possible in a system crash to say have executed on the database a couple of statements but not the rest of the transaction now once again you might be wondering how this is implemented it also uses a log in mechanism and specifically when the system recovers from a crash there is a process by which partial effects of transactions that were underway at the time of the crash are undone now applications do need to be somewhat aware of this process so when an application submits a transaction to the database it's possible that it will get back an_error because there was in fact a crash during the execution of the transaction and then the system is restarted in that case the application does have the guarantee that none of the effects of the transaction were reflected in the database but it will need to restart the transaction now let's come_back to the fact that the system will undo partial effects of a transaction to guarantee the atomicity property that each transaction is executed in an all or nothing fashion so this concept of undoing partial full effects of the transaction is known_as transaction roll back or transaction abort and the reason i'm mentioning it here is that although it is the implementation mechanisms for atima city it's also an operation that's exposed by the database in an application would like to use it specifically a transaction rollback can be initiated by the system in the case of an_error or a crash recovery but it also can be client initiated and let_me give a little example where a client might write code that takes advantage of the operation so here is some toy application code in this code the client begins a transaction it asks the database user for some input it performs some structured_query_language commands maybe some modifications to the database based_on the input from the user it confirms that the user likes the results of those modifications and if the user says okay then the transaction is committed and we get an atomic execution of this behavior but if the user doesn't say okay then the transaction is rolled back and automatically these structured_query_language commands that were executed are undone and that frees the application from writing the code that undoes those commands explicitly so it can actually be quite a useful feature for clients to use but clients do need to be very_careful because this rollback command only undoes effects on the data itself in the database so if perhaps in this code the system was also modifying some variables or even worse say delivering cash out of an asynchronous transfer mode machine the rollback command is not going to undo those it's not gonna modify variables and it's certainly not going to pull that cash back into the asynchronous transfer mode so there actually is another issue with this particular client interaction that i_am going to put a frownie face here it was a nice simple example of how rollback can be helpful but one thing that happens in this example is that we begin a transaction and then we wait for the user to do something and we actually wait for the user back here so experienced database application developers will tell you to never hold open a transaction and then wait for arbitrary amounts of time the reason is that transactions do use this locking mechanism i alluded to earlier so when a transaction is running it may be blocking other portions blocking other clients from portions of the database if the user happened to go out for a cup of coffee or is going to come_back in a week we certainly don't want to leave the database locked up for an entire week so again and a general rule of thumb is that transactions should be constructed in a fashion that we know they are going to run to completion fairly quickly finally let's talk_about consistency the consistency property talks_about how transactions interact with the integrity_constraints that may hold on a database as a reminder and integrity constraint is a specification of which database states are legal transactions are actually very helpful in the management of constraints specifically when we have multiple clients interacting with the database in an interleaved fashion we can have a setup where each client can assume that when it begins it operates on a database that satisfies all integrity_constraints then each transaction then sorry each client must guarantee that all constraints hold when the transaction ends and that's typically guaranteed by the constraint enforcement sub system now with that guarantee since we have serialized ability of transactions that guaranteesthat constraints always hold specifically the behavior of the database is some sequential order of the transactions we know and we can assume at the start of the transaction the constraints hold and then we guarantee they hold at the end and since the behaviors equivalent to a sequential order then the next transaction can assume the constraints hold and so on in conclusion transaction are a very_powerful concept they give a solution for both concurrency control and system failure management and databases they provide formally understood properties of atomicity consistency isolation and durability in the next_video we are going to focus more on the isolation property we're going to see that in some cases we may want to relax the notion of isolation while still providing properties that are sufficient for applications in certain circumstances in this final video about transactions we'll focus_on the concept of isolation_levels as a reminder transactions are a solution for both the concurrency control and system failure problem in databases a transaction is a sequence of one or more operations that's treated as a unit transactions appear to run in isolation and if the system fails each transaction changes are reflected either entirely or not at all on this video we are going to focus_on the isolation portion of transactions as a reminder we can have multiple clients operating_on the same database and each client will submit a sequence of transactions so we have this client with t t here we have t t t and so_forth and each transaction itself is a sequence of statements serializeability says that it's okay for the system to inter leave the execution of these statements with the statements that are being performed by other clients however the behavior against the database must be equivalent to the transactions themselves executing in some serial order for_example in this case the system may enforce behavior that's equivalent to say doing transaction t first then maybe t t and then t and so on serializability give_us understandable behavior and consistency but it does have some overhead involved in the locking protocols that are used and it does reduce concurrency as a result of the overhead and reduced concurrency systems do offer weaker isolation_levels in the structured_query_language standard there are three levels read_uncommitted read committed and repeatable_read and these isolation_levels have lower overhead and allow higher concurrency but of course at a cost which is lower consistency guarantees i've listed the three alternative isolation_levels from the weaker to the stronger and to complete the picture at the bottom we have a fourth one which is serializable which is what we've been talking_about already before we proceed to learn_about the different isolation let_me_mention a couple of things first of all the isolation level is per a transaction so each client could set different isolation_levels for each of its transactions if it wishes second of all isolation_levels are in the eye of the beholder and let_me show you what i_mean by that so each client submits transaction to the database and might set the isolation_level for that transaction that isolation_level only affects that transaction itself it does not affect the behavior of any other transactions that are running concurrently so for example our client on the left might set its transaction to be a repeatable_read while our client on the right will set it's transaction to read_uncommitted and those properties will be guaranteed for each of those transactions and won't affect the other by the way the isolation_levels really are specific to reads they specify what values might be seen in the transaction as we'll see when we get into the details so let's start_by defining a concept called dirty_reads a data item in the database is dirty if it's been written by a transaction that has not yet committed so for example here are two transactions i'll call them t and t and by the way throughout the rest of this video i'm going to put transactions in boxes and you can assume implicitly that there is a commit at the end of each box i'm not going to write it each time so our first transaction is updating standford's enrollment adding to it and our second transaction is reading the average enrollment in the college table we're using our usual database of students_applying to colleges so after this enrollment standford's enrollment has added to it but before the transaction commits at that point in time the value is what's_known_as dirty if our second transaction here reads this value then it might be reading a value that never actually exists in the database and why is that because before this transaction commits there could be a system failure and the transaction could be rolled back as we described before and all of it's changes undone meanwhile however the second transaction may have read that value before it was undone here's another example now we have three transactions t t t our first transaction is modifying the gpa of student's who's high_school_size is sufficiently large our second transaction is finding the gpa of student number and our third transaction is modifying the high_school_size of student so if this gpa here in transaction t is read before the commit of transaction t then that would be a dirty value for the gpa again because of this first transaction doesn't commit then that value will be rolled back there's a second case where we might have dirty data read in this trio of transactions and that's the size_high_school here because notice that here we're modifying a high_school_size so if this size of high_school is read before the commit point of the third transaction that would also be a dirty data item one clarification about dirty_reads is that there is no such thing as a dirty read within the same transaction in t for example after we've modified the size_high_school we might read the size_high_school later in the same transaction and that's not considered a dirty read so a read is only dirty when it reads a uncommitted value that was modified by a different transaction so here's our first isolation_level and it's our weakest one it's called read i'm committed and what is says is that a transaction that has this isolation_level may perform dirty_reads it may read values that have been modified by a different transaction and not yet committed so lets take a look_at an example it's our same example we've dropped the third transaction so our first transaction is modifying gpas in the student table and our second transaction is reading average of those gpas so if these transactions are serializable then it'll be the behavior's guaranteed to be equivalent to either t_followed_by t or t_followed_by t so either the second transaction will see all the gpas before they were updated or it will see all the gpas after they were updated as a reminder we don't know which order these will occur in only that the behavior will be equivalent to one of those orders now let's_suppose we add to our second transaction a specification that it has isolation_level read_uncommitted and by the way this very long sentence is how we specify the isolation_level in the structured_query_language standard now when we don't specify an isolation_level as we haven't here the default is serializable although in most of our examples it won't actually matter what the first transaction's isolation_level is as we'll see we're going to be focusing on the data that's read in the second transaction and typically written in the first transaction okay so let's see what's going on here again this is t and t and our first transaction is updating the gpas and now we've said in our second that it's okay for this average to read dirty values in other_words to see uncommitted gpa modifications in that case as the average is computed it could be computed right in the middle of the set of modifications being performed by t in that case we certainly don't have serializable behavior we don't have t_followed_by t since t is reading some values that are in the middle of t and similarly we don't have t_followed_by t it might be that for our particular application we just don't care that much about having exact consistency it may be that we don't mind if our average is computed with some old values and some new values we might not even mind if we compute in our average an increased gpa that ends up being undone when a transaction rolls back so if we're just looking for a rough approximate gpa we can use this isolation_level and we'll have increased concurrency decreased overhead better performance overall with the understanding that it will have reduced consistency guarantees let's go one step up to the next isolation_level which is called read committed as you can probably guess this one specifies that transactions may not perform dirty_reads they may only read data values whose updates by other transactions have been committed to the database now this isolation_level is stronger but it still doesn't guarantee global serializability let's take a look through an example our first transaction t is the same one modifying the gpa for students from large high_schools our second transaction is the one where we are going reset the isolation_level in this case to read committed and it is going to perform two statements one of them is going to read the average_gpa from the student table and the other is going to read the maximum gpa from the student table so let's look_at one behavior that's consistent with isolation_level but we will see is not serializable let's_suppose that this average_gpa is read before transaction t but the max gpa is computed after transaction t so the average will take will not take into account the increases but the max will take account will take into account the increases so let's see if this is equivalent to any serial order is it equivalent to t_followed_by t well it's certainly not because t 's first statement is reading the state of the table before t and not the state of the table afterward although c second statement is reading the state of the table afterward similarly it's not equivalent to t_followed_by t because t is reading in its second statement the state of the database after t so there's_no equivalent serial order but again perhaps that's not needed for the particular application and by using read committed we do get somewhat more performance then we would have if we were serializable our_next isolation_level is called repeatable read and it's our strongest one before we get to serializable in repeatable read a transaction may not perform dirty_reads just like in read committed and furthermore there is an additional constraint that if an item is read multiple_times it can't change value you_might remember in our previous example we read the gpa multiple_times and it did change value so if we were using repeatable read for the consistency level there then the behavior that i described couldn't occur so even with this stronger condition we still don't have a guarantee of global serializability and we'll again see that through an example our examples are getting a little_more complicated here so we have our two transactions t t our first transaction is still modifying the gpa i took away the condition about the high_school_size just to keep things simple and our second statement in our first transaction is modifying the high_school_size of the student with id so we first modified gpa's and then a high_school_size in our second transaction and that's the one we're setting as repeatable read we are going to read the average_gpa as we usually do and this time we are going to read the average of the high_school sizes incidentally our first transaction is serializable as they always are by default let's look_at a behavior where the first statement reading the average_gpa is executed before transaction t or sees the values before t while our second statement the high_school_size sees the values after transaction t so let's check our conditions we are not performing dirty_reads because the first read here is of the committed value before t and the second read is the committed value after t and furthermore any items that are read multiple_times have not had their value changed because we are actually not reading any values multiple_times so the execution of the first statement here before t and the second one after is legal in the repeatable_read isolation_level yet we're still not serializable we're not equivalent to t before t because again this statement of t is going sorry the first statement of t is going before t or seeing the state before t and we're not equivalent to t_followed_by t because the second statement of t is seeing the state after t now there is another situation with repeatable_read that's quite important to understand we said that a transaction can't perform dirty_reads and it can't we also said that when an item that's read multiple_times can't change value but the fact is that repeatable read does allow a relation to change value if it's read multiple_times through what's_known_as phantom_tuples let_me explain through an example let's_suppose our first transaction inserts a hundred new students into the database and that's run concurrently with our second transaction which is right at the repeatable_read isolation_level and now we're just going to read the average_gpa and we're going to follow that with the max gpa similar to one of our earlier examples now repeatable_read actually does allow behavior where this average is computed before t and this max is computed at after t so the justification behind that is pretty_much that when we do the second read of the gpa the tuples that we're reading for a second time do still have the same value so we are reading those some new tuples that were inserted and in fact if this max were an average instead of max we might get different answers for the average even with repeatable read at the isolation_level but that's what it allows and these hundred tuples here are what are know as the phantom_tuples they sort of emerged during execution out of nowhere now i would have to say that my opinion is that this behavior within the repeatable_read isolation_level although it's part of the standard is really in effect of the way repeatable_read is implemented using locks when a value is read once it's locked and can't be modified but when we insert new tuples they aren't inserted with locks so they can read in a second read of the same relation don't worry_about the implementation details but do worry_about phantom_tuples because if you're using the repeatable_read isolation_level you do need to know that insertions can be made by another transaction even between two entire readings of a table now on the other_hand if what we do in our first transaction is delete the hundred tuples instead of insert them in that case we actually can not get the behavior where the first statement is before and the second statement is after because once these the average value has been read of this gpa this deletion will not be allowed because again kind of an implementation but those values are locked and so in this case the second read of that same relation wouldn't be allowed so in summary we may have phantom_tuples up here between two reads of the same relation in a repeatable_read transaction but we won't have tuples disappear from the relation in between two reads of it so that completes our three isolations levels in addition to serializable we had at the weakest read_uncommitted then read committed and then repeatable_read i did want to mention that we can also set transactions to be read only that's sort of orthogonal to setting the isolation_level what it does is it helps the system optimize performance so for example in our transaction where we were just reading the average_gpa and the max gpa we can set an isolation_level and then we can also tell the system that it's going to be a read only transaction that_means that we are not going to perform any modifications to the database within the transaction the system can use that as a hint to figure_out his protocols to guarantee the right isolation_level but it might not have as much overhead as if the transaction had the possibility of performing modifications as_well as performing reads ok so the behavior of transactions can be rather confusing and it's very_important to get it right or surprising things might happen but i think we can summarize it pretty well with this table here we're going here from the weakest to the strongest and we can classify the behavior of transactions based_on again what_happens with reading can they read_uncommitted values can they have non repeatable reads where we read a value and then read a different one later in the same transaction and can there be phantom_tuples inserted during the transaction if we set our isolation_level to serializable then we cannot have dirty_reads we cannot have non repeatable reads and we cannot have phantoms if we go one step weaker for a little_more performance and use repeatable_read then we still won't have dirty_reads we still won't have non repeatable reads but we might have phantom_tuples moving up with read committed we still won't have dirty_reads but we might have non repeatable reads so we might read a value that's committed both times we read it however a transaction wrote the value in between those two reads so it's different each time and we may have phantoms as_well finally read_uncommitted is the absolute weakest not many guarantees at all we might have dirty_reads we might have not repeatable reads and we might have phantoms so to wrap_up transactions completely the standard default is serializable behavior and we specified exactly what that means weaker isolation_levels allow_us to increase concurrency decrease overhead so overhaul will get an increased performance but we have weaker consistency guarantees i should mention that some prominent database_systems have actually chosen to have repeatable_read as their default oracle and mysql are examples of that so in those systems it's assumed that most applications will be willing to sacrifice a little_binary_digit inconsistency in order to get higher performance and finally the isolation_level is set for each transaction and is in the eye of the beholder meaning that that transaction's reads must conform to its_own isolation_level but won't affect any concurrent transaction's isolation_level i_hope i've gotten the point across that transactions are one of the most_important concepts in database_systems they are what allow multiple clients maybe thousands tens of thousands of clients to operate_on a data base all at the same time without concern that the actions they perform on the data will affect each other in unpredictable ways and furthermore transactions are what allow database_systems to recover when there's an unexpected crash into a consistent space in this video we'll be introducing the concepts of constraints and triggers later videos will have demos we're considering constraints and triggers in the context of relational_databases the structured_query_language standard does include standardized constructs for constraints and triggers although this is an area where deployed systems do very considerably in how much they cover and how they cover it constraints are also known_as an integrity_constraints and they constrain the allowable states of the database triggers are a little different triggers monitor changes to the database and when they're activated they check conditions over the data and possibly automatically initiate actions so we can think of constraints as a sort of static concept over the allowable states where triggers are more dynamic let's talk a little_more about integrity_constraints and then we'll move to triggers so the idea of integrity_constraints is that we want to impose restrictions on the allowed data of the data base now when we create a schema we say the types of the attributes we're already imposing structural and type restrictions but integrity_constraints tend to be more semantic they capture restrictions that have to do with the application so let's look_at a bunch of examples and these are in the context of our students and college database so a simple example might say that when we have a gpa value the gpa must be say greater_than zero and less_than or equal to another example might say that when we have the enrollment for our colleges the enrollment must be less_than say fifty thousand well actually for some universities it might be more like we might have the decision attribute in our application table is either the value yes or y for yes or the value n for no or maybe null is allowed that could be a constraint again each of these are constraining the data that could be in the database beyond the type structure that's already been defined here's a little_more complicated one maybe we'll want a constraint that says no decisions have been made on computer_science applications so if our major equals computer_science then this is a sort of logical implication then our decision is still equal to null or here's an even more_complicated one let's say that we want to enforce that students_who come from small high_schools are not admitted to super large colleges because it just wouldn't be a good idea for them we might say if the size of the high_school is less_than two hundred then if they're admitted well let's say they're not admitted to a college where the enrollment is greater_than let's say of_course we wouldn't do that in reality but this just gives you an idea of the fairly_complicated expressions we can write as constraints to limit what the allowable data is in the database so why do we want to use constraints well there's several reasons actually one very practical reason is just to catch data entry errors so if we have constraints that just say that the values of the data are in the reasonable range for example our gpa's or our enrollments then if somebody tries to enter data that violates the constraints they probably were just making a mistake it was probably an_error and that can be caught automatically by the constraint enforcement system in the database system so a similar example is correctness criteria so data entry errors would be typically for inserts where correctness criteria might be for updates so if we're modifying the database for example we updated gpa or an enrollment if we're checking our constraints that will make_sure that our updates are correct they don't have errors another use of constraints is to enforce consistency so we might have copies of data in the database in different places or some data that relies on other data and so when we have of that situation consistency we could have constraints that specify the consistency requirements and are checked automatically and finally a very different use of constraint is to tell the system about the data so specifically we might have key constraints that say values are unique or we might again have consistency restraints that the system can use to both store the data in a certain fashion that made it more efficient and also for how it processes queries query processing so let_me give a broad classification of the types of integrity_constraints that are supported in database_systems and this roughly from sort of simplest to the most complicated so a common type of constraint is simply a non null constraint the values cannot take on null that values cannot take on null a second type is key constraints we've_seen those already so a column or set of columns must have unique values in each tuple a very_important type of constraint is called referential_integrity and we're actually going to treat that in it's own video it's often some times known_as foreign_key constraints because it is a very frequently used and important type next we have what are known_as attribute based constraints and these are constraints that are specified along with an attribute constraining the value of the particular attribute a similar type of constraint is a tuple based constraint but it's associated_with each tuple so it can constrain how the values in a tuple but in different attributes relate to each other and finally there's a notion called general assertions where we pretty_much use the entire structured_query_language query language to specify constraints over the database across tables and within tables now let's talk_about how constraints are declared and enforced there's two different times that we can declare constraints one is with the original schema so at the time we create tables we can associate constraints with those tables or with the entire database if we do it this way then the constraints are typically checked after bulk loading so as we discussed in previous_videos the way a database is often set_up is the scheme as declared and the initial set of data may be enough file and then it's both loaded in the database so we did clear constraints then after the data is loaded the system will check the constraints and if they don't hold an_error will be raised now another possibility is that we decided once a database is already in operation that we have some constraints we'd_like to enforce maybe the application is change or maybe we just realize that there is certain constraints on the data in that case what_happens is the constraint is checked on the current state of the database at the time it's declared now this talks_about checking constraints on a single state of the database but of course if the database is modified we have to continue to check constraints so the idea is that once a constraint is in place and if the holds on the database then every time the database is modified the constraints to be checked now of course what we really only want to check is dangerous modifications so we have a constraint on the gpa we don't need to check changes to the enrollments if we have constraints on one table we certainly don't need to check updates on another table or modifications so part of a good constraint_checking system will only check constraints after those modifications that can possibly cause the constraint to become violated on the other_hand the system does have to insure that after every modification the constraint holds there's also another concept known_as deferred constraint_checking and deferred constraint_checking says that and we might want to do a whole_bunch of modifications that during the modifications violate the constraint but once we are done with all of them then the constraints will hold again and in that case instead of checking after every modification what we actually check is after every transaction so we'll talk_about transactions in a separate video but the concept of transactions is that you can group a bunch of modifications together and they'll be executed as a unit and that unit is used for other purposes as_well for managing concurrency and for recovery but in terms of constraints it can also be the unit of modification that's used for constraints check it again if we perform a modification that violates the constraint typically the system will raise an_error and will undo the modification that violated the constraint so that the data base stays in a state that's consistent with respect to its constraints now let's introduce triggers as i_mentioned earlier triggers are a more dynamic concept than constraints constraints talk_about each state of the database where triggers talk_about how the database evolves and they can in fact themselves trigger action that cause the database to further evolve triggers are sometimes known_as event condition action roles because the basic structure of a trigger says when some event occurs and that's typically a modification to the database of some type check a condition over the database sometimes this condition will be checking the violation of a constraint but it can be more general than that and if the condition if the condition is true then perform an action so let's look_at some examples of what we might use triggers for in our college application so we might have a trigger that says if the enrollment is modified to exceed say thirty five thousand then let's initiate an action and now this is not a logical implication but a triggering of an action that rejects all applications so we can code that in a trigger and it's a little different and a constraint we might write another trigger that says if we insert an application that has a with a gpa say greater_than then again this is not implication but triggering an action we might accept automatically that applicant as another example let's say that we insert a or let's say we update the size_high_school to be greater_than say seven thousand seems pretty unlikely then that's probably an_error and we could change the value say to 'wrong' actually one thing that trigger can often doing this action is simply raise an_error and we can see this last one is effectively enforcing a constraint that the size school should be less_than or equal to we saw a number of reasons that we might want to use constraints now let's talk_about why we might want to use triggers actually the original motivation for triggers was to move logic that was appearing in applications into the database system itself for_example if our application is doing all of the work to monitor each change to the database and that make additional changes based_on that monitoring why not put that functionality inside the database system in the form of triggers that makes it more modular and it insures that all the monitoring automatically occurs no matter which application is running on the database in addition to moving monitoring logic inside the database system a very common use of triggers is simply to enforce constraints now you_might_wonder why would people not simply use the constraint system instead of writing triggers the reality is that even_though the structured_query_language standard is very expressive in terms of constraints especially when you consider the general assertion feature no database system implements the entire standard most of the constraint_checking features are somewhat limited on the other_hand the trigger features are quite expressive so there's a number of constraints a large class of constraints that can't be expressed using the constraint feature but can be expressed using triggers so expressiveness is one of the reasons the other is that using triggers you can not only monitor constraints but you can actually have constraint repair logic so when you use constraint systems except for one specific case having to do with referential_integrity that we'll see when you use constraint systems typically if the constraint is violated an_error is raised on the other_hand if you use a trigger trigger can detect the constraint is violated and it can launch an action that fixes the constraint so that's a good use of triggers here's a quick preview of what triggers look like in structured_query_language we'll go into much more_detail in a later video as_well as have demonstrations of triggers in a running system again triggers are known_as unconditional action rules and we can see here the specification of events which are modifications to the database we can see here the condition that's written in a structured_query_language like language and finally if the condition is true the action is executed to conclude constraints and triggers are about monitoring the state of the database constraints specify allowable database states while triggers can check conditions and automatically initiate actions in later_videos we'll go into substantially more_detail and we'll have some demonstrations of the constraint and trigger features in deployed database_systems in this video we'll be giving a demo of constraint of several types as a reminder constraints also known_as integrity_constraints impose restrictions on the allowable states of a database beyond those that are imposed by the schema that's been defined and the types of the attributes we have a number of different types of constraints we have non null constraints which specified that a particular attribute cannot have no values we have key constraints that talk_about uniqueness in columns or sets of columns we have attribute base and tuple base constraints which specify a restrictions on the values and attributes or the values across attributes in particular tuples and finally we have general insertions which are quite_powerful they allow you to specify constraints across an entire database as we'll see in the demo not all of these constraint types are fully implemented there are some limits on the attribute base and tuple base constraints in systems as compared to the structured_query_language standard and general assertions have not been implemented yet in any database system but we will give examples what they look like had they been implemented a very_important type of constraint is referential_integrity or foreign_key constraints and those will be covered in the next_video for a demonstration of constraints we'll be returning to the same simple_college_admissions database that we use for our structured_query_language demos we have three tables one with a few colleges one with a number of students and finally a table that has information_about students_applying to colleges let's start_by creating a table with a non null constraint so non null is a pretty_simple type of constraint if we decide that our gpa values in our database must not take on the null value when we create the table we just add the key words not null in the declaration with that attribute let's run the creation of the table let_me_mention right up_front we're going to be seeing a lot of this word affected this misspelling here which gets on my nerve but i'm not going to mention it again okay so let's do some insertions and updates just to experiment with a not null constraint we'll start_by asserting three tuples the first one has no null_values at all the second one has a null value for the high_school_size which should be allowed and the third one has a null value for the gpa which should not be allowed let's run these three insert commands together and we see in fact the first two succeeded where the third one generated an_error if we go and look_at the table we'll see that indeed we got our first two tuples including the null for the high_school_size but there was no third tuple inserted now we'll try a couple of update commands both of them are going to set the gpa to null the first one for the student with id and the second for the student with id if we look_at our data we see that we do have a student with id so when we try to update that gpa to null we should get an_error but we don't have a student whose id is so even_though we're going to run a command that tries to set gpas to null because there's_no matching data no data will attempt to be updated and we won't get an_error let's run the query the two updates and we see indeed that the first one caused the constraint violation and the second one did not now let's take a look_at key constraints i've dropped the previous version of the student table and now we will create a new one where we're declaring the student_id to be what's_called a primary_key as you may remember a key constraint specifies that the values in the column that's declared as a key must be unique so let's go_ahead and create the table and now let's experiment with inserting and updating some data we'll attempt to insert three students first one amy second bob and third one craig since the third insert will generate a key violation because there will be two_copies of in the id column that one should generate an_error we run the queries the inserts and indeed the first two are fine and the third one has a key error if we go and look_at the data itself we'll see that the first two are inserted and the third one wasn't now let's take a look_at updates the first update is very_simple it tries to set bob's id to since amy already has id three that should generate and error and when we run the update_command indeed it does now we're going to do something a little_binary_digit trickier we're gonna run an update_command that subtracts from each student_id now you_might_wonder why did i choose let's take a look if we subtract from bob's id two three four will turn into one two three and will have a key violation on the other_hand if the command first updates amy's student_id to then we won't have a key violation when bob's in turned into two three into one two three so whether we get a key violation in this case could depend on what order the system chooses to execute the update so let's just run it and let's see what_happens well things look good we didn't get an_error let's go look back and refresh the table and we see indeed that both of the update succeeded without a violation so now let's set the as the student_id back to what they were by adding let's run it see what_happens well this time we got an_error so we got a constraint violation error a key violation and nothing was updated that's presumably because the system again updated amy's id first and that generated an_error with the one two three for amy so this sort of demonstrates it one it can be pretty tricky when key violations or other types of constraint violations are detected and when they aren't now we did mention earlier that there's a notion of for constraint_checking so if an application have knowledge that it would rather have constraints checked after a bunch of changes rather_than in the middle the for constraint_checking can be use for that purpose and this demo we're doing immediate constraint_checking you_might have noticed in the previous example that i use the term primary_key when i declared the student_id as a key in the structured_query_language standard and in every database system only one primary_key is allowed per table that's why it's called primary and often the table will be organized based_on that key making it efficient to do look ups on that for values for that particular key so if we decided we wanted to declare two primary keys in our table the student_id and the student name we would get an_error now that's not to say we're not allow to have multiple keys in a table in fact we can have as many as we want only one of them can be declared as primary but we can declare any number of attributes or sets of attributes to be unique and that's again declaring a key constraint it says we can only have one we must have unique values in that column so let's create our table with the student name now also a key along with the student_id and we'll do a few updates just to check that so we'll attempt to insert five students amy bob so far so good when we try amy we should get an_error because we have now declared that the name must be a key as_well as the student_id so we won't be allowed to have amy door should be good amy should again generate an_error we ran the query and indeed we get two errors so far we seen only keys that are one attribute but as you know we can have keys that spans several attributes that's not to say that each attribute is the key individually but rather the combination of values for all of the attributes must be unique in each tuple so let's_suppose that our college name is not unique on its_own but college name and state together are expected to be unique now syntactically we can't put the primary_key statement with the attribute anymore because it involves multiple attributes so the syntax is to list the attributes first in the create table command then use the keywords primary_key and put the list of attributes constituting the key in parentheses so let's create the table now let's insert some data i've tried to pick a college name that's kind of generic mason i don't know if i've succeeded but we'll try to answer the mason college in california a mason college in new york those should succeed because the two columns together need to be unique but not the individual column and then we should get an_error when we try to generate a third tuple with mason california we run the query we run the inserts and indeed we do now lets use multi attribute keys to declare some interesting constraints we're going to create our apply table and we're going to have two key constraints the first one says that the combination of student_id and college name must be unique in each tuple what that's really saying is that each student can apply to each college only one time we're also going to say that the combination of student_id and major must be unique in each tuple that_means that each student can apply to each major only once now a student can still apply to several colleges and several majors but only one time for each so let's create the table and then let's try inserting some data we'll insert quite a number of tuples and lets take a look_at what we expect to happen our first tuple says applies to stanford and computer_science and then also applies to berkeley and ee no problem tries to apply again to stanford and that should be an_error because that's the second instance of the combination of stanford on the other_hand should be able to apply to stanford comes back and wants to go to massachusetts_institute of technology but tries once again to major in ee that should generate an_error because the combination of and ee already appears in our second tuple and finally applies to massachusetts_institute of technology but in biology and that should work just fine so we'll run the query and we'll find indeed the first two tuples and the fourth and the sixth were fine but the third tuple generated an_error because of the second application to stanford and the fifth because of the second application to ee let's go take a look_at the data and here we see in the apply relation that we did indeed insert the four tuples but not the two tuples that generated the key error now we'll try a sneaky update_command we'll try to take our fourth tuple and we'll identify it by having the college name equal to massachusetts_institute of technology and we'll try to be sneaky and change the the biology major to computer_science that will then violate the constraint of the uniqueness of computer_science so if all goes well that update will be disallow here is the update_command setting the major to computer_science with the college name is massachusetts_institute of technology rerun the command and indeed it generates an_error the last thing we'll show in this example is how null values work with keys so we'll try to insert two tuples again using where both the college name and the major are null so as a reminder the first and second attributes need to be unique in the first and third attributes need to be unique so if nulls counts for keys so it will generate an_error what we'll see is that we actually don't get an_error and we in fact do have the data in the table with the null values so the structured_query_language standard and most database_systems do allow repeated null values even in column that are declared as unique for primary_key declared columns most systems though not all do not permit repeated null values in them that completes our demonstration of key constraints now let's look_at attribute base check constraints lets create our table again with four students and this time we'll add two constraints to two of the attributes for the gpa we're going to add the keyword check and a condition that looks kinda like the where clause in the structured_query_language query this condition specifies that gpas must be less_than or equal to and greater_than zero we'll also put a check constraint on the high_school_size saying that the size of the high_school must be less_than five thousand so these are examples of sort of sanity checks that are mostly use for catching data entry errors saying that the attribute values must be within the expected range lets create the table and now we'll take a look_at some data this time we'll insert two tuples it will be pretty easy to see how these constraints work the first one inserts amy with a reasonable gpa and a reasonable high_school_size the second one inserts bob with a reasonable high_school_size but his gpa looks a little out of whack we run the query and the first row is inserted but the second one isn't we take a look_at the data and we see that amy has been inserted now to test the constraints on the size of high_school we'll try to run an update_command that multiplies all high_school sizes by six here's the command and when we run it we get an_error so attribute based constraints allow_us to associate a condition with a specific attribute and that condition is checked whenever we insert a tuple or update a tuple to make_sure that all of the values in that attribute satisfy the constraint a slightly more general notion is tuple based constraints tuple based constraints are also checked when ever a tuple is inserted or updated but they're allowed to talk_about relationships between different values in each tuple and because we don't associate them with a specific attribute the check itself is put at the end of the declaration of of the table so we start_by declaring all of the attributes and then afterwards we put the keyword check again and then the condition inside parentheses now this condition may look_at first a little_binary_digit odd to you it says that for each apply tuple either the decision is null or the college name is not stanford or the major is not computer_science why don't you think_about that for a second and think_about what it might be saying now if you're good in boolean logic you might have written this down using logical expressions and use some of de morgan's laws and turned your or's and not's into implications if not i'll just tell you that what this is saying is that there are no people who have applied to stanford and been admitted to computer_science at stanford specifically either they haven't been admitted or the college is not stanford or the major is not computer_science we'll create the table and then we'll experiment with some data first we'll try to insert three tuples the first one has a student applying to stanford computer_science but not being admitted second they apply to computer_science but it says massachusetts_institute of technology and they are admitted and then finally will generate a constraint violation by having the student apply to stanford computer_science and be admitted we run the query and as expected the first two tuples are inserted and the third generates a violation now let's try some update statements so we have a student who applied to stanford computer_science and was not admitted and with a student who applied to mitcs and was admitted so first we'll try to take that standford student and change the decision to yes that's not going to work so then we'll try taking the students admission to massachusetts_institute of technology and converting that to be an admission to stanford and that shouldn't work either we try all of those and neither of them succeed and both cases are tuple based constraintless check and the check condition was violated before i do my last set of examples i did want to explain one thing in case you're trying these constraints at home the constraints that i've shown so far were perfectly well in sqlite and in post risks in my structured_query_language as of the time of this video the check constraints both the attribute based and tuple based check constraints are accepted syntactically sp by the mysql system but they're not enforced so it can be a binary_digit deceptive because you may create the tables exactly as i've done in my structured_query_language but then you will be allowed to insert enough data and violate the constraints so again i recommend for trying check constraints for now sqlite or postgres if you've been a shrewd observer of what we've done so far it might have occurred to you that we had some redundancy specifically the attribute base check constraints that we' ve showed can be used to enforce some other types of constraints very_specifically if we want to have a not null constraint we can just write not null that's a built in type of constraint but that's equivalent to adding an attribute based check constraint that for the gpa for example checks that the gpa is not null as a reminder is not null is a key word in the structured_query_language language let's create this table and let's try to insert a tuple with a null value we have student amy again with a null gpa and that generates an_error a little_more challenging and interesting is to try to implement key constraints using attribute based check constraints so here's an attempt at doing so let's just consider a very_simple table we'll call it t and it will have one attribute a and we'll try to write a check constraint that specifies that a is a key for t so here is my attempt at doing so i declare the attribute and then in at my check i say that the value of a is not in select a from t in_other_words the value of that or say attempting to insert or update is unique in table t well first i'm gonna tell you that i'm not allowed to execute that there's various reasons that i can't execute it one simple one is that i'm trying to declare a table t and refer to it before it has been declared another issue with declaring it is the sub query in the check constraint we'll talk_about that in a moment there's actually a third problem with this constraint which is we need to think_about when it's being checked if we say first attempt to insert the value a and then check the constraint then the constraint will be violated based_on the existence of itself so this is clearly not going to work there is in fact a different expression that might work if it weren't for a couple of other obstacles here's an expression that doesn't have the problem of whether we check it before or after we insert a this is an expression of a key constraint in a way you might not have thought of what this says is that the number of distinct values for an attribute a must be equal to the number of tuples in the table in_other_words every tuple has a distinct value for a now there was one small issue here which is null_values because as we mentioned unique key constraints allow multiple instances of null but if we don't worry_about nulls then this is expression really is a different way of saying that a is a key we run the query and it doesn't allow it again we have the same problem that we're referring to table t within the check constraint that we're putting in the definition of table t by the way that can be overcome some systems do allow constraints to be declared or added to tables after the table has been specified so that would go away but no systems that i know of allow sub queries and especially not aggregation within check constraints let's pursue a little further the question of subqueries and check constraints the key example's a little_binary_digit contrived because of course we can declare key constraints directly but in some cases are very natural constraint that we might want to express a check constraint using sub query and i've set_up a situation right here we create our student table as usual but when we create our apply table we want to have a constraint that says that any student_id that appears in the apply table is a valid student in_other_words there is a student coupled with that student_id now we can write that as a check constraint this is syntactically valid in the structured_query_language standard we specify that the student_id here in the apply table is in the set of student ids in the student table but currently no structured_query_language system actually supports sub queries and check constraints now for this the civic type of constraint it happens to fall into a class that is known_as referential_integrity where we say that this student_id is referencing a student in the other is referencing the student id in the student table and therefore any student id and apply must also exist in the student and in another video we will referential_integrity in some detail but not every check constraint with a subquery falls in the class of referential_integrity_constraints the example i gave for keys doesn't and neither does the one here now this is admittedly a little contrived but what this says is that every college's enrollment must be bigger than any high_school and so we write that by writing the check constraint in the college table that the enrollment is greater_than the maximum high_school_size from the student table now again no system currently will support this however it is in the structured_query_language standard now one thing i want to mention about check constraints with subqueries is that they can be kind of deceptive and we can take a look_at the apply table again supposing this was in fact supported by a system it would check whenever we inserted a tuple into apply or it updated a student_id in apply that the constraint holds but what it will not check is when things change in student so we could write this constraint and every time we do an insert or update and apply it could be verified but somebody could go and change the student table and delete a student_id and then what we feel as the constraint here is no_longer actually holding so it can be tricky to use those subqueries again when we do referential_integrity as in this example the referential_integrity system will take care of making sure the constraint holds but when we have an example like the one with the enrollments if we say change the high_school_size in the student table it would not activate this constraint_checking that's specified with the college table the last type of constraint i_am going to show are general assertions general assertions are very_powerful and they are in the structured_query_language standard but unfortunately they currently are not supported by any database system the first assertion i'm going to write is coming back to the issue of trying to declare or trying to enforce a key constraint without using the built in facilities let_me just write the command here it says we're going to create a assertion called key notice that this assertion is not associated_with a specific table although this assertion only talks_about table t assertions can refer to any number of tables in the database the way an assertion works is we create an assertion and we give it a name and the reason for this is so we can delete it later if we wish then the keyword check appears and then we write a condition and the conditions can be quite complicated the assertion is saying that this condition written in sql like language must always be true on the database so the particular condition that i've put in this first example is a condition we use to check_whether attribute a is a key in table t it says that the number of distinct values in attribute a must be equal to the number tuples in t now i can try to run this but i guarantee you that it's not supported let's look_at some other example assertions we might write if they were supported here's an example that implements this referential_integrity that i was describing earlier this referential_integrity_constraint is saying that the student ids in the apply table must also exist in the student table now when we write an assertion of that form we tend to often write it in the negative form specifically we say that it's not the case that something bad happens it's not the case that there's some tuple in apply where the student_id is not in the student table you can try on your_own to write this in a more positive fashion but you'll actually find that using structured_query_language constructs it's not possible it's actually very common for assertions to specify the bad thing in a subquery and then write not exists as a final example let's_suppose that we require that the average_gpa of students_who are accepted to college is greater_than we can write that as an assertion pretty_much exactly as i just described it we take the average_gpa of students where their id is among the ids in the apply relation where the decision was yes and our assertion states that that average must be greater_than so so far i've described how assertions are created let_me just briefly mention how they are checked or how they would be checked if they were implemented any system that implements this very general form of assertion must determine every possible change to the database that could violate the assertion in this case modifying a gpa modifying a student_id inserting or deleting from students or apply could all potentially violate the constraint and in that case after each of those types of modifications to the database the system would need to check the constraint make_sure that it's still satisfied and if not generate an_error and disallow the database change so i've only talked_about creating assertions let_me just talk very briefly about how a system would enforce general assertions of this form if it supported them what the system needs to do is monitor every possible change to the database that could cause the assertion to become violated so we take a look_at this particular assertion it could become violated if we changed the student gpa if we inserted a student even if we deleted a student or if we inserted an application that was now having a decision of yes or updated the application status so all of those changes have to be monitored by the system the constraint has to be checked after the change and if the constraint is no_longer satisfied an_error is generated and the change is undone that_concludes our discussion of constraints with the exception of referential_integrity which is covered in a separate video and the related topic of triggers which is also covered in a separate video this video introduces a very_important type of constraint known_as referential_integrity as a reminder integrity_constraints in a database restrict the allowable data beyond what's already restricted by the structure and types of the database now the term referential_integrity refers to integrity of references that appear in the database in a relational database a reference from one couple to another occurs through specifying values and integrity referential_integrity says that those values are valid it's sort of equivalent to having no dangling pointers if we used pointers in the database we'll see a number of examples so let's look_at our simple example database with the students colleges and students_applying to colleges that we've been using for all our demos let's_suppose for example that we had a student who had applied to stanford for some major let's say computer_science with a decision of yes when we have this tuple the value in the sid field here of presumably refers to a value here of an actual student so maybe is student mary with some gpa in some high_school and furthermore the stanford value in the c name or college name attribute is presumably referring to the college name in the college table so we would expect to have a stanford value here referential integrity talks_about these values here referencing the corresponding values in the other tables specifically if we have referential_integrity from a attribute a say of a relation r to an attribute b of another relation s what that's saying is that every value that appears in the a column of relation r must have some corresponding value in the b column of relation s so if we take a look_at our example we would say then that we would have referential_integrity from the sid column of apply to the sid column of students we would expect every value that appears in this column to also have a value in the other column and similarly we all have referential_integrity from the college name attribute been applied to the college name attribute in college again we want every value that appears in this column to also appear in this column now we might have a violation for example if we had a say applying to stanford for some major and some decision if we have no over in the student table then this here would be considered a referential_integrity violation similarly we might have which is valid because we have a student here but if is applying to yale and we don't have yale over here then again we have a referential_integrity violation now let_me_mention that referential_integrity is directional so we talk_about this sid here referencing the sid in the student table we could have referential_integrity in the other direction but that's saying something different that would be saying that every student must apply somewhere every value of her student_id must appear in the apply table and this particular example we probably would not have that be the case we would probably be able to have students_who hadn't yet applied_anywhere or colleges where no one had applied yet and the most sensible direction for this referential_integrity in this case is from the apply to the student and the apply to the college but again we could have it in both directions if we so wished now just a few more details of referential_integrity_constraints the referencing attribute in this case the referencing attribute is a is often called the foreign_key and in fact referential_integrity is often referred to as foreign_key constraints and even in the structured_query_language syntax we'll see that the term foreign_key is used second when we have a referenced attribute in this case now we're talking_about attribute b so we have r a to s b the referenced attribute is usually required to be the primary_key for the table for it's table or at_least specified as unique and that's more about efficient implementation than anything else but it is a requirement in the structured_query_language standard and in most systems third it is possible to have foreign keys that consist of multiple attributes just like keys themselves can be multiple attributes let's say for example that in our college relation the college name together with the state form a key not the college name individually if that were the case then our apply table would presumably have one more column that specified the state so we knew which college a student was applying to and in this case we would have these two attributes together as the foreign_key referencing the college name and state together in the college table and we'll see an example of multikey multiattribute foreign_key constraints in our demo now let's talk_about the enforcement of referential_integrity_constraints first let's think_about what operations can occur to the database to violate a constraint it's not every possible modification so again let's_suppose we have r a referencing s b so for example here we have apply referencing students and we have apply referencing college so certainly if we insert a tuple into the referencing relation so if we inserted a tuple into the apply relation that could potentially violate the referential_integrity if the value say an sid or c name didn't have matching values in the reference relations sort of conversely if we delete from a reference relation say we delete a student then that could cause a violation because say we have the value here and the app apply tuple that was referring to after this is gone would then have effectively a dangling pointer and of course if we updated the referencing value either of these columns that could cause a violation if the new value didn't exist in the reference table or if we update the referenced values that could also cause a violation in the structured_query_language standard and in all implementations if we have an insertion into the referencing table or an update to the referencing table that causes a violation to the integrity constraint the referential_integrity_constraint then an_error is generated and that modification is not allowed just like the violation of other types of constraints for the reference table however table s in our case table student and table college if there are modifications that violate the constraint if the referential_integrity was defined initially with some special options then it's possible for the database system to automatically modify the referencing table so that the constraint is not violated so let's talk_about that in a little_more detail let's start_by talking_about deletions from the referenced table so let's says we have our student here maybe has applied a couple of places and then we have our student here in the student table so right now referential_integrity is good everything's okay but let's_suppose that we delete the tuple with so there's actually three possible things that can happen depending on how we set_up the referential_integrity_constraint in the first place so the default behavior is what's_called restrict so restrict is actually a key word but that's the default and it says that if we do a deletion to the reference table and a constraint becomes violated then we generate a air just like i said before and the modification is disallowed the two other options are a little_binary_digit more interesting one of them is called set null and what set null says is if we delete a tuple in a reference table then we don't generate an_error rather we take the referencing tuples in this case these two tuples with and we take their sids and we replace those sids with null and this is considered acceptable from a referential_integrity point of view to have nulls in the foreign_key column so that will occur automatically the third possibility is what's_called cascade so let's set_up a little_more data let's say we have who's applied to stanford and we have stanford over here and now let's say that we again delete this tuple so that would leave us with a referential_integrity_constraint violation here with the stanford value so what cascade says for the on delete case is that if we delete this tuple then we'll simply delete any tuple that has a referencing value so this tuple will be deleted as_well now the reason is called cascade is because sometimes you can actually set_up a whole chain of referential_integrity_constraints so we have apply referencing college here but maybe we've had some other referencing ply and maybe even another table referencing that one and if we say deleted a tuple from college that caused us to delete a tuple from a ply if there was a tuple up here referencing that we might get a delete there and then a further delete and then so on typically cascading will only go one step but we'll see an example in our demo where we'll set it up where a cascade will go some distance now updates have a similar three options let's erase all this stuff here let's again set_up some example data so let's say our student was applied to stanford and we have over here if we tried to update say this to be the value there strict command would say that's not allowed because that would leave us with a steg when pointer and will generate an_error the set null command will similar to the delete if this is changed to four five six set any values to null so in this case we change to in the student and then we would change over here to null probably the most interesting case is the cascade case for the update cascade says that if we update a reference value then we'll make the same update to the referencing value so let's say we have stanford over here in fact we have to if we have the value the referential_integrity_constraint being correct and now let's say that somebody comes along and says i think stanford is spelled wrong it's actually stanford well that's actually a common mispelling for stanford the first one was correct but if someone makes this change if we have the cascade option for the referential_integrity_constraints between apply c name and college c name then that update will be propagated to any referencing values so in that case automatically this stanford and any other stanfords in the apply table will be updated automatically to stanford now let's take a look_at referential_integrity in action let's create our three tables we create the college table with the college name as primary_key and the student table with the student_id as primary_key that allows_us to have referential_integrity_constraints in the apply table that reference those two attributes when we create the table apply now we're going to specify the attributes and thhe key word references says that we're setting up a referential_integrity_constraint from attribute student id to the student id attribute of the student table and similarly we extend the declaration of the college name attribute to have a referential_integrity_constraint to the college name attribute of the college table we'll go_ahead and create those tables now let's try to populate our tables if we make a mistake we try to put our apply values in first but there's_no data in the student table or the college table so when we try to insert for example student applying to stanford we'll get a referential_integrity violation because there's_no student and there's_no college standford and similarly for student applying to berkeley so we see the errors and what we need to do is first insert the tuples for the students and the colleges and then insert the applied tuples afterwards so let's insert the two students and two three four and the two colleges stanford and berkeley no problem doing that and now we'll go_ahead and again insert the apply tuples and this time everything should work just fine and it does in addition to inserts into the referencing table we also have to worry_about updates so as a reminder let's take a look_at the students that we have we have students and and in the apply we have students and each applying to one college now we're going to update our applied tuple that has student_id our first update tries to set the student_id to but we'll get a referential_integrity violation because there's_no student with id our second update will be more successful it will update 's application to have student_id we'll go_ahead and execute the update and we see that the second one did succeed so far we've looked at modifications to the referencing table but we also have to worry_about modifications for the referenced tables in our case that's the student table and the college table for_example let's_suppose we try to delete from the college table where the college name is stanford if we try to delete that couple we'll get an_error because we do have an applied couple that has a value stamford and is therefore referencing the couple we're trying to delete similarly tried to delete some student couples let's go_back and look_at our apply relation and we now see that both of the student ids in apply are so it should be ok to delete the student couple with nothing is referencing it but it should not be okay to delete the couple with student_id and indeed when we run the command we see that the first one generated an_error and the second one succeeded how about updating a referenced table let's say that we decide we'd rather have berkeley called bezerkly so we try to update that college name but when we run the command we get an_error because we do have an apply tuple that's referencing the value as berkeley and finally although we've been talking_about data level modifications referential_integrity_constraints also place restrictions on dropping tables for_example if we try tried to drop the student table we would again get a referential_integrity_constraint because that would leave data in the apply table referencing non existent data in what would now be a non existing table you can see that the errors says that you cannot drop a table student because other objects are currently depending on it so when we have referential_integrity_constraints if we wanted to drop the tables we'd have to first drop the applied table and then drop the table that it's referencing now we're going to set_up the apply table to experiment with some of the automatic mechanisms for handling referential_integrity violations specifically we still have the same referential_integrity_constraints from student id to the student table and from college names to the college table but for the student_id referential_integrity_constraint we're and we're going to specify that if a student is deleted then we're going to set any referencing values to null and we do that with the keywords on delete which tells_us what to do when there's a delete to the referenced table we use the set null option for the college name reference we're going to specify that if the college is updated in the college table and that says on update we'll use the cascade option as a reminder what that does is that if we change the college name then we'll propagate that change to any college names that reference it in the apply table now i could have specified two more options i could have specified an on update option for the student_id and an on delete option for the college name so there could be four all together because i left those out those both will use the default which is the restrict option which says if you perform a modification that generates a referential_integrity violation then an_error will be generated and the modification will not be performed just as we saw in the previous examples so let's go_ahead and let's create the table and then let's experiment with some modifications let's start_by adding a couple more students to our student table so then if we take a look our applied table is currently empty because we just created it our college table has stanford and berkely and our student table now has three tuples student ids and we'll insert five tuples into the apply table and all of them are going to be valid with respect to referential_integrity we're only going to insert students that are or and they're only going to apply to stanford or berkeley so we've inserted those values and now we'll perform some modifications to see what_happens we're going to delete from the student table all students_whose id is greater_than going back and looking_at that table we'll see that student and are going to be deleted now remember we specified on delete set null for the apply referential_integrity_constraints specifically when we look_at our apply table the references to the students that are about to be deleted should be automatically set to null when we run the delete command so we'll go_ahead we'll perform the deletion we'll take a look_at the apply table when we we see that those values have indeed been set to null and if we take a look_at the student table we'll see that we only have student left now let's test our cascaded update as a reminder when we set_up the college name referential_integrity_constraint we said that if we update the college name in the college table we should propogate those updates using cascade to any references in the applied table so we're once again going to attempt to change the name of berkely to bezerkly this time it should allow_us to do it and it should change any applications to berkely to now specify berzerkly so we'll go_ahead and run the command and we'll look_at the apply and we will see once we refresh that indeed berkeley has now been changed to bezerkly this example is a doozy it's going to show a whole_bunch of features that we haven't seen in previous examples we're gonna use a simple table t with just three attributes a b and c and we're going to say that a and b together are a primary_key for the table in the example we're going to demonstrate referential_integrity within a single table so intra table referential_integrity we're going to demonstrate referential_integrity involving multiple we'll attribute foreign keys and primary keys and we're going to demonstrate a real cascading where we're going to have a cascaded delete that's going to propagate across numerous couples so typically one thinks of referential_integrity as having a referencing table and then the referenced value exists in a different table but there's nothing wrong with having referential_integrity within a single table for_example in the one attribute case i might have attribute b where every value in b must also appear in value a and that would be a referential_integrity_constraint within the table in this case things are slightly more_complicated because i'm using pairs of attributes for my referential_integrity_constraint specifically i'm going to have attributes b and c together reference attributes a and b together syntactically to declare a multi attribute referential_integrity_constraint in a table definition i have to put it at the end because i can't attach it to a single attribute just like i do when i have say multi attribute keys which are also demonstrated here the syntax is at the end of the table definition i'd say that i'm going to have foreign_key constraint and attributes b and c together have a referential_integrity_constraint to attributes a and b of the same table then in addition i'm going to specify on delete cascade that_means if i delete an attribute if i delete a tuple then any other tuple that's referencing the ab values of that tuple with it's bc values will automatically be deleted so let's run the table creation insert our data and then let's take a look_at the table and predict what's going to happen when we actually delete a tuple so here's the contents of table t after the insertions so we see that a and b together do form a key all of the ab pairs are unique and furthermore every bc pair has a corresponding ab value in the same table so every tuple except the first the bc pair references the ab pair of the preceding tuple so we have ' ' here referencing ' ' in tuple one our two one here references the two one in table two and so on so our referential_integrity_constraints are intact for this table what we're going to delete the first tupple by running a command that says delete the tupple whose a value is one when we delete tupple one because we have the cascaded delete set_up we will need to delete any tuple whose reference values are one one so that will be couple two so after deleting couple one the referential_integrity_constraint enforcement will delete couple two when couple two is deleted the two one value will be gone so tuple which references tuple will be deleted then tuple which references will be deleted and so on until the entire table is empty so here's our delete command to delete the first tuple we run the command we go_back and we look_at the table and when we refresh we see that the table is indeed empty that_concludes our demonstration of referential_integrity_constraints referential integrity is actually extremely common in deployments of relational_databases the natural way to design a relational schema often has values in columns of one table referring to values of columns of another and by setting up referential_integrity_constraints the system itself will monitor the database and make_sure that it always remains consistent in this video we'll introduce the concept of triggers in a separate video we'll give an extensive demonstration of triggers in a running system as a reminder triggers are event condition action rules they specify that whenever a certain type of event occurs in the database check the condition over the database and if it's true execute an action automatically there are a couple of reasons that triggers are used fairly extensively actually in database applications one of them is to move logic that monitors the database from the applications into the database system itself that allows the monitoring to be done more efficiently and it's also more modular so it doesn't have to be repeated in every application a second and probably the most common use of triggers is simply to enforce integrity_constraints and you_might_wonder why are those constraints not enforced by the constraint system well one reason is that some constraint systems are limited and we can enforce more expressive integrity_constraints using triggers and second of all triggers can do automatic repair of constraints when they are violated by specifying the repair as the action portion of the trigger i do want to mention that implementations of triggers vary significantly across the different database_systems in this introductory_video we'll be talking_about the structured_query_language standard for triggers but in our demonstration we'll be using the triggers as supported by sqlite so here we have the syntax of creating a trigger using the structured_query_language standard the second line is the event portion of the trigger it says that the trigger should be activated either before or after or instead of specific events and the specific events that can be specified are insert on a table_t or delete on a table t or update two particular columns on a table t and actually the columns themselves are optional update up columns on table t let's skip the referencing variables clause for a moment and go on to the for each_row so for each_row is an optional clause that states that the trigger should be activated once for each modified tuple let_me explain what the deal is here so when we run say a delete command on the database that delete command might delete say ten tuples if we specify for each_row in our trigger then we will run the trigger ten times once for each deleted tuple on the other_hand if for each_row is not present then we will execute the trigger once for the entire statement now one tricky thing is that no matter what the trigger is activated at the end of the statement but its trigger it's activated either ten times for the ten deleted tuples or once if for each_row is not present now let's talk_about the referencing variables i'm going to write them down here the idea of referencing variables is that they give_us a way to reference the data that was modified that caused the trigger to be activated so we can have in the referencing variables these are key words old_row as and then we can give a name to the old_row we can have new row as and again name and we can also have old table as a name and new table and there's a whole_bunch of things to explain here so it's possible to have up to all four of these on a single trigger but there are certain restrictions and let_me explain first of all if we have a trigger that is based_on insertions then we can only refer to new data that would be the new inserted data if we have a trigger activated by deletions then we can only refer to the old variables for the deleted data if we have the case of update then we can refer to both old and new and we will get the previous version of the updated values and the new version of those values so we can only have both old and new in the case when our trigger is activated by an update now let's talk_about about row versus table so if we have a row_level trigger as a reminder that will be triggered once for each modified tuple but after the entire statement has run so lets take for example a row_level delete in the case of deletes we can only have old but we could have for a row_level trigger both the old_row and the old table the old_row would refer to the specific tuple that the trigger is activated for and again if we deleted ten rows and it will be activated ten times once for each deleted tupel while the old table will refer to all ten of the updated of the deleted tuples now there's often a lot of confusion with the old table it's not referring to the old state of the database it's referring specifically to the set of tuples that were in this case deleted if our tuple if our trigger is not for each_row if it's a statement_level trigger then we cannot refer to the row_level variables but we only have the table level variables so to reiterate if we had say an insert that was row_level then we could have both new row and new table if we have a statement_level insert we can only have new table if we have a row_level delete then we can have both old_row and old table but if it's a statement_level delete then we can only have old table finally if we have a row_level update then we can have all four of these but if we have a statement_level update then we would only have the old table and the new table just to clarify when i say row_level i_mean that for each_row is present and when i say statement_level i_mean that for each_row is not present ok so now we covered the those clauses fortunately the last two are a little_binary_digit easier the condition here is it's like a structured_query_language wear condition it's going to test the condition on the database and if the condition is true then the action will be performed actually what this is really like is like a general assertion we saw there were certain ways of describing conditions that are on entire databases and we will see a number of examples and finally last of all the action in the structured_query_language standard the action is a structured_query_language statement in systems some systems will have a set of simple statements and a begin end bracket some will have stored procedures so this is a case where the systems do vary quite a binary_digit we'll be using structured_query_language light which has as it's action begin and end with any number of structured_query_language statements within it well that all seems very complicated and there are quite a few complications with triggers but in many cases they're relatively straight_forward and i think the next thing we'll do just to relax for a moment is take a look_at a fairly simple example in this example we're going to implement referential_integrity as we discussed in the previous_video let's say that we have a table r whose attribute a references attribute b of table s and we want to implement cascaded delete as a reminder what that means is if we delete from table 's' then any 'a' values that reference the deleted b values will themselves also be deleted ok so let's specify that in a trigger it's really quite simple we give the trigger we say after we delete on 's' so this trigger will be activated whenever we delete from 's' we're going to make it a row_level trigger so that means we're going to activate the trigger once for each deleted row we're going to set_up that deleted row to be called o and finally there's_no conditions so whenever we have a delete from s then in our action we're going to delete from r all tuples where the a value equals the b value of the deleted couple from s so that should all be pretty easy to understand just as one little change let's take a look_at writing the same trigger as a statement_level instead of a row row_level trigger so now i've taken away for each_row and let's look_at what changes we need to make well first of all we don't have old_row anymore as i_mentioned for on statement_level triggers we only have old tables so now we're going to set_up a variable called ot that's referencing old tables and remember this is going to the set of deleted couples it's not the old value of the table but just the value of the tuples that have been deleted the other thing we need to change is the action of the trigger instead of matching one tuple at a time we just look for tuples in r where the a value is among the b values that were deleted from s and we delete those couples from are and that works exactly the same as the row_level version of the trigger now you_might_wonder which version you should use well it's turns_out some systems don't support both systems and you don't have a choice for this particular example probably the statement_level trigger would be more efficient since it only activates the trigger once and takes care of all the referential_integrity cascaded deletes in one fell swoop so this example shows that triggers can be quite natural but there are a lot of complexities as i alluded to in the original slide that showed the full trigger syntax so just to go through some of the trickier issues we talked already a binary_digit about row_level versus statement_level and the use of the different new and old_row and new and old table with triggers that execute after the modification this is fairly understandable but things can get more_complicated when we have or instead of the modification that causes the trigger to be activated secondly we can have multiple triggers activated at this same time its pretty_simple what if i declared two separate triggers that are activated by deletes say on a particular table the we have to ask which one is going to go first and maybe the behavior will differ depending on which one goes first so that's something that needs to be thought about when one defines triggers and understands how they're going to behave when the database is modified another possibility that we have to consider is not when triggers are activated at the same time but when triggers activate each other in a chaining effect so i might have a trigger that's activated and it performs an action that the database modification that activates another trigger which in turn can activate other triggers we can also have triggers that trigger themselves potentially we can have cycles well when a trigger triggers itself it's a cycle but we can also have t that triggers t that triggers t that triggers t again then we need to worry_about issues is like termination both for cycles and self triggering we can also have a case where a trigger has multiple actions and each one of those actions individually activates other triggers so we start getting a nested behavior in the trigger activation so again all of these need to be both defined carefully and understood carefully when one creates triggers so that one knows how one will behave in practice another issue that's really more about trigger design is exactly how to write one's triggers when conditions are involved sometimes it's possible to put a condition either as part of the action or as part of the when clause in a trigger now certain trigger languages are limited in what they can say on the when and then again we wouldn't have a choice but sometimes we do have choice and it could effect actually the efficiency of trigger execution depending where we put the condition finally i'll mention again that implementations do vary significantly especially across these tricky issues now most of these issues are actually going to be discussed further in the demo but the demo that i'm going to give is going to use sequel lite which only has row_level triggers so let_me give one more example that talks_about the difference between row_level and statement_level triggers since i won't be able to show that in the demo this example is completely contrived to show a few issues let's_suppose that we have a table t and it has two attributes attribute k is a key for the table and attribute v is a value and we're going to have a trigger that's going to be activated when we perform insertions on t and let's_suppose that we perform a large number of insertions or at_least a few insertions and it's going to be a role level trigger so we're going to execute the trigger once for each_row that's inserted so as a reminder when we have a row_level trigger we can refer both to the specific tuple that's being processed for one activation of the trigger and we can also refer to the entire set of changes that were made by the modification command that caused the trigger to be activated so in this trigger we're going to use nr to refer to the current inserted row that we are processing and new technology to refer to the entire set of inserted rows okay so what is this trigger doing it's going to process one inserted row at a time and when it processes that row it's going to check_whether the current average value of 'v' in table 't' so that's the current average value is less_than the average of the inserted rows now one thing i want to say is that this value is stable so even if we modify t new technology doesn't change new technology is always set to the set of inserted tuples ok so we check_whether t's average is less_than the new technology average and if it is then we're going to modify the update that modified the tuple that was inserted so we're going to update t and we're going to set the value to be v for the tuple that we're currently processing in other_words the tuple whose key is in new row ok this is really really tricky i'm trying to demonstrate a bunch of things here so just let's back off and think again for a minute about what_happened we inserted a whole_bunch of tuples after we inserted those tuples we first determined what the average value of the inserted tuples that's this average value here let's say it's then we're going to for each inserted tuple check is the current average and t less_than if it is we're going to update that tuple that was inserted to be greater and that's going to be end of that activation so there's a couple of things that i wanted to point out specifically with this trigger one is that there is no statement_level equivalent of this trigger if we try to write this without the four each_row we can never get the same behavior because what we're doing is looking_at each_row one at a time and deciding whether to increase its value so we might increase the value for some subset of the rows but not all of them and it would not be possible to do that with a statement_level trigger the second thing that this triggers shows is the potential to have a non deterministic final state because we're gonna again increase the value of the inserted tuples until the average exceeds a certain threshold and then we'll stop in updating those values or increasing those values so the subset of tuples whose values are increased is determined by the order in which the trigger processes the set of inserted couples ok so this trigger is really really complicated now of course nobody is going to ever write a trigger that looks exactly like this part of the point was to show a bunch of different features and show a bunch of different subtleties specifically in the context of row_level versus statement_level because we aren't able to make that contrast with the demonstration that we're going to give so to conclude triggers are event condition action rules that are used used to move monitoring logic from the application to the database and to enforce complex constraints potentially with automatic repair and the implementations vary significantly now let's see triggers in action we're going to cover a number of features in the demonstration which is going to be in two parts we'll cover before and after triggers with both insert delete and update triggering events we will not be covering instead of triggers which are used primarily for views and so will be covered in the material on views we'll show access to new and old data for the modified data that causes a trigger to be activated we'll show trigger conditions and trigger actions we'll show some triggers that are being used to enforce constraints we'll show a trigger chaining where the execution of one trigger activates another trigger and we'll show triggers that activate themselves and cyclic behavior of triggers conflicts when multiple triggers are activated at the same time and finally nested trigger invocations when a trigger has several actions which themselves activate other triggers the video introducing triggers used the structured_query_language standard it so happens that no database system implements the exact standard and in fact some systems deviate considerably from the standard not only in the syntax for specifying triggers but also the behavior meaning one has to be very_careful to understand the trigger system that one is using in terms of the primary open_source systems at the time of this video postgres has the most expressive trigger system sqlite is a little_binary_digit less expressive and mysql is considerably more restrictive than the other two let's look_at some details in terms of expressiveness and behavior postgres is the closest to the standard it really does implement the full standard it has row_level and statement_level triggers access to old and new rows and tables unfortunately it uses its_own cumbersome and somewhat awkward syntax making it not very suitable for our demonstration sqlite implements row_level triggers only and it also has immediate activation which is a deviation in behavior from the standard as we discussed in the introduction the standard for triggers is that if we have a modification statement that makes many changes regardless of whether we have a row_level or statement_level trigger we execute triggers at the end of the statement whereas in sqlite we have row_level triggers only and there after each row_level change to the database as a result sqlite also does not have access to new table or old table like sqlite mysql also has only row_level triggers and they are activated immediately instead of at the end of the statement they also don't have access to old and new table there are two other significant limitations in mysql one of them is that mysql only permits one trigger per event type so for example only one trigger for any inserting into a particular table or deleting from a table furthermore there's limited trigger training allowed in mysql now these features if we want to call them that do you mean that the triggers in mysql are quite understandable in how they behave because they're fairly restricted in what they can do and specifically in how they can interact for our demo we'll be using sqlite and let_me_mention a few things about the syntax since there's row_level triggers only for each_row although it's a allowed to be specified in the trigger is implicit if it's not present as i_mentioned there's_no access to old table or new table and so as a result sqlite has no referencing clause instead prebuying these variables old and new two old_row and new row we'll see that clearly in the demo finally the action in sqlite triggers is a begin end block with any number of structured_query_language statements the demo is in two parts and in this part of the demo we'll be in the first five features the other three will be covered in the second part in the first part of the demo we'll be using our usual simple_college_admissions database with the college table student table and students_applying to colleges we will be starting with our usual database our four colleges our set of students and our set of couples of students_applying to colleges the idea is that we'll be creating several different triggers and then we'll be modifying the database and see how those triggers behave here's our first trigger let_me mention that the particular interface we're using does not allow_us to execute create trigger commands from this window so we'll actually be executing the demand separately our first trigger will intercept insertions_into the student table and we'll check the gpa if the inserted gpa the gpa of the inserted student is greater_than or less_than or equal to that student will be automatically applying to stanford for a geology major and applying to massachusetts_institute of technology for a biology major let's look a little closer at the tax we give the trigger a name we specify the triggering event in this case its insertions on student next we have the option of specifying for each_row now as a reminder in the sqlite system only the for each_row option is implemented so even if we actually left this clause out it would be a low level trigger furthermore sqlite does not have a referencing clause so in the structured_query_language standard there's the new row old_row new table and old table which can be bound to variables in the referencing clause in sqlite only new row and old_row are supported and therefore they're bound automatically to the predefined variables new and old now remember new and old gives_us a way to access the data that was modified that caused the trigger to be activated in the case of an insertion there is only new data be the inserted row if we had an update we'd have both new and old available to us for the modified row and if we had a delete we'd have only old we'll see that in later examples in this particular example we're going to use new in our trigger condition to reference the insertion that caused the trigger to be activated we check if that insert a tuple have a gpa within the range we're looking for if it does then we go_ahead and the trigger will go_ahead and execute the action the action will insert two new tuples into the apply table and it will again use the new variable to access the inserted tuple we're working on so it will get that sid for the inserted tuple insert that together with stanford geology and a null decision into apply and similarly have that new student id applying to massachusetts_institute of technology biology with a null decision we've created the trigger so now let's try inserting some new students into our database specifically we'll insert kevin whose_gpa is in the range that we're looking for for automatic application and laurie whose_gpa is outside of that range let's go_ahead and insert those tuples and let's take a look_at our data when we look_at our student table we see that kevin and laurie have been inserted now let's take a look_at apply here we see that student and that was kevin with the gpa has automatically been inserted to apply to stanford in geology massachusetts_institute of technology in biology and as a reminder an empty cell indicates a null value so our trigger was activated by those insertions and it performed insertions_into apply for kevin but again not for laurie because her gpa did not satisfy the trigger condition now let's make a more dramatic database modification to test out our trigger we 're going to essentially copy the entire student table into itself so we're going to double the size of the student table we're going to take each tuple and we're going to add a new tuple that's going to be identical except we're going to increment the student_id in order to generate a unique id so when we insert all of these tuples into the student table again all of those whose_gpa is in the range between and should have an automatic tuple into inserted into the apply actually two tuples inserted into the apply table having them apply to stanford and massachusetts_institute of technology so here's the insert command we're going to insert_into student the result of a query that's a reminder of how we do that from previous_videos our query will select from the student all four attributes except that it will increment the id so again this will double the size of the student table copying every tuple but with a new student_id so let's go_ahead and perform the insertions and now let's look_at the student table so we'll refresh and we see that the table has doubled in size and again we incremented the ids what we're most interested in of course is what_happens in the apply table and now we should have a bunch of new applications to stanford and massachusetts_institute of technology and indeed we do and if we looked back we'd see that each of these ids corresponds to a student whose gpi is in the range to satisfy the condition of the trigger we'll leave all these tuples in we're going to actually use them in later triggers that we're going to see this trigger is very similar maybe identical to one that we saw in the introductory_video this trigger simulates the behavior of cascade delete when we have a referential_integrity_constraint from the student_id in the apply table to the student_id in the student table very_specifically it it's activated when we have the lesions from student and again i'm including for each_row and i'll do it in every trigger even_though if i left it out it the behavior would be the same so for each it's deleted from student it has no condition so it always executes the action and the action says look and apply for any student_id whose id is equal to the deleted one and now and again we're using this reserved keyword old as a reminder that's automatically bound to old_row and so it will mind to the tuple that's being deleted that activated the trigger we'll find any apply records that refer to the deleted student_id and we'll delete those apply records as_well so first let's take a look_at our student table because what we're going to do is delete from this table every student whose id is greater_than so quite a number of these students are going to be deleted and then we're going to see that the applications of those students and there's quite a large applications greater_than will be deleted automatically by the trigger so here's the simple deletion command to remove all students_whose id is greater_than we'll run the command and let's go take a look ok so we go to our student table and we see indeed that a lot of students have been deleted those with ids greater that five hundred we go to our apply table and we see similarly but automatically all of the apply records with the student_id greater_than have been deleted as_well now let's create a trigger that simulates a cascaded update again for referential_integrity so let's_suppose we are trying to implement using triggers referential_integrity from the c name that appears in apply to the c name that appears in college and when we update college a name we're going to propagate those updates to any apply records that refer to that so let's take a look_at the trigger this is our first trigger that's activated by update commands so the event triggering event there's an update on the college table and very specifically we've specified the attribute c name and if we left out c name then any update to college would activate this trigger but by putting in c name it's a little_more specific and more efficient again for each_row which would be implicit if we left it out and then let's take a look so what our action does similar to the other the previous trigger we don't have a condition we update we run the action automatically as a reminder we have now new and old variables since it is an update so each activation of this trigger will be for one row new will give_us the new value of that row old will give_us the old value of that row so our action is going to update the apply table it's going to find college names that refer to the old college name and it's going to change them to refer to the new college name so i would say this is actually a very intuitive trigger easy to understand to perform cascaded update so let's modify two of the college names in our database we'll change stanford to the farm and for those of you who aren't aware the farm is actually a common nickname for stanford and we'll change berkeley to bezerkley and i'll let you draw your_own conclusions on that one so let's go_ahead with the update and let's take a look_at our data now and this time we'll just go straight to the apply relation we'll refresh and we'll see that our references to berkeley have been changed automatically to bezerkley and stanford to the farm and again i did not run an update_command on the apply table i only ran the update_command on the college table which has also changed and then the trigger was activated and propagated the update to the apply records so our previous two triggers simulated integrity_constraints the next two triggers we're going to write are going to simulate key constraints specifically we are going to say that the college name needs to be unique within the college table so we're going to write triggers that intercept both inserts and updates for the college table and if they try to create or update a college name that creates a duplicate we're going to disallow that command by raising an_error one other difference between our previous triggers is that these are going to be activated before the insert rather_than after the insert so let's take a look we have a trigger that's activated before inserts on college and they do have a condition what it looks for is another college that has the same college name as the one we're trying to insert so that would be a key violation if we attempt to insert a college name that already exists in the action we're using a sqlite specific construct raise ignore so raise is an_error raise command and ignore says simply ignore the updates that's underway so when we try to insert a duplicate college the trigger will be activated and rays ignore will say disallow that insert now we actually have a second trigger hidden underneath here this trigger handles updates to the college table when a college name is updated similar to the insertion it checks whether there's already a college with the proposed new college name and if it is it again uses the raise ignore command now both of these triggers were specified before the modification and that's necessary in order to use this particular condition if we had specified after the modification as our type of triggering event then the condition would have to check something different it would have to check if we created duplicate college names but again we're using the before version here which is quite natural and the raise ignore command also works in tandem with the before because what it says is to abandon the modification that's under way now i will mention that the raising of errors in trigger action is quite system specific so what i'm showing you is simply the sqlite version that we would use in the case of a before trigger so now let's make some attempted modifications to college as a reminder we've already changed stanford to the farm and berkeley to bezerkeley so in our first two insertion attempts we'll try to insert stanford into our college table and that should actually work because we changed the name stanford to the farm we'll also try to insert another couple for massachusetts_institute of technology and that should not work because that should activate the trigger and detect that massachusetts_institute of technology would be a duplicate if it were inserted we'll run the commands we don't get any errors it's not raising an_error as a reminder the raise ignore command simply stops the command that's underway so we'll take a look_at our college table and we see that the new stanford couple was inserted successfully but the attempt to insert a massachusetts_institute of technology couple was rebuffed by our trigger now lets try some updates as a reminder we had one trigger that intercepted inserts and another that intercepted updates let's try to change bezerkeley back to berkeley we run that we go to college and we see that it did in fact change back no problem because it's not creating a key violation now let's try changing the farm back to stanford we'll run that again we won't get an_error but when we go and look_at the college table we'll see that the farm is still there because we've inserted the new stanford tuple the trigger intercepted our update and didn't allow it to be changed because it would've caused a duplicate value so frustrated by that let's change the farm to stanford again our favorite misspelling of the university we'll run the command we'll take a look and indeed the farm has now been changed to stanford because it's not creating a duplicate value incidentally there were a few things happening behind the scenes while we were experimenting with those key triggers don't forget we define a trigger that intercepts updates on the college name and propagates them to the apply table so while we were changing those college names to experiment with the key triggers we were also modifying the apply table let's go see what_happened to that table we go here and we look_at apply and we see our berkeley students are still berkeley while we weren't looking they change to bezerkeley and back to berkeley our standford students change to the farm and then they change to standford so in order to not offend my sense abilities i'll be deleting those students those apply records before we proceed now let's take a look_at a trigger that does a little_more than enforce a constraint what this trigger is going to do is monitor applications to colleges and when the number of applications to a college exceeds it's going to rename that college to have the college name and then dash done indicating that we're done with the college specifically it will be triggered by insertions to apply since that's what going to increase the number of applications and when there's an insertion it 's going to count the number of apply records that have applied to that college now this is an after trigger so it will include the one we've inserted and new is going to again refer to the inserted couple so we will count the number of applied records to that particular college and see if it exceeds ten if is does it's going to update the college corresponding to the one that's being applied to and we'll do that again by looking_at the new college name and it's going to take that college record and it's going to set its name to be the current name and this is a concatenation operator with the string done once we run it you'll we'll see exactly how it works another thing we'll be demonstrating in this example is trigger chaining where the activation of one trigger activates an action that activates another trigger and let_me remind_you of the first trigger we created where when we inserted students with a certain gpa we automatically inserted apply records for those students to stanford and massachusetts_institute of technology so what i'm going to actually do rather_than insert apply records directly to experiment with this trigger i'm going to insert student records those student records if they have the right gpa will activate this trigger which will automatically insert_into apply and then those insertions will activate our apply trigger which will check to see if the college now has more_than ten applicants as a reminder our trigger that does automatic insertions of applications we'll be having students_applying to stanford and massachusetts_institute of technology so we have no students_who have currently applied to stanford that's because i deleted those misspelling stanford and that left us with none but that's fine that will help us test our trigger let's see how_many students we have who have applied to massachusetts_institute of technology we currently have five who have applied to massachusetts_institute of technology finally let's see how_many existing students we have with a gpa that's in range for automatic application and the reason i'm checking that is because i'm going to insert copies of those students that will activate my trigger and show the trigger chain so i currently have six students with gpas in range so if i copy those six students as new insertions then we'll be adding six applications to massachusetts_institute of technology that will bring us to a total of eleven and six applications to stanford bringing us to a total of six so if all goes well with the trigger chaining and everything else when we after we we insert those six new students we should get new apply records that will cause massachusetts_institute of technology to be done because it's exceeded the threshold of ten but stanford not to be done so let's see if that all works out as we expect so my insertion command is going to completely replicate the student table it's going to make one additional copy of every student and as a reminder that will cop that will insert six new students_whose gpa is in range for automatic application so let's go_ahead and run the insert command and let's go straight to our colleges and see what_happens indeed massachusetts_institute of technology is now labeled as done but stanford hasn't changed and let's look_at our apply table to understand what_happened so all of the couples actually starting here were inserted in this round of trigger activation so we added six students six of them had gpa's in range that gave us twelve applications one each to stanford and massachusetts_institute of technology these other applications were left over from before then the fact that massachusetts_institute of technology went over ten applications meant massachusetts_institute of technology was relabeled as done and there was a binary_digit more trigger chaining that happened don't forget our update propagation trigger which is still there that one took massachusetts_institute of technology done when it was modified and sent it back to modify the values of massachusetts_institute of technology and the apply table this might be a good example for you to download and play with yourself or re run the video just to entirely understand what's going on now let's see if we can coax stanford to be done as_well so how_many students do we have who applied to stanford six those are the six applications that occurred as a result of the most recent trigger firings and how_many students do we have with a gpa in range well we have of them we have the that we had originally and then we copied each one of those over in our previous example so now if we once again copy our student table insert_into student an entire copy then we'll be inserting twelve students with gpa's in range those students will automatically apply to stanford and berkeley that should put stanford over the threshold of ten and change it's name to stanford done let's go_ahead and execute the command and then let's take a look_at the college table and see where things stand indeed now stanford is done let's also take a look_at the apply table because there's some quite interesting things going on here so we see all of our tuples with massachusetts_institute of technology done and stanford done and let's just remember what_happened we insert tuples with a student those tuples are causing automatic insertions to stanford and massachusetts_institute of technology however when stanford or massachusetts_institute of technology went over threshold over applications then the name was modified in the college table to be mit done or standford done that modification in the college table activated our update propagation trigger which then had the change in the college table propagate to the change in the apply table but then at some point along the way we see that we stop having mit done and stanford done and we revert back to massachusetts_institute of technology and stanford well why is that that's because when we insert the mits and stanfords automatically and we go_back and count how_many there are for massachusetts_institute of technology and stanford after we've changed this to done we're back to zero if we kept going and then we hit the threshold again of then we would see that standford done and mit done change as_well sorry that standford and massachusetts_institute of technology change back to standford done and mit done so this is very complicated again what i'm really trying to demonstrate here is well of course just the basic behavior of triggers but also the complexity when triggers trigger other triggers that further trigger other triggers and back and we'll be seeing more of that in the second demonstration video but i did want to illustrate it here and there's one more point that i want to make which is that as i_mentioned in span class sttranscriptcontent name id sttranscriptcontent contenteditable true style margin top px margin right px margin bottom px margin left px padding top px padding right px padding bottom px padding left px border top width px border right width px border bottom width px border left width px border style initial border color initial font weight inherit font style normal font size px font family verdana vertical align baseline border top style none border right style none border bottom style none border left style none border width initial border color initial line height px text align left text transform none text decoration none webkit box shadow none box shadow none text rendering auto cursor pointer webkit transition property background webkit transition duration s webkit transition timing function linear webkit transition delay initial background image in triggers roll level triggers are activated immediately after each row_level change that is different from the structured_query_language standard in the structured_query_language standard even a row_level trigger will be activated after the entire statement and that's what for example postgres does but in sqlite we're activating immediately and actually this particular behavior if you think_about it would be somewhat different if we were activating the triggers at the end of the entire command even if we are doing it one row at a time again very complicated stuff you_might want to pause and just think_about how this works or even better experiment yourself let's go_back to a simpler trigger this one intercepts insertions on student before they occur and it checks if the high_school_size is in range if the high_school_size is below or greater_than we're going to assume that's an_error and we're going to raise our ignore again that's a sqlite specific syntax that says don't perform the modification that's underway now that occurs before inserts on students we also have a trigger don't forget that incurs after inserts on students and that one checks whether the student's gpa is in a particular range and inserts the student into the apply table and we're fine to experiment a little_binary_digit with how these two triggers interact now i've deleted all the data from the existing data from the student and the apply tables just to simplify looking_at what_happens with these triggers now let's try inserting some students all three of the proposed insertions have gpas that are in range for automatic application however the second and third students have high_school_size that are out of range so when we run the inserts hopefully the trigger will disallow the second and third insert for the high_school being out of range and the first trigger will activate automatic applications for nancy actually you know what there's a little hint down here what_happened we can see that the first insertion occurred third and the second and third zero rows were affected so we can already see that it did what we expected but let's go take a look_at the data and make_sure that it did so if we refresh the apply we'll see that in fact there was one application to stanford and one at massachusetts_institute of technology for let's make_sure that's our student that was nancy and the other two students that we attempted to insert were not inserted into student and they had no apply record inserted either now let's change this one to an after trigger we're still going to enforce the same constraints that high_schools need to be between and but we're going to check the constraint after couples have been inserted in that case it's not sufficient to just ignore the operation that's under way because the couples been inserted already what we'll do instead is we'll manually delete the tuple that caused the violation we'll delete from student the student that was just inserted now we have two triggers that are activated at exactly the same time the one that checks this constraint and the one that does automatic applications let's see what_happens when we perform some insertions we'll insert two students again both of them have gpas that are in range for automatic application however the second student's size of high_school is out of range it's so both students will be inserted but then our trigger that checks the constraint on high_school_size will we hope delete rita so let's go_ahead and execute and now let's take a look_at our data we'll refresh and we see that as expected quincy was inserted with no problem rita was in fact inserted but then our trigger was activated and she was deleted now let's take a look_at the apply table a ha so rita's applications are there and if we look closely at the triggers and we recommend you do that you will see that both of them are activated by the inserts at the same time now one of them is going to delete rita but the other one is going to process the insert and insert rita into the apply table as a grand finale we'll just show two triggers that are a little_binary_digit more_complicated and more realistic and you may want to pause the video to look_at these closely because i'm not going to go into them in great detail the first trigger automatically accepts students to berkeley if they have a high enough gpa and they came from a large enough high_school so it will intercept insertions_into the apply it will check if those conditions are satisfied and have to use sub queries here to find the student's gpa and to find the student's high_school_size again i urge you to pause the video and take a look to make_sure you understand what's happening if this student satisfies the conditions then their apply record is set to a decision of yes and we apply that apply record by matching the student_id and the college name once again i've deleted all existing students and apply records just to keep the demonstration simple we're going to insert two students amy and bob they both have high gpas but only bob's high_school_size is big enough to grant him automatic admission to berkeley then we're going to have our first student amy applied to berkeley and our second student bob applied to both berkeley and stanford and we'll see that bob is going to automatically be admitted to berkeley so we've run the query and we take a look_at apply and we see that we have inserted the three apply records but only the second one and that's bob's application to berkeley had a decision that was modified and our last trigger is also more complex and i guess sort of realistic what this trigger monitors is enrollments of colleges and at the point that an enrollment of a college is increased past the threshold of then some action will be taken on its application anybody who's applied to ee at that college will be deleted from the application table and all remaining applications where the decisions have been yes are going to have the decisions set to undecided one thing that is interesting about this trigger is it does monitor the dynamic behavior of the database and look for a threshold to be passed and that's something that triggers can do that simply cannot be done with constraints some of our other triggers many of them as you saw were more effectively monitoring static constraints we set the threshold at we see that standford has students and the others aren't very close to the threshold for this trigger i've also repopulated our database so we have a whole_bunch of apply records so let's go_ahead and make an update and see what_happens we're going to increase all college enrollments by that will cause stanford to pass the threshold of and it should activate the trigger and change the apply table when we go look_at the apply table we see that indeed the electrical engineering majors have disappeared and all of the other applications to stanford that were formerly yes have now been set to undecided that_concludes the first half of our demonstration of triggers in the next_video we'll be exploring even further the interesting interactions that triggers can have and how they behave see you then if you made it through that long first part of the demo of triggers here we are in part two as a reminder our introduction video about triggers used the structured_query_language standard but no database system actually implements the standard and most systems deviate considerably postgres is the closest and is the most expressive with triggers however it has a kind of cumbersome syntax so we're not using it for our demos sqlite follows posts risks and is also quite expressive mysql is considerably less expressive mostly with some limitations it has and how triggers can interact so again we are using sqlite for our demo and just a few of the differences from the standard it has role level triggers only no statement_level triggers and an immediate activation semantics for each_row can be specified in triggers but if it's not there it's still a row_level trigger it doesn't have old tables or new tables since it has immediate activation semantics only and it doesn't have a referencing clause the variables old and new are automatically bound in every trigger to what would be old_row and new row if it had a referencing clause and finally the action part of sqlite triggers are structured_query_language statements embedded in begin and end blocks overall here's the long list of features that are covered in our two part demo we covered the first five features in part one so in part two we'll be talking_about self triggering triggers we'll be talking_about triggers that have cyclic behavior conflicts that means when we have multiple triggers triggered at the same time and finally nested trigger invocations when the action part of a trigger triggers additional triggers and finally we'll also add to the a demo a demonstration of sqlite row_level immediate activation and again that doesn't follow the standard its a binary_digit subtle but let_me review it in the structured_query_language standard all triggers are activated at the end of the commands even if they modify multiple rows whereas in sqlite and also in mysql triggers are activated immediately after each row_level modification the tables that we use for this demo are very_simple because we want to focus specifically on trigger behavior so we'll just be using four tables each with a single attribute let's go to the demo our first trigger is a simple one that demonstrates triggers triggering themselves it's activated when we have an insertion on t it has no condition and after that insertion it inserts an additional row into t that contains the value that was inserted plus one so let's go_ahead and insert a row and see what_happened the first tuple in t the one is the tuple that we inserted with our command the second tuple the two was inserted automatically by the trigger however we expected additional trigger activations to insert additional tuples it turns_out that sqlite as a default doesn't allow a trigger to be activated more_than once in a trigger processing session presumably to prevent infinite behavior but if we'd_like we can toggle a variable in the sqlite session called recursive triggers if we turn recursive triggers on then that checking is turned off and triggers can be activated arbitrarily many_times during a trigger processing session now with recursive triggers on this trigger would in fact activate itself indefinitely inserting more and more tuples into t actually what would happen is eventually an_error is generated but we can modify the trigger in order to put in a limit specifically we'll add a condition to the trigger that says we'll only perform the action when the number of tuples in t is less_than ten so what we expect now is when we start_by inserting a tuple we'll insert one two three four five and so on but when the size reaches ten the condition will not be satisfied the action won't be executed and trigger processing stops i deleted the two tuples from t so now let's once again start_by inserting a single tuple with a value one and let's see what_happened we take a look_at table t we refresh and we see that indeed ten tuples were inserted the first one we inserted all the rest by self triggering of our single trigger and when it got to the size of ten triggering terminated because the condition part of the trigger was not satisfied now let's generalize the idea to three triggers that trigger each other in a cycle the first trigger is going to be activated by inserts on t and when there is an insert on t it will insert_into table t the same tuple except incremented by one that will activate trigger r which is triggered by insertions on t when t is when r is activated it will likewise insert_into table t again the value that was inserted into t incremented by then trigger t will be activated by those insertions onto t and it will go_back and insert back into table t again incrementing value so let's start as usual by inserting into the first table the value one and let's see what_happened now let_me_mention that before i started this example i turned the recursive triggers flag off so here is our original tuple that activated a trigger and it inserted two into table_t we can go_ahead and see that that in turn activated a trigger that inserted a three into table_t and then we go_back to table_t and the four was inserted but because sqlite has as a default the limitation that each trigger is activated only once in a trigger processing session at that point trigger processing terminated now we're going to do the same thing that we did last time we're going to turn recursive triggers on again using this command for our sqlite session and then we're going to modify our triggers to put in a termination condition so we only need to put the termination condition in one trigger and we'll put it in the third trigger and this time we'll allow it go a little farther so the third trigger will add a condition that when the size of the first table t is less_than then the trigger will go_ahead and execute its action but when the size of t exceeds then it won't and that will break the cycle and trigger processing will terminate as always lets start things off by inserting the tuple into table t so when we look_at table t we see our original insertion this inserted a into table t which then caused a to be inserted in table t and then back to a four being inserted into table_t and that triggered a five being inserted into t and so on so we can see the trigger behavior now we did put in a limitation so when we go look_at the size of t we'll see that it got to exactly and then when the size of t exceeded the third trigger's condition was not satisfied and that caused the action not to be executed which brought everything to a halt okay that's enough of cycles now let's take a look_at a situation where we have two triggers activated at exactly the same time and they perform updates to exactly the same portion of the database both of our triggers are activated by insertions_into table t and we're gonna again start trigger processing by inserting one tuple with the value the first trigger has no condition it updates the contents of t to set all the values to the second trigger checks to see if there_exists a in table t and if so it sets the values to so these two triggers are designed specifically so we can see which one goes first if trigger r goes first it will set the value to the condition part of our will be true and it will then in turn then set the value to however if trigger r goes first it will not find a in table t so it's actually will not be executed and will then our trigger r will go next and we will set the value to okay so let's go_ahead and do our insertion with these two triggers defined and see what_happens we insert the value we take a look_at t and we discover that we have the value of so what does that tell_us that actually tells_us that trigger r went first we performed our insertion it looked to see if there was a two in the table there wasn't because there was just a one it didn't execute its action then trigger r went and it modified the value to be two so that's interesting the second trigger went first so as an experiment let's try reversing the order in which the triggers are defined we'll create trigger r first and r second i've deleted the tuple that was in t so once again we'll insert a t to get things started we go take a look and now we see indeed that we have the value three going back to look_at our triggers a value three means that trigger r went first it set the value to two that made trigger r 's condition true and then it set the value to three so interestingly in sqlite when you have triggers that are activated at the same time it appears that the trigger that was created second is the one that is going to go first now let's experiment with nested invocation of triggers to make things exciting this time i'm going start_by inserting a zero into table t instead of a one and we're gonna be using all four of our tables t through t with three triggers the first trigger is going to be activated by the insertion into t and it will simply insert a tuple into table t and a tuple into table t what we're going to see and what we're specifically experimenting with is that the first insertion will in fact activate triggers before the second insertion is performed the first insertion into t will activate our second trigger inserts on t and this trigger will in turn insert_into tables t and t and it will insert the values too so this will occur in a somewhat nested fashion and in fact in this action we'll see the first command will be executed and it will in a nested fashion activate our trigger r which will insert simply into table t the value three so let's get started and again as i_mentioned for excitement we'll be inserting a zero this time and let's go see what_happened to our tables so table t has just the zero that we inserted as expected table_t has just a single tuple with the value one which is exactly what we expected this trigger is only activated once now let's take a look_at table t table_t has a and a and they're in that order and what that tells_us is that this insertion here activated by trigger r happened before this insertion here from trigger r and that this is what demonstrates the nested invocation of the triggers and just to look_at the last table we will see something similar in t we again can see nested invocation because the two occurs after the first insertion of three and then we have the final insertion of three so this is a binary_digit complicated you_might want to look_at the video again or or even better yet download the triggers and try them yourself our last example is designed specifically to demonstrate the immediate activation of the low level triggers implemented in sqlite specifically i've populated table t already with four tuples with the value one and what my trigger is going to do when i insert additional values into t is this insert_into table t the average value in t what i'm going to do is insert a batch of tuples into t in fact i'm going to insert four tuples with a value of two so when i'm done i'll have four s and four s in table t if triggers followed the structured_query_language semantics of being activated the very end of the entire statement so the entire batch of inserts then the average values that we insert_into t would reflect the average of the four s and the four s so it would be the value however what sqlite does is activates the trigger after each tuple level insertion so as we insert the s one at a time an average will be inserted into table t two and the first average will reflect have one in table t the second will reflect having two s in table t and so on i think you'll get the idea when i show what_happens so here is the command i'm going to use to insert the four s into table t i'm going to insert_into t the result of this subquery which takes every value and adds so let's go_ahead and do it and let's take a look_at table t and we see now that indeed we have the four ones and the four twos so the real story is told when we look_at table t and here we see indeed that we do not get four averages that are which is what we would have gotten with the structured_query_language standard semantics instead we saw that for each two that was inserted we inserted the average into table t reflecting the number of twos that were in the table so far again fairly_complicated you might want to watch this example a second time or download it and try it at home so that concludes our rather long coverage of triggers we've seen that it can actually be quite complicated when triggers interact with updates on the database when they perform updates and especially when they interact with each other now the reality is that a lot of times that triggers are used in applications is for very_simple purposes we might have a couple of triggers that are enforcing simple constraints they don't interact with each other and they don't interact with the database in complicated ways and i've shown a few of those triggers early on however i did want to make a point that when triggers are used for more_complicated purposes when they interact with each other and with the database in complicated ways it is important to be very_careful to fully understand how they behave this sequence of videos introduces the very importance concept called views in this video we'll talk_about defining and using views and then we'll give a demonstration the next sequence of videos we'll talk_about modifying views and then we'll also talk_about materialized_views views are based_on a three level vision of databases which are known_as the physical layer the conceptual layer and the logical layer at the bottom level we have the actual data stored on a disk so here's my picture of a disk and then we have disk pages and on those pages is stored the actual data so that's the physical layer the next layer up known_as the conceptual layer is the abstraction of the data on these disk into relations and that's what we have been talking_about for a lot of our videos what we are introducing now is what's_known_as the logical layer and that's a further abstraction above relations into what are known_as views as we'll see a view is defined as a query over relation so it's still in the relational data_model so we showed one view that is query over two relations here we could have a view that's query over views and maybe views together with relations it's a quite general concept so until now we've_seen applications and users of those applications operating_on the relations at the conceptual level but users and applications can also operate_on views at the logical level so why do we introduce this additional level on top of this conceptual layer which is the layer of relation certainly we understand why we want to use relations and not talk_about pages like this but what's the benefit of adding views on top of relations well one benefit is that it allows_us to hide some data from some users when the granularity of which we want to hide data doesn't correspond exactly to relations another is that it might make certain queries easier and more natural when we query over the views rather_than directly over the relations and the third reason is modularity of data base access because we can think of these views as modules giving_us access to portions of the database again when that granularity that we want doesn't correspond precisely to relations one thing that i should mention is that real applications do tend to use lots of views lots and lots of views so the bigger the application is the more need there might be for modularity for ease of certain queries or for hiding data and views are the mechanism to achieve those goals so let's talk_about how views are defined and used it's actually a pretty_simple concept to define a view which we'll call v we specify a query of we'll just say view query in a query language typically in structured_query_language over a set of existing tables as we'll see those could even be used the schema of the view then we can think of it like a table is the schema of the result of that query now let's say we want to run a query q over our database this is not the view query this is just some ad hoc query over our database and we want to reference v in that query so we can once v is define reference it just like it's a table and conceptually what we can think of is v being say a temporary table that is assigned to the result of running the query over the current instances of r through_rn so we've now populated v like it is a table and then we evaluate q and we can simply refer to v as we evaluate q so that's what_happens conceptually now in reality what_happens is the query q that references v is actually rewritten to use the tables r through n that are in the definition of v instead of referencing v and we'll see that in our demo and as i_mentioned the ris these tables that are referenced in the view definition can themselves be views as we saw in our diagram earlier with those purple squares the syntax for creating a view in sql is very_simple we use the keywords create view we give the view a name and then we specify the query for that view and that query would be in standard sql now as i said the schema for the viewed that will become known_as the name is the schema of the result of this query if we want to actually name the schema so rename the attributes in the results of the query then there is an alternative syntax that actually lists the attribute names for the view once this command has been executed from this point on we can use new name as it's a regular table in the database so let's move_ahead now to the demo in the demo we will be using our standard simple_college_admissions database as a reminder in case it's been a while or you're new to our videos it's a database with three tables one with information_about colleges that have a college name statement enrollment one with information_about students and finally records showing that students have applied to colleges as_usual we have our four colleges stanford berkeley massachusetts_institute of technology and cornell we have a bunch of students with their name gpa and the size of their high_school and finally we have students_who have applied to colleges for a specific major and there's a decision of their application so let's create our first view our view is called computer_science_accept and it contains the ids and college names of students_who have applied to major in computer_science and the decision was yes so it's the ids and names of students_who have been accepted to a computer_science major we execute the command that creates the view and now we can take a look_at the view we go to our view manager and we see computer_science_accept and we double click and here are the contents of the view now even_though it looks_like it this view is actually not stored when we ask to see the contents of the view or as we see momentarily run a query that uses the view that command or query is rewritten based_on the view definition that we gave so now let's run a query that uses the view as if it's a table our query is going to find students_who were accepted to computer_science at stan ford and have a gpa less_than so here's our query written in structured_query_language and we can see here in the from clause we are referring to computer_science_accept as if it's a table so we'll join the student relation with the computer_science_accept relation we'll make_sure that the college is stanford and the gpa is less_than three point eight we run the query and we see that helen is the only student who satisfies the criteria so what actually happens when we run this query that refers to a view first now i'm going to talk_about what_happens conceptually and then i'm going to talk_about what the system actually does so conceptually we can think of the query referencing the view as triggering a process where we create an actual table with the contents of the view and then we run our query over that table so i've demonstrated that here we created temporary table t and that query contains exactly our view definition so this was the definition of our view computer_science_accept then we take the query that we want to run this was our query and we replace the reference to the view with the reference to the temporary table t otherwise everything is exactly the same we'll run that query and then we'll drop our temporary table so if we execute all of this again we will see our result is helen what_happens underneath in most systems is that the query that we write is actually rewritten not to reference a view or to reference a temporary table but actually to reference the what are known_as base_tables the ones that are used in the view definition so let's take a look_at that process so here we've taken our reference to the view computer_science_accept and we've created a sub query in the from clause i_hope you remember that from the structured_query_language videos so we've just taken the definition of the view it's right here we've put it into a sub query we've named it computer_science_accept and then the rest of the query can remain the same so this is actually convenient a very useful feature where we use the sub queries in the from clause so we'll run the query and once again we see helen well believe it or not this is not exactly what the system tends to do either this is a very easy and convenient rewrite but unfortunately underlying database_systems don't always execute queries that have sub queries in the from clause in the most efficient way so a sophisticated system will actually do a rewrite into a simpler query the rewriting_process is more_complicated the query ends up being simpler and here's that query it's actually a simple query over the student and the apply relations based_on the definition of our view where we're finding here from the first part of our wear comes from the view definition the major has to be computer_science and the decision is yes then we have the joint condition that comes from the query and the last two conditions are also from our query so you might want to look back and think_about it but this is exactly what we were asking for when we were defining the view and then running a query over that view so when we run this we should once again get helen and we do of_course is that as a user you don't have to worry_about any of this you just define the views and you use them and it's up to the system to have an efficient and correct implementation as i_mentioned in the introduction we can define views that reference other views and that's what i've done in this example this example finds students_who are accepted to computer_science at berkeley and they come from a high_school that's greater_than so i'm calling the view cs berk and the view is a join of the student relation with our computer_science_accept view it's going to join based_on the ids so the accept view is already going to be finding students_who are accepted out of college for computer_science and then we're going to constrain it to those who are accepted to berkeley and from a high_school_size greater_than so we run this command but this doesn't show us the result it just creates the view now we go to our view manager and we see that we have two views and the berkeley view finds that there were two students_who were accepted to berkeley they come from a large high_school or high_school greater_than although we're still returning their gpa in the view so now that the view cs berk has been defined we can run a query on cs berk so let's find those students_who have been accepted to berkeley or computer_science with a high_school_size greater_than five hundred and that have a gpa greater_than three point eight and we see that that's amy so this is a beautifully simple query but what's happening underneath is a little_binary_digit complicated because this is defined over one view which itself is defined over other tables so the rewrite process in this case is a kind of recursive process of expansion let's take a look_at what the query would look like rewritten so now that simple reference to the view computer_science burke has it's been replaced by this whole section here lines through and you can see sort of the layer process at the outer layer we have the definition of computer_science burke which itself referred to computer_science_accept so we had in of computer_science burke not this expansion here but just computer_science_accept and then we had the additional joint condition and the reference to it being berkeley and the size high_school and then this computer_science accepted self is expanded to its view definition so now when we run the query we should still get the same result and we do i'm not going to show it here but this query could similarly have a flattened rewrite into a join as we saw when we saw the expansion of computer_science_accept so now we have the view computer_science berk that's defined over the view computer_science_accept what happens if we try to drop the view computer_science_accept we get an_error here we can't drop the view because other objects depend on it so that's a nice error that's from the post grist system unfortunately if we used one of the other two systems structured_query_language light or my structured_query_language what would actually happen is it would allow_us to drop the view and then when we attempted to refer to computer_science berk at that point we would get an_error because when it did the rewriting_process it would discover that computer_science_accept no_longer exists now let's create what_happens to be one of my favorite types of views we're going to take our three tables in the database and we're going to join them together so that we have all of our information together in one table so we're going to apply our join conditions to get the colleges coordinated with the applications and the students and then we're going to take all of the attributes involved so let's run that view we'll call it mega and let's take a look_at what we have in mega here it is so this is all of the information in our three tables joined together and we'll see that makes queries quite convenient now let_me remind_you that this information the view contents are not actually stored so this is a toy database it wouldn't be a big deal to store it here but if we have a very_large database where it's crazy to think_about actually storing the join of everything together that doesn't mean we cannot create the view because the view is just a logical concept and again can ease querying as we'll see now once we have our mega view we don't need to think_about joins we simply state the conditions that we want in the data in our query results so for example if we want to find high gpa applications to a computer_science major at large colleges we just use mega in our clause and give our conditions high gpa computer_science major high enrollment and we run the query and here's our result and incidentally if you're worried about the rewrite of that query it's actually no big deal that one's going to rewrite in its flattened version to adjoin of the three tables with the join conditions and then the conditions that we specified and again if we run this query we'll get the same result so that completes our demonstration of defining views and using views in queries as you can can see it's a pretty straight_forward and convenient concept for the application developer and are used very commonly for modularizing applications for making queries easier to to formulate and for authorization purposes this series of videos covers the topic of modifying views now i have to admit that the amount of coverage is a binary_digit disproportionate compared to defining and using views commonly people only define views and use them and don't try to modify them in applications but when views are modified the issues become a binary_digit tricky so it is important to cover the topic first a reminder of why people use views they use them to hide data from some users so for authorization purposes they make some queries easier they help you modularize your database applications and as i've said several times our real applications do use lots and lots of views now querying views is relatively straight_forward as we've_seen once a view has been defined and given a name say v then in our queries over the database we can reference v as if it were a regular table what happens underneath is that when we reference v in a query it's rewritten to use the tables over which v was defined and we'll call those the base_tables those can actually be regular tables or they can be other views now what about modifying views once a view has been defined can we modify it just like it's any table in the database well in one way that doesn't make_sense because v isn't stored so it's not a table that we can go in and update insert tupples modify tupples or delete tupples but in another way it absolutely has to make_sense because the idea of views is that some users or application developers are seeing those views as their only view of the database we saw that three level idea of databases we have the physical layer the disc the conceptual layer the relation and then the logical layer which again some applications see as their access to the database well our solution is actually parallel to what we do with queries when we have a modification command that involves a view v we'll rewrite that modification command to modify instead the base_tables over which v is defined if those base_tables happen to be views themselves that we have a recursive process of rewriting those modifications to further go down to until we get to the base_tables that are actually the tables stored in the database so maybe this is no big deal we saw in our demo that modifying queries that reference views into queries that reference the base_tables is a relatively straight_forward process well i_am going to say right up_front it's not quite as straight_forward when we are talking_about modifications so let's draw a picture to see what's going on let's say we have our view v here and v is defined based_on a query over its base_tables and for now let's just assume that those are stored actual relations so it's defined over relations r to rn now someone comes along and they want to modify v now v is just a logical concept but the user thinks of v as a table so they write a modification command so that would be say insert delete or update_command using structured_query_language language and they're imagining that v is a stored table so they're imagining that the result of that modification command is going to be a new table v prime what needs to happen is down here at the bottom that modification that imaginary modification to v has to be translated to actual modifications on the base_tables r through_rn so now we modify one or more of the base_tables to r prime through_rn prime and now the idea is that our imaginary v prime then is the same query it's the result of this same query v's definition over the new value the new r prime through_rn prime the updated base_tables so if we can always figure_out how to translate this modification up here into the modifications down here so that the square diagram holds so that the resulting modifications here give_us the effect we wanted upstairs then we're in good shape so the question is can we always perform this translation the modifications so the square diagram holds and the answer is actually usually yes usually there is a translation that works for us and we'll see some examples of that in our demos the problem actually is that there's often many such translations and so we don't know actually which one the user intended so let_me give an extremely simple example let's_suppose that our relation r has two attributes a and b and our view v is defined as the projection on a of r let's say that our current contents of relation are just one tuple to tuple in that case the current contents of view v are just the tuple now let's say the user comes along it's a user who is operating_on the database through view v and they say insert_into view v please the tuple three so we need to translate that insertion which is up here into insertion or some modification on the base_tables so that the view will when we're done contain the tuples one and three well we can certainly do that the problem is what exactly do we insert we could insert for example we could insert and so on so there's actually an infinite number of translations that will create the tuple three in the view here's an even more extreme example let's_suppose we have a relation with one attribute and our view be the average value of that so if for example our relation has the values then the average at this point would be three now let's say that the user comes along and says let_me update that average i'm gonna set that average to be seven well how do we update the base data so that its average is now seven well as you can imagine there are many many many actually an infinite number of ways to update the base data so that the view average would now be seven so that's the crux of the problem how do we decide which modifications to make to the base_tables so that we get the desired modification to the view correctness is not so hard to achieve but resolving ambiguity can be existing systems have actually taken a fairly different approach as to this problem again to specify the problem we have modifications specified on a view v we need to rewrite those to modify the base_tables so that when we have our view of over new base_tables that reflects the desired new state of the view one approach is that the view creator actually specifies that rewriting_process so they will say you know when somebody tries to insert_into the view here's what we need to do on the base_tables if they try to delete here's what we do and update here's what we do so the positive of this approach is that all modifications can be handled because the view creator is going to specify exactly what_happens in the case of those modifications the downside is that there's_no guarantee of correctness meaning there's_no guarantee that that square diagram is adhered to and we'll see examples in our demo of where it's not or even that the translations are meaningful so we're relying on the view creator to create correct and meaningful translations explicitly the second approach is to restrict the views and modifications that are allowed so that the system can automatically perform the translation into modifications on the base_tables that are correct meaningful and and unambiguous so the plus now of course is there's_no user intervention and the result is going to be correct the downside is that the restrictions on the view and the modification combinations are fairly significant as we'll see so the first approach is actually enabled by a type of trigger that's known_as instead of i alluded to those triggers briefly in the trigger video but here is where we are actually going to see them in action in postgres there's a concept called rules that's very similar the second approach is actually the one that's adopted by the structured_query_language standard and the structured_query_language standard gives a very rigorous limitations on what views can be modified systems vary in what they implement most of them are actually a little_binary_digit more flexible than the standard and we'll see that in upcoming demos as_well in this video which will mostly be live demo we'll talk_about modifying views through triggers as a reminder once we've defined a view say called v we'd_like to be able to run modification commands over v as if it were a regular table now since v is not a regular table it's just a view definition what_happens is that the modification commands_against v are rewritten to modify the base_tables over which v is defined and as we talked_about previously unlike with queries overviews we can't in general automate the process of rewriting of modifications on views into modifications on the base_tables as we discussed in the introductory_video there are two basic approaches to dealing with the fact that the translation can't be automated one is to have intervention by the view creator where the rewriting_process is specified as part of creating a view if we want to allow the view to have modifications against it and the other is to restrict the allowed views and modifications so that the the translation can be automated in this video we're talking_about the first case and specifically we're going to see how instead of triggers a special type of trigger can be used to specify the rewriting_process to enable modifications against views we'll be using our standard simple_college_admissions database for the demonstration where we have our usual three tables the college table the student table and the table containing information_about students_applying to colleges so let's turn to the demo as_usual we'll start with our four colleges stanford berkeley massachusetts_institute of technology and cornell our bunch of students and finally the records showing our students_applying to colleges for a specific major and a decision for that application some of the views we use in this demo are going to be the same views that we used in our demo showing how we define and query overviews and now we are going to focusing on the ability to run modification commands_against views our first views is one of those it's called computer_science_accept and as before it contains the student_id and the college name where the student has applied to major in computer_science at that college and the decision is yes we've now created the view and we can take a look_at its contents and we'll see that we have a few students_who have been accepted to computer_science at a few colleges now what we'd_like to do is run a delete command against the view let's say that we want to delete student the two records of student being accepted to major in computer_science so we would run that command like this very_simple delete from computer_science_accept or student_id equals one two three but when we run the command we get an_error because structured_query_language light does not allow_us to modify views so here's the trigger that we're going to create to enable deletion commands to be run on the computer_science_accept view this trigger is going to intercept those deletions and it's going to translate them into deletions on the base data over which computer_science_accept is defined so let's take a look_at what we'd_like to happen if a user asks to delete some data from the view and again let's go_back and look_at our view if the user wants to delete one two three stanford from the view then what we want to be deleting is the apply records that gave us these tupples in the view so let's go take a look_at the apply relation here and we'll see that this was the first record here where the student applied to c s at stanford and the decision is yes and the rd record where this person applied to berkeley and c s is yes we don't want to delete the other records for the student because those weren't contributing to our computer_science_accept view so we'd_like to translate that deletion on the view into a deletion over apply such that the new value of the view no_longer has those first two tupples for student so let's see how that's implemented by our trigger now the one important thing to know that happens and this is the one real contribution the system makes to what we're doing here to enable view modifications is that we do have access two of the deleted tupples so this trigger it's actually a row_level trigger so it's going to be run once for each deleted row and when we run the trigger we will have this special variable old that contains the contents of the row that the user is asking to delete so in the action portion of the trigger that we can refer to the variable old to the student_id and college name that are in the accept view as if we were really deleting that tupple from the view so again let_me reintegrate the system is going to bind to variable old the tupples to be deleted from the view using the scheme of the view even_though those tupples aren't physically in existence and we'll use the value from those to translate to the deletion we want to perform on the apply table very_specifically for the computer_science_accept view if we have a student_id college name combination to be deleted from the view then what we'd_like to delete from the apply table is the tupple that has that student_id that collage name a major of computer_science and a decision yes so the person_who writes this trigger which is presumably the person_who created the view is going to use the combination of what was defined in the view major equals computer_science in decision equals yes combines with the value getting to be deleted from computer_science_accept i_hope that makes some amount of sense so now that we've created this trigger let's go_back and let's try to perform our deletion operation again this time it looks_like we had success so lets go_ahead and see what_happened we go to our view manager we see indeed those couple tupples are gone now remember this table isn't actually stored this when we look_at the view its actually running the view query against the data so when we look_at the apply table we should also find that's the really important thing that the tuples corresponding to being accepted to computer_science are indeed gone and it's the deletion of these tuples from apply that causes the tuples to be deleted from the view and that was the deletion on apply was because we installed this trigger that intercepted the deletion on the view and translated to the deletions on the base_tables so that worked out pretty well now suppose that we want to enable update commands on our view let's say we want to change this student 's acceptance to computer_science at cornell to be an acceptance to computer_science at carnegie melon university instead so here's the update_command we run it's very_simple we find student_id and we change the college name to cmu and we're updating the view computer_science_accept of_course when we run this we again an_error because sqlite won't allow_us to perform an update_command on a view except if we have a special instead of trigger that intercepts that command and translates it so that's what we'll do next is create a trigger so here's the trigger but what i'm going to demonstrate with this trigger is that nothing is forcing the trigger writer to actually do the right thing when a modification is translated to the base_tables so we are going to intercept updates to the computer_science_accept view and in fact you might remember from triggers that we can be even more specific with update triggers and say which column is updated so this particular trigger is only going to update is only going to intercept commands that are trying to update the college name column of the computer_science_accept view and then it's going to translate them to update the apply table now what we have when this trigger is run and again it's run once for each roving updated is we have old and new that are bound to the old value of the updated view tuple and the new value of the updated view tuple and only the college name will have changed in this case so we're going to update the apply the relation we are going to set college name to be the new college name and that's going to be for the tuple where we have the old student_id and the old college name that finds the tuple to update however whoever wrote this got a little wacko instead of writing the condition that it's applications to computer_science where the decision is yes they've made it applications to ee where the decision is no but nothing prevents us from writing this trigger which performs this incorrect translation so now that the trigger is installed we can run our update_command before we do that lets go look again and remind ourselves what we have we have has applied to cornell and we're trying to change that to be carnegie_mellon and in our apply relation we have has applied to cornell of computer_science yes that's why is in the view also by the way has also applied to cornell offer ee and the decision on that one was no so back to our update_command now we'll run the command and now that we have our trigger installed the command succeeds and let's go see what's happened to our database here we are in computer_science_accept and nothing has changed has still applied to cornell we wanted it to be cmu but we wrote the wrong trigger so it did the wrong thing and specifically if we go look_at apply now we see that this record here this apply record has actually been updated so our trigger went in and modified that cornell to be cmu because it matched the major being ee and the decision being no so again what i'm emphasizing here is that it is important to write the correct translation and nothing in the system is checking that that is the correct translation of_course the correct translation would be if we wrote computer_science here and decision equals yes that would be the correct oops decision equals yes here would be the correct trigger that we'd_like to install to manage updates on the college name of the computer_science_accept view so far we have been looking_at the computer_science_accept view and we've looked at deletions and updates now we are going to look_at insertions and we'll look_at a somewhat different view this is a view of the ids college names and majors of students_who have applied to major in either computer_science or ee now let's take a look_at the contents of our view in csee and we see that we have quite a number of students_who have applied to major in ee or computer_science and the colleges to which they've_applied now let's_suppose we want to insert a new tupple into this view so we want student to have applied to berkeley in computer_science we run the command and of course we're going to get an_error because we haven't yet installed the trigger that intercepts insertions_into the view called csee so here's the trigger and this one's pretty straight_forward it says instead of inserting on the view and again the system will provide to us the user's intended insertion on the view in the variable called new as part of the trigger so instead of inserting into the view we'll insert_into the apply table the student_id the college name the major and then we'll put in null for the decision with that trigger installed we can now go_back to and our insert and perform it and look_at the contents of our view so here's our new tupple that we wanted insert the view and again this is not a start table this is just a result of a query over applied but it's there as we wanted it to be and if we take a look_at the applied table we'll see that was inserted with berkeley computer_science and a null value for the decision but now let's see where things can go wrong our trigger was blissfully simple but what if we put here that is going to apply to berkeley in biology and we try to insert that tuple into our view called csee that is suppose to be computer_science and e majors so lets go_ahead and run that insertion and everything went fine let's take a look_at our data well here's our view and nothing changed our attempted insertion apparently didn't happen well here is our insertion we inserted a biology major so what in some sense that's good we don't want our biology major to show up in our view on the other_hand our insertion trigger was activated and if we go_ahead and look_at the data specifically the apply relation we'll see that we did get a tupple insert_into apply that tupple just didn't show up in our view because it didn't satisfy the condition so presumably we don't want users to be able to writ insertion commands_against a view that affect the underlying database but don't get reflected in the view because they shouldn't be in the view in the first place so we need to write a better trigger to handle insertions_into this particular view so we are going to drop the trigger that we wrote and create a new one and and this one is going to use the when clause of triggers it's the first time we used it in this demo and it's going to check that the tupple that the user is attempting to insert_into the view has a major that's computer_science or that's in ee if the attempted insert doesn't have computer_science or ee as a major then the trigger won't do anything but if does then it will insert_into apply the student_id name and major now that we've fixed up our trigger let's go_back to our insertion command we've already done damage with student so let's try student this time let's attempt to insert the student and then let's see what_happened if we go to the view that student is not in the view which is a good thing because it's a biology major but most importantly we hope that nothing happened to the apply table and just to be sure we have refreshed and we see that indeed nothing got inserted so that's the case that we would like i_mean maybe we'd_like an_error message to be generated but certainly if the user attempts to insert_into the view a tuple that doesn't belong in the view wouldn't like the database to be altered now let's_suppose instead that student asks to major in ee now when we run the command we should see in our view that the student has shown up and indeed they have so that insertion was intercepted and the underlying modification was made to the apply table so that the view now has student and if we go look_at apply we'll see again that successfully was inserted to apply so now insertions_into computer_science ee are doing the right thing so we've_seen examples of triggers to intercept now updates and insertions to views and do the right thing of modifying the underlying base_tables so that the view gets the desired modification the next phase of the video is just going to show a few examples quickly where we'll define views that have ambiguous modifications in fact where we might not even want to allow users to modify the contents of the view at all so our first view demonstrates that when a view includes aggregation it's probably not sensible to allow users to modify it this view finds for each high_school_size the average_gpa of high_school students_who went to a high_school of that size so we'll create the view we'll go and take a look and let's see what it contains so here are the contents of that view it has the different sized high_schools represented in our database and the average_gpa of students_who went to a high_school of that size so does it make_sense for a user to modify this view i_mean maybe would a user want to write a command that says update the view and set the average_gpa to or the high_school_size as so going back and looking here we wanna change this average of gpa how would we have a rule for modifying the underlying data to change the average_gpa it really isn't very sensible and making insertions and deletions to this view well maybe we translate deletions to translate to delete every student who went to a high_school of that size but that's probably not what we want so fundamentally when a view includes aggregation it usually does not make_sense to allow users to perform modifications on that view aggregation views are most useful just for running queries here's an even simpler view where we may not want to make modifications this view just lists all the majors that are represented in our apply relation so we'll create the view and take a look_at it and we see that we have seven different majors in our relation now would it make_sense for a user to say i want to add a new major to that view so i'd like to have students_who have applied to the chemistry major well certainly looking_at the view it will be no big deal to put chemistry in here but would be the underlying change to the database what who you know who would be the student that's apply to that major and at what college so in this case what makes it not very sensible to update this view is mostly that we're just taking one column out of our table and also that we're eliminating duplicates from that column so to think how to translate this to the underlying base data we'd have to add a lot of of new values for columns just begin with and maybe there would be multiple tuples contributing to a new tuple in the apply relation again you know we might allow deletions we could potentially say if delete a major then we delete every application to the major but that's not be what's intended by creating the view so when we have projections onto few columns or we have the distinct keyword that's another example where we may not want to allow users to perform modifications to the view and here's our third last example along these lines this one's actually the most complicated one the view that we're creating now called the non_unique is going to give_us all student tuples where there's some other student who had the same gpa and the same high_school and it's a different student so you may want to refresh your structured_query_language to remind yourself how this works let's go_ahead and create the view and take a look_at what's in it here we find that there are three students_who were some other student has the same gpa and size_high_school in fact all three have the same gpa and size_high_school which is not surprising in our small data set so let's_suppose the user decides they don't want amy in this view so they try to write run the command delete from the non_unique view where the student name is amy so what deletions should be performed or what modification should be performed to the underlying data in order to get amy out of the view well of course we could delete amy herself and that might be the most sensible but if we deleted doris here and the other amy i forgot to point out these are two different amy's this one's if we deleted dolores and the other amy then this amy would be deleted from the view too so there's something a little subtle going on on this particular example we are asking to delete from a view that just selects from students so you might think there is a one to one mapping so let's just delete the students that were asking to have taken out of the view but because the sub query references the same relation as the outer query the leading tupple reference in the outer query also affects the result sub query which can feedback into what's in the outer query so it's this interaction between the two references of the table that makes it pretty tricky to figure_out how a modification to the view should be mapped to the modification to the base table so we've_seen three examples of where it doesn't make a lot of since to allow users to write modifications commands_against the view and those are based_on constructs in the view definition and actually we're gonna see those same constructs pop up when we talk_about what the structured_query_language standards says about views that are allowed to be modified but i do want to remind_you that in this video we're talking_about writing triggers that enable modifications to views and so really for all the views that i showed you we could choose to write triggers that intercept the modifications and perform some modifications on the base table but probably that translation would not make a lot of sense and that's the point i'm trying to make not that you can't do it when you have the power of writing instead of triggers but you probably don't want to do it because it probably doesn't make_sense in the application now let's return to views that we do want to allow it to be modifiable and so we're going to enable that through instead of triggers and the next example is more complex because it involves a join of two tables this view is called berk and it returns student id's and majors where the student has applied for that major at berkeley we'll create the view we'll take a look_at its contents and we'll see that we have two students_who have applied to berkeley one to major in biology and one to major in computer_science some of our students have gotten deleted from our database along the way through our examples by the way so let's say that we want to enable insertions_into this view so we want to be able to insert a pair that's a student_id and a major and then insert_into our underlying tables in some fashion so that that tuple is now in the view so what we're going to do is assume that when someone wants to insert_into this view they are inserting for an existing student i'm going to actually check that's the case so if we have an existing student and we're inserting into the view then all we need to do is add a tuple to the apply relation that says that they are applying to berkeley for the major that's specified in the insertion we've asked for on the view so we will write that as a trigger so here is a trigger it says instead of inserting on the berk relation for each_row again we'll get one instance of the trigger for each inserted row we'll check first of all that the student_id of the inserted tuple and again new is bound to the inserted tuple the student the tuple the user wants to insert_into view berk we'll check that that student does exist in the student relation if they don't exist in the student relation we're just not going to do anything with the requested insert if they already exist in the student relation then we can insert_into apply the student_id berkeley because we know this is the view for students_who applied to for applications to berkeley the major they're_applying for and null for the decision so instead of demonstrating just a single tuple being inserted i'm going to do something a little_more complicated and ask to insert a whole_bunch of tuples into berk and we're going to see that each of those tuples is going to result in an insertion into the apply table underneath and of course the desired insertion into the view so the way that i'm going to generate a batch of tuples to be inserted is into the view is to run a sub query and a sub query's gonna take all student id's that are not in the apply table for berkeley so students_who have not yet applied to berkeley and we're going to for each one ask that we insert_into the view that student and a psychology major application to berkeley so lets first take a look_at our apply table to see who is going to be applying to berkeley for psychology so we have two three four who has applied to berkeley already and nine eight seven and their in our view by the way if your wondering why these three students down here didn't appear in our view it's because these were inserted as an artifact of our demo and we never inserted matching student tuples so these aren't going to participate in the joint so we just have two students in our joint all the rest of the students here who_haven't applied to berkeley are now going to apply to berkeley in psychology as a result of us running that insert command that's gonna be intercepted by our trigger so here's the trigger here's the insert command lets go_ahead and run the insert and now let's take a look and see what_happened we go to berkeley and we do see indeed a whole_bunch of psychology majors now in our view and of course that's because we should have a whole_bunch of psychology majors now in our apply relation and here they are so back to our view what if we now want to enable users to delete from the view we're going to again assume that the intention is not to delete the student the student_id table is gonna stay stable and what we're going to do is we're gonna delete the corresponding applications so here's the trigger to do that it's activated by deletions on the berk view and the system again will bind in the desired deleted tupples from the view to the reserved variable old so the action the trigger will delete from apply where the student id matches the one to be deleted the college name is berkeley because that's what we're looking for that doesn't come from the deleted tuple that's not present in the view but we know that's a condition from the view definition and the major has to match the desired deleted major so we'll ask to delete from berkeley all the records were the major is computer_science so lets go_ahead first and take a look_at the view and we see that we have just one so we'll expect this tuple to be deleted from the view but that's going to happen because we are going to delete the corresponding apply record underneath so we go_ahead and execute the deletion we'll take a look first at the view make sure that computer_science is gone and it is and then we'll go look_at it in apply we forgot to look_at it in first place but i think it was student and now has no_longer applied to berkeley and finally let's enable updates to our berk view update the student_id but we'll allow updates to the major so we'll have a student that applied to berkeley in say psychology decide they want to major on something else so here's the trigger and this one is going to intercept updates to the major on berkeley so it won't intercept updates to the student_id and again now we'll have the old and new values bound to the old and new imaginary tupples of berk it's going to update the apply relation it's going to find the record where we have the student_id and our update this could be old student id or new student id since it's value isn't changing so we find the student id we care about their application to berkeley for the old major and we'll change that to be applying to the new major so let's take all those psychology majors and let's turn them into physics majors so with this one update_command we'll be asking to update most of the tupples in the berk view each tupple one at a time will be intercepted by our trigger and it will modify the apply table for the corresponding record and turn the psychology major into physics we'll run the command and we'll take a look_at what_happened here's our view and we see indeed that all the psychology majors have turned into physics majors and of course that's a result of the modifications to the underlined table apply where again we've_seen all the psychology is changed to physics now back to our view i said we weren't going to allow modifications to the student_id and the trigger that we wrote only intercepted modifications to the major so let's see what_happens if we try to modify the student_id here's a command that tries to set to in our berk view and if we run the query then we do get an_error because we didn't implement any translation for modifications to that column the last portion of our demonstration is going to demonstrate the interaction of view modifications and constraints so i'm going to drop my apply table create a new version of it where we add to the decision column a constraint that the column is not allowed to be null now let_me remind_you of a view we created a long time ago called csee that took the student's colleges and majors where the student had applied to major in computer_science or ee and lets look specifically at the trigger that we created to handle insertions_into this view so you might remember or you might not that we first created an incorrect trigger but here is the one that we have activated and the important thing to notice is that it intercepts insertions_into the view and then it inserts into apply a tuple that contains the student_id the college name and the major and then puts null for the decision and this is where our troubles are going to occur because we've now created a version of apply that doesn't allow null for a decision so let's try inserting into our csee view the value is one to three berkeley in computer_science and that will translate to an insertion to apply of the same values and null for a decision we run the insertion and we get the constraint violation so what_happened is the insertion into the view was intercepted by the trigger translated to an insertion to apply but that insertion generated a violation against our not null constraint on the decision column so it's doing the right thing but we'll never be able to insert_into the csee view now because we're always going to attempt to insert more values so if we want to have that not low constraint on the apply relation we'll have to modify modify our translation for csee so it doesn't generate the null_values and here is a second example along the same lines we're going to drop apply again and create a new version of apply this time we're going allow null_values and decisions so we've taken away that null constraint but we've added a key constraint to apply saying that the combination of student_id college name and major must be unique so a student can't apply twice to the same college for the same major so because we've created a new apply relation it's starting out empty but let's insert some tuples but we're going to insert_into the apply relation via the csee view and its trigger so we'll insert student applying to berkeley for computer_science and berkeley for ee and again we're inserting these into the view we'll run that we'll take a look_at our view and we'll see that where is it here we go csee has those two tuples that we inserted of_course those are intercepted by the trigger and created insertions_into apply and here's the apply relation which looks exactly the same but with a decision as null now what we're going to do next is actually insert_into one of our other views i don't know if you remember the berkeley view but that was the ids and majors of students_who had applied to berkeley and let's go take a look_at what_happens when we try to insert_into the berkeley view here's the trigger that we wrote to handle insertions_into berkeley when the student that we're trying to insert does exist then we'll insert a record into apply having that student apply to berkeley for the major that's specified in the insertion and a null decision which again is fine now because we removed that non null constraint so we're going to try to insert_into berkeley student majoring in ee and we're going to see that's actually going to violate our key constraint so let's go_ahead and we get a non_unique constraint because that attempted to insert_into the apply table let's go look_at that table and attempted to insert in to apply berkeley ee and that would have violated the constraint that we can only have one tuple for a student id card college name and major combination so again our attempt to insert_into the view was translated that's the earlier insert sorry our attempt to insert_into the berkeley view was translated into an insertion to apply that violated the constraint and as a grand finale let's try an update on our berk view so let's_suppose that we want student one two three to major in computer_science in both applications to berkeley and that will generate an update to the underlying apply table that should violate our constraint just as a reminder let's take a look_at what_happens when we try to run an update_command on the major of the berk view here's our trigger that we wrote a while ago it intercepts updates to berk and it translates them to update the apply relation find the appropriate record where it's an application to berkeley matching the old major and the student_id and it changes it to the new major so we're going to try to update a berk we're going try to set let's find it here we're going to try set the major equals computer_science for student_id so if we take a look_at what is going to try to the apply relation it's going to try to set these majors both to computer_science and that will give_us again a key constraint violation so let's go_ahead and try to run the command against burk it'll translate to an update on apply and that update won't be allowed so that completes our demonstration of enabling view modifications using triggers so this demonstration was all run on the sqlite system the sqlite system does not allow any modifications commands on views directly so we saw every time we tried that we got an_error and the only way that a user can run modifications over views is if we have in place the special instead of triggers that intercept the modifications that are attempted on the views and translates those to modifications on the base table now the system when it does process the triggers generates for the modification on the views what the data would be in terms to binding those modification to the old and new variables that are available in triggers but the rest of the process is up to the user to write the actions that will take place when the user attempts to do a modification on a view and as we saw there are no checks in place to make_sure the user writes correct modifications that result in view updates however when the user does things correctly it can all work in a very_powerful and correct fashion this video will be a demo of automatic view modifications as a reminder when we've defined a view called v we'd_like to issue modification commands_against v as if it were any table since v is just a logical concept and not a stored table the modifications have to be rewritten to modify the base_tables over which v is defined we saw in an earlier video that unlike queries overviews modifications overviews cannot be automated in the general case we've discussed that there are two different strategies to dealing with modifications to views and specifically how they're rewritten to modify base_tables one is to have the rewriting_process specified explicitly when a view is created the other possibility is to restrict the allowed view definitions and modifications over those views so that the translation can be automatic the second strategy is the topic of this video now in the structured_query_language standard there is a definition for restrictions to views and modifications for what are known_as updatable views the restrictions are on the definitions and they apply to inserts deletes and updates all together what i_mean by that is that a view is either updatable or it's not the structured_query_language standard specifies four restrictions the first one says that the view must be defined as a select statement on a single table t that_means it cannot be a joining view second of all when their attributes from t that are not in the view in other_words they're attributes that don't appear in the select_clause of the view those attributes of the table t must be allowed to be null or they must have a default value defined for them third sub queries in the view must not refer to the table t but sub queries are allowed to refer to other tables and finally the view is not allowed to have group_by or aggregation in our demo we use our standard simple_college_admissions database with a college table student table and apply table we have as usual our four colleges our bunch of students and our students_applying to colleges for a particular major i wanted to mention that this demo is being run in the mysql system mysql among the three systems we're using is the only one that allows automatic view modifications sqlite and postgres both support view modifications through triggers or rules as we saw in our other video the views in this demo may look familiar there are more of the same views that we used in the original video on defining and using views for_example our first view is the computer_science_accept view that finds students ids and college names where the student has applied to major in computer_science at that college and the decision was yes we'll go_ahead and create the view and then take a look_at the contents of the view and we see that we have a few students here now let's say we want to delete student_id from the view so we would delete the first two tuples of the view so here's the command that says the delete from the view where the student_id is because our view definition satisfies the requirements for an updatable view in the mysql system we can simply run the command and the system will take care of modifying the underlying base table so that we get the effect of this deletion so lets go take a look_at our view and we'll see that are indeed gone and if we look_at our apply table we see that tuples where has applied to computer_science are deleted as_well so the system automatically translated the delete command over the view into delete commands on the base table with the proper effect at this point let_me_mention that mysql is actually a little_binary_digit more generous about the views and modifications that it allows than the structured_query_language standard requires and we'll see some examples later that make that very clear now let's take a look_at insertions_into views we'll create our view called csee that contains the id college name and major of students_who have applied in major in either computer_science or ee we'll create the view take a quick look_at it and we'll see that we have quite a few students now let's_suppose that we want to insert a student into csee the student with id applying to berkeley for a computer_science so we'll go_ahead and execute the command and again because we have automatic view translation the system will translate that into an appropriate underlying insertion into a base table let's first take a look_at the view and we'll see that we have indeed berkeley computer_science and then we can take a look_at the apply table and we will see that the system apply inserted the corresponding tuple into apply with a null value of_course let_me remind_you no insertions happening to the view the view is really just a logical concept so when we take a look_at the contents view we're actually running a query over the apply table we by the way being the system it takes care of that for us now let's see a couple of examples where things seem to go wrong but don't worry we'll see a fix to them afterward let's_suppose that we want to insert_into our csee view not aacs or ee major but a psychology major so we'll insert student to apply to berkeley in psychology we'll run the insertion and it seems to have worked fine so let's see what_happens well we look_at csee and obviously the student is not there because they're majoring in psychology if we take a look_at the apply relation we'll see that there was in fact an insertion so this doesn't look good because we don't want the system to automatically be inserting data into the base_tables that isn't appearing in the view and what we wanted was an insertion into the view let's see a second example of this form we'll go_back to our accept view which is students and colleges where the student applied to a computer_science and the decision was yes and as a reminder here's what we have a few tuples of the student id and the college name so let's say we wanted to insert_into computer_science_accept the value berkeley so we would want that tuple in computer_science_accept based_on the definition of computer_science_accept we ought to know that we could actually insert_into the apply relation the two values that were specified here along with computer_science and yes because this is the only two missing values in the apply relation let's go_ahead and execute the insertion and see what_happened we go to our view manager we look_at computer_science_accept there's_no sign of but let's take a look_at apply and we see that the system actually did apply did insert berkeley into the apply relation that's the translation but it wasn't smart enough to put computer_science and yes in here so again we have a kind of disappearing insertion not really what we want to happen when we try to insert_into the view so i_mentioned that we do have a fix for that we can add to our view definitions something called with check_option and let's call this computer_science_accept two when we add with check_option when the system automatically preforms a translation it actually checks to make_sure that the translation properly inserted the data into the view so let's go_ahead and create this view and then let's perform our insertion again so let's try inserting a tuple into computer_science_accept two the version of the view with the check_option and we get an_error because the system will detect that the translated insertion into the apply relation would not produce a tuple that appears in the view we can similarly create a corrected version of our csee view where we add the check_option we'll call it it csee now let's try two inserts into csee one where the student is majoring in psychology and that should generate an_error and one where the student is majoring in computer_science and that should be an okay insertion we'll go_ahead and execute there as we see where the first one generated an_error and the second didn't so to go_ahead now and take a look_at csee and we'll see that student is in that view and actually that student is also going to be in the csee view because the result of the correct insertion was the insertion of student into the apply table underneath now let's take a look_at a few views that aren't allowed to be modified the first one finds the average_gpa of students based_on their high_school_size so let's go_ahead and create the view we'll take a look_at it and we'll see that it contains for each high_school_size the average_gpa of students_who attended this high_school of that size now let's_suppose that we decide we want to delete from that view the tuples where the high_school_size is less_than five hundred we go_ahead and run that and we see that it's not updatable according to our system and if you think_about it it really doesn't make_sense to try to delete tuple from this view because what would you delete i suppose you could delete all the students_who went to a high_school of that size but that doesn't seem to be what the user would probably be intending to happen similarly we could try to insert a tuple into high_school gpa and again we'll get an_error and again it just doesn't make since how would we insert a tuple with an average_gpa what students would we insert some fabricated students from small high_schools just again doesn't make a lot of sense so the system disallows those updates so the previous example wasn't updatable primarily due to the aggregation here's another example that also is not updatable here we're taking just the majors from the apply relation generating a list of them so let's take a look_at what the view would contain and we see it's again a list of majors we have a student here with a null major now would it make_sense to insert or delete from this view well inserting certainly not we'd have to fabricate the student who's applying to that major deleting could make more sense if we wanted to delete all the apply tuples for a particular major but probably that's not what the user intended so if we try to for example add a chemistry major we would get an_error and if we decided for example to delete computer_science major we'd again get an_error so this view is considered non updatable by the underlying structured_query_language system and by the this is my structured_query_language that we're running but also by the structured_query_language standard so one of the other conditions we saw for a view to be update able is that it doesn't have a use of the outer relation also in a sub query and so i've created a view here that violates that constraint this says let's find students where some other student has the same gpa and the same high_school_size and we'll call that view non unique so we've_got the student in the outer query the student in the inner query we'll go_ahead and create the view we can take a look_at the view and here we'll see that we have three students where some other student has the same gpa and high_school_size and they're all the same gpa and high_school_size it turns_out in our small database and let's think_about it would it make_sense to be able to modify this view well if we wanted to for example delete the two amy tuples the underlying system could delete the amys that would actually have the effect of deleting doris if you think_about it or they could delete the first amy and doris and that would delete the other amy so there's quite a few underlying modifications that could perform the modification we're trying to perform by the way here's that modification so if we try to run the delete command and it takes the amy's out of the view again it's not allowed that's because there's_no obvious translation there's many possible translations in the underlying base_tables and again the structured_query_language standard disallows subqueries referencing the same table as the outer query because of the ambiguity of modifications on this type of view now that's not to say that subqueries aren't allowed at all in views that can be modified and here's an example where we have a subquery and the view is allowed to be modified this is a view of all the information_about students when the student has applied somewhere for a major that's like the major that's a biology major so we're using a sql like predicate here to match the major so let's go_ahead and create the view we'll take a look_at it and we'll see here that we have three students_who have applied to some biology type major let's say that we wanted to delete the first tuple from the view the tuple with the student name bob so we wanted to run this command here if we take a look_at the view definition we can see that what would make_sense here because we are selecting students is to actually delete the student tuple for bob and that is what the system will do there would be other possibilities like deleting the apply tuple so there is ambiguity here but the decision in the mysql system and in the structured_query_language standard is that if you have an outer query that's referencing a single table which is a requirement in the structured_query_language standard then a deletion from the view is going to result in a deletion from that one table so we'll go_ahead and we'll run the delete we see that it happened we'll take a look_at bio we'll see that the first tuple is gone but what's most_important is to take a look_at the student table and we'll see that bob is gone from the student table now it is the fact that bob's apply tupple actually is still present bob was id applying to berkeley in biology if we have set_up our database properly we'd probably have a referential and integrity constraint from apply to student and then the deletion to student would have either generated an_error or generated a cascaded delete but we didn't set_up those referential_integrity_constraints in this demo so only the student tuple for bob was deleted as a result of the view modification command now coming back to our bio view what if we decided we actually wanted to perfrom an insertion into the view let's take a look_at what we have and let's_suppose we want to insert another student who is applying to biology but remember the view is defined over the here we go i'm_sorry over the student table so that will result in an insertion into the student table just like the deletion resulted in a deletion from the student table so let's say we want to insert a new student karen here's her information and we want to insert her into the bio view so let's go_ahead and run the command and it seems to have been successful but let's take a look_at the view and there is no sign of karen well why is there no sign because all it did was insert a tuple into the student table here we go that's the basic translation and there's_no tuples for karen in the apply table we certainly didn't fabricate some application to some major that matches biology so this is again an example where we can have the underlying modification not produce a tuple in the view but it will effect the actual database so again we can use that check_option to make_sure that doesn't happen we'll create a new view called bio two and this one has the check_option let's go_ahead and now let's see what_happens when we try to insert_into bio so we'll insert another tuple and this time we get a failure because this can't translate automatically into an insertion that would actually have the effect that we want on the view so we saw that we could delete from the view with no problem but we can't insert_into the view so you_might_wonder why don't we always include the with check_option when we create views and certainly i would say that's a pretty good idea but it will have an effect on efficiency so if one can guarantee that all of the updates that are made to the view are going to have the desired effect when they are translated then the check_option can be left out but if there's any question it's a good idea to include it so now let's take a look_at a view that involves a join this view gathers information_about students_who have applied to stanford we can also see that in the view definition we're giving names to attributes in the view if we don't specify these names explicitly as in all of our previous examples it just takes the names from the schema of the select statement defining the view now that actually wouldn't be allowed in this case because we have two attributes called sid so what we're going to do is we're going to call the student_id that comes from the student relation sid the one that comes from the apply relation we'll call aid those are always going to be equal as we'll see but they are going to have some interesting effects when we modify the view there will be some meaning to having two different attributes also have the student name that comes from the student table and the major that comes from the apply table let's go_ahead and create the view and we'll take a look_at it's contents we can see that we have a set of students_who have applied to stanford now lets talk_about burning modification commands_against this view lets say that we wanted to change our two students_who have applied to major in computer_science they have their names not be helen and irene but be computer_science major instead of_course we wouldn't want to do that but it's good for illustrative purposes so here's the command and again we're updating through the view so we're saying update the stan view to set the student name to be computer_science major if they've_applied to major in computer_science we'll go_ahead and run that and let's take a look_at our view now we see that helen and irene are no_longer a helen and irene but they're rather both called computer_science major now we'll take a look_at what the update translated to so we'll go take a look_at our students and we'll see that what who are helen and irene are now changed to computer_science major so how did the system know to translate that modification to the student table given that the view is defined over two tables well we're updating the student name and the student name comes from the student table so the system will basically map the attributes that are being modified to the underlying table where the attribute came from and then it will perform the corresponding modification to that underlying table now that approach can introduce some problems let's say that we decide we're going the update the aid attribute in our view if we update the aid attribute the system will translate that into a modification to the apply relation but then we'll see that the tuples will no_longer properly join so let's see that through an example so here's our view and let's decide we'll take our first tuple and we're going to update it's aid to not be anymore but to be so here's the command that does that we go_ahead and run it and let's see what_happened in our view we refresh and we find that that tuple is gone we did not get the updated to and that's because down in our apply table we have that modification and we can see it's the first tuple to be modified to be but in our student table that student is still so it's another one of these examples whereas the underlying tables were updated as a result of asking for an update to the view but we didn't get the effect on the view we wanted by now you've probably figured out what we're going to do is add a check_option to our view to make_sure that bad behavior can't occur so here is the same view with the check_option we'll call this view stan and then we'll try to do a similar update to stan that we did before we'll try to update stan to set the aid to we go_ahead and run that and as expected the check_option fails and it doesn't allow the update now let's go_back to our original view without the check_option and let's see if we're allowed to perform insertions_into the view so first let's remind ourselves of the contents of the view here's what we have now and i'm going to try and insert_into this view a tuple and i'm just going to specify the student_id and the name and let's see what_happens in structured_query_language when i insert a tuple if i only want to specify some of the attributes i can list them in the insertion command give volumes for those and then we will put null for the other values so lets see if the system allows_us to insert_into stan well it seemed to and let's see what_happened here's our stan view and we refresh and it looks_like nothing happened let's look underneath at our apply tuple and we don't see any s happening there but if we take a look_at our student tuple in fact lance did appear so lets try something similar on our view that has the check_option so now let's try inserting mary into the view when we have the check_option and we see that it fails in that case which we would not want presumably but what if we first inserted into apply a tuple for mary applying to stanford and then we try to insert mary into the view now everything looks good and let's go take a look_at the view first here's mary and she was properly inserted into the view applying to history at stanford and and if we take a look_at student mary has been inserted there as_well and it's no problem having the null_values here because they weren't involved in our views and those attributes are allowed to be null in the underlying tables now let's try something similar with nancy before we try to insert nancy into our view and again this is stan with the check_option we'll insert a tuple for nancy into the apply relation but we are going to insert an application to massachusetts_institute of technology not to stanford so hopefully we'll get the first insertion but the check_option fails because when we try to insert nancy into the student table as a result of the view rather_than the system tries to insert nancy nancy will join her but not applying to stanford only applying to massachusetts_institute of technology and the last thing that we'll do is attempt to perform a deletion from the stanford view let's say we want to delete the student with id so the first tuple from the view so here's our command and when we run the command we see that we get an_error we cannot delete from the join view so the mysql system has decided not to implement deletions from joined views and in that case it's because again it's quite ambiguous how that would be translated a deletion from the stan view could be achieved by deleting from the student table or from the applied table or from both and because of that ambiguity the system doesn't allow it when we had a view that was defined over one table even with a sub query it was sort of more clear that a deletion from the view should delete from that outer reference table that completes our demonstration of automatic view modification we saw that in the mysql system when we create views and asked to write modification commands on the views depending on the type of view and the type of modification that modification may be translated automatically into a modification on the underlying base_tables now if we don't include the check_option sometimes that translation will result in modifications to the base_tables that don't have the proper effect of modifying the view if we include the check_option then the system will guarantee that the modifications it makes to the base_tables do result in a modification to the view mysql is a little_more generous in what views it allows to be modified over what the structured_query_language standard specifies for_example mysql does allow joined views with certain modifications also in the structured_query_language standard every view is either considered updatable or not if a view is updatable any of the modifications can be performed on it insertions deletions or updates in mysql since it's a binary_digit more generous about what views can be modified it's also a little_binary_digit more fine grained so we can have views that have certain types of updates allowed for example insertions and updates while other types might not be allowed for example deletions this video covers the topic of materialized_views as a reminder the reason that we use views in database_systems is to hide data from users to make some queries easier or more natural to express and to modularize our access to the database and real applications do tend to use lots and lots and lots of views so those views are for virtual_views virtual views are what we've been talking_about in our previous_videos i'm not actually sure i used that terminology a virtual view is the usual type of view where we define it as a query of the database we don't actually create a table for the view queries and modifications are rewritten based_on the view definition now there's also a notion of a materialized_view obviously for this video and materialized_views give_us the same advantages of virtual_views but one additional advantage which is perhaps the most_important one which is to improve query performance over the database so again as a quick reminder about virtual_views we define a view v say by giving a query to specify the view over some relations or even other views the schema of the view is the schema of the result of the query when we have a query queue so this is a user query that references the view v then conceptually not actually we can imagine that there is a table called v we run the view query over the current state of the relations we put the result in v and then we can evaluate the user query queue which refers to v now in reality what_happens as we already mentioned is that the user query queue is rewritten based_on the view definition to just use the base_tables now let's talk_about what_happens to materialized_views again exactly the same we define a view we give it a name say v and we define it as a query over a set of table or other views then the system actually creates a physical table v with the schema of the query result next the view query is executed over the current state of the database and the results are put physically in that table v now queries can refer to v as if its a table table because it actually is a table stored in a database this all sounds great of course there are some down sides the first down side is that v could be very_large when we talked_about virtual_views we showed some examples where we could create a view that was just enormous much larger than could ever be stored in the database but because the view was only a logical concept it wasn't a problem when users ran queries over the view they'd typically have selection conditions so you'd never be materializing that very_large view in materialized_views obviously you're creating the view and so it is a problem if the view is extremely large so that's one of the downsides the other downside is that we need to worry if the view is stored what happens when we have modifications to those tables over which v is defined we need to actually modify the stored table v either makes changes to it based_on the changes to the base_tables or completely recompute the view let's move now to an example and we'll use our usual sample database shown here at the bottom of the slide let's create a materialized_view we'll give it the name cacs it's for computer_science applicants to california colleges so this is a three way join over all of our relations and it's going to select the college name and student name when the student has applied to the college the college is in california and the student is applying to major in computer_science so once this command is issued the system will actually create a table called cacs and now the good news we can cacs in any query we want as if it's a table because it is now the down side is that the base data over which the view is defined is modified we have to worry that our view is invalid that it's become out of sync with with the base data so let's think_about what modifications could occur to the database that would cause the view to become invalid well we have to worry_about the three relations that are referenced in the view that is the college relation the student relation and the apply relation and for the college relation well inserts could change the results of the view we could have a new college it seems unlikely we could have a new college that the student will have already applied to in california for c s certainly deletes can affect the view and then updates to any of the attributes that are mentioned in the view and for the college that would be the college name and the state for the student table again inserts to student could affect the view if we already have an applied tuple and a college tuple that it matches deletes would certainly affect the view and again updates and in this case the attributes that are referenced from the student table are the student name and the student_id and finally apply again that is the most likely one that would have modification that would affect the view inserts deletes and again updates and here the set of attributes that are relevant are the the college name the student id and the major now if there is certain constraints on the database referential_integrity_constraints for example it might be that some of these operations couldn't affect the view for_example we might not be able to insert a college where there's already an application for that college or insert a student likewise we might not be able to delete a college if there's applications referencing it so if there are additional constraints that the system is aware of it might be able to eliminate some of these modifications but regardless many modifications will have to be monitored to make_sure that the view is modified to stay in sync with the base data by the way if this feels a little_binary_digit familiar to you when we talked_about general assertions over the database that was one of the types of constraints that we could specify we went through a similar exercise where if assertions were defined as clearly as over the database and we looked at what operations could occur what modifications to the database needed to be monitored to see if an assertion might be invalidated really an assertion can almost be thought of as a materialized_view over the database and if you look back at that video i think you'll see there really is a correspondence between those two concepts so just to reiterate the system xx materialized_views stored must monitor all the modifications that might invalidate the view when there is a modification either the view can be completely recomputed or sometimes there's clever algorithms called incremental maintenance algorithms that can just make small modifications to the view based_on the modifications that were made to the base data so we've talked_about queries over materialized_views very simple because the views actually stored in the database now what about modifications on materialized_views well there's good news and bad news the good news is that since the table is stored if a user issues a modification command and insert delete or update_command the system can just perform that command directly on the table the bad news is the base table still need to stay in sync with the view so really the exact same issues that we talked_about with virtual_views about a modification that the user wishes to execute on the view being propagated to the base_tables occur here the only difference is that we're actually modifying the view as_well as modifying the base_tables so i'm going to draw that same square diagram that we saw for virtual_views to explain again the issue with modifications on views so we have our view v and based_on our view queries view query q that view is defined over down here our set of relations that could be based table could be other views now the only difference with virtual_views is that based_on the view query in this case v is actually stored in the database so it's there relations are also in the database of course now the user comes along and the user says i'd like to perform a modification command on v could be an insert delete or update and as a result we can actually run that modification since v is stored so we get some new version of v prime now what the system has to do if it can is perform modifications down here on the base_tables and that would be producing then r prime through_rn prime and what we want is these modifications down here to be such that the view query when executed on the our primes down here would produce also v prime it's probably better to make that arrow upwards instead of downwards in any case i_hope that you get the idea that we still need to stay in sync and the translation of these modifications here as we saw in virtual_views have various issues sometimes there's_no good meaningful translation sometimes there are many translations and it's hard to know which one is the right one so again the exact same issues arise we're not going to talk_about these issues at length in this video i do want to mention actually that more often with materialized_views then with virtual_views sometime people just say i'm not going to allow the view to be updated materialized views are often used specifically for performance on queries and so users will be allowed to query the view but will not be allowed to modify the view now the next topic i want to address is how a database designer picks which materialized_views to create so for virtual_views were mostly used as extra layer of abstraction based_on modular access to the database or authorization concerns but as i_mentioned a couple of times already materialized_views are also used for increased performance and that makes the process of picking which ones to create fairly interesting so if we think_about the benefits of a materialized_view from an efficiency standpoint a number of factors play into whether a materialized_view is going to give_us increased performance better efficiency one of them is just the overall size of the database one is the complexity of the view if we have the view we don't have to re execute the query so if it's a complex query it might be helpful not to be re executing it over and over then there's the question of how_many queries are going to be issued on the database that use the view if we're going to query the view only once or twice it's probably not worth storing it and keeping it up to date the other question then is how_many or how often there are going to be modifications to the base data that affect the view because whenever we modify the base data but this affecting of the view means we have to do extra work to keep the view up to date i also alluded to this notion of incremental maintenance incremental maintenance says that we can take modifications to the base data and propagate them into the view without fully recomputing the view full recomputation can be a very expensive process so if we have a workload where we occasionally could use the view for queries but we're constantly updating the database and having to do full recomputation clearly it's not going to be worthwhile to create the materialized_view overall if we think_about the trade offs we're looking_at here at a high_level it's what's_known_as a query update trade off this actually occurs in various places in database design and applications so how often are we going to query the database where we get increased performance on our queries versus how often we're gonna get to update the database where updates are gonna cost us in performance so the idea is then to analyze the workload over the database also based_on these factors like the size of the data and the complexity of the view and decide whether we are going to get more advantage by increasing the queries and that's not offset by the disadvantages of the updates by the way does this sound familiar to you at all this query update trade off decision of whether to make this extra structure that speeds up queries but slows down updates probably if you're thinking you'll realize that indexes or when we talked_about them have exactly the same trade offs to consider when we build an index are we going to speed_up queries but we are going to slow down updates and actually materialize views in a certain way generalize the concept of indexes and in fact that brings us to our next and last topic which is the topic of automatically rewriting user queries to use materialized_views and this again is similar to indexes so when we build an index in a database for a database when we run a query we don't actually see that the query is deciding to use the index we build the index and it will speed_up the queries because the system itself will make that decision to use the index sophisticated database_systems these days are also starting to be able to look_at what materialized_views are present in a database and automatically rewrite queries to use those views without the user being aware of that the same query answer will be given it will be given faster based_on the use of an existing materialized_view so as a simple example of that let's_suppose we have a materialized_view with the student id college name and major of students_who have applied to a college in california this is similar to but not identical to the view that we showed earlier so this is going to be a stored table always up to date and this view is available to be used by the system if it can speed_up a user query so a user may come along with this query down here and what's this query doing it's finding students this time we're looking_at the id and the gpa of students_who have applied to a california college and they want to major in c s at that college and they have a gpa over so this query has been issued over just the base_tables but we'll see how the system might decide that if it has at its disposal this materialized_view up here it could modify the query to use the materialized_view and it will get better performance because this materialized_view has already done some of the work that would be done if we executed the query down here from scratch so here's what the system can do in the rewrite it can take this college relation out altogether that reference to college is gonna be taken care of in our view and let's change this apply here to be the california apply view instead of the apply relation itself with the college table gone we don't need that first joined condition anymore and we also don't need to check that the college is in california that's taken care of in our view the remainder of the query with apply replaced by california apply will give_us exactly the same result and presumably it will do it much faster again because some of the work in executing the query and evaluating the conditions has already been done when the view was created so you can imagine actually a very complicated and interesting problem for the database system itself it has lots of materialized_views let say stored in the database v v all the way to v you know and along comes a user query q might be a complicated query and the system wants to determine whether any of these views could be used to help q have better performance and sometimes that performance improvement can be really really significant again depending on the complexity of the view the size of the database the converse problem is a problem of figuring out which views we want to design to help our queries and again that's a very interesting problem as_well unfortunately many_times that problem is left to the human doing database design although there are some tools being developed right now as we speak to help users with that design problem so in summary materialized_views provide the same advantages as virtual_views in terms of their use for authorization for modularity of applications they have the additional feature that they improve query performance as long as the workload is appropriate and doesn't impose too much of a burden when the underlying base data is modified designing the right virtual_views for an application is a challenging process it's also challenging for systems to use the views properly but when they do there can be really dramatic performance improvements this video covers database authorization as we'll see its a relatively straight_forward topic but it is a very_important one authorization has to do with first making sure that users only see the data that they're supposed to see and second guarding the database from being modified by malicious users now one thing that we're not covering in this video are system or programming security issues such as structured_query_language injection errors what we are focusing on is security of the data access itself so the way database authorization work is that users of the database have specific privileges and then they can only operate_on data for which they're authorized through those privileges so it's similar to file system for example privileges and authorization except that it is specific to the database constructs database contents and tends to be more fine grained access than we see with file systems specifically for databases that privileges that are possible are on a particular relation to select the data for that relation or maybe just select the specific attributes so that's read privileges as far as write privileges or modifications we can set_up the privilege to insert a non relation or even insert specific attributesonly of a relation most structured_query_language implementations do allow you to insert data with only specific attributes specified we can have privileges to update a relation or update specific attributes and finally the privilege to delete from a relation so let's go straight to some examples we'll be using the standard college admission sample database that we've used in other videos the schema is shown here at the bottom let's_suppose we have a user who wants to issue the update_command shown they want to find students_whose gpa is greater_than and if those students have applied_anywhere they want to update the application record and set the decision to be yes so let's look_at what privileges would be needed by the user to execute this command so clearly we're going to have to have some privileges on the apply relation and some privileges on the student relation in the apply relation they're going to need to be able to update the decision attribute but there's_no other update privileges that are needed in terms of select privileges or reading the apply relation the only attribute that's being read here is the student_id so that's what they need for the student relation they're going to need to read the gpa as_well as the student_id so the privilege needed there is the select privilege over the student_id and the gpa so with this set of privileges the user would be allowed to execute this operation in our next example suppose the user wants to delete all students_who_haven't applied_anywhere so they're deleting from the student relation where the student_id is not in the set of student ids in the applied relation so for this one again they'll need privileges on the student relation and on the apply relation on the student relation the user would need the delete privilege and delete never has attributes associated_with it because you are always deleting entire tuples the only tuple that's actually the only attribute that's actually being read from the student relation is the student id so the user would also need the select privilege on student id and then in the applied a relation again only the student_id is being read so the user would need the select privilege on apply of the student_id and with these the user will be permitted to execute this operation so far so good but now let's introduce a little twist let's_suppose that we have a user that we want to authorize to access information in the student relation but only for students_who have applied to stanford how can we possibly do that why don't you give that a thought well i'll give you the answer right away the way we do that is actually by using views so we can create a view that gives_us the student information for stanford applicants only then we can grant users privileges on the view rather_than directly on the relations so here's our view it says we'll find all students where their student is in the ids of the students_who have applied to stanford and we'll call that view ss for stanford students now we can give a particular user the select privilege on ss and that allows them to select the data that's in the view but not see any of the data outside of the view specifically they won't be able to see student information if the students didn't apply to stanford let's take a look_at a second example that involves views let's_suppose that we want to authorize a user to delete applications but only applications that are to berkeley so again we'll set_up a view this one's a little simpler it's just the view of the app of the records of the apply relation where the college name is berkeley and we'll call the view ba and then what we want to grant to the user is the ability to delete the delete privilege from the b a view now in this case we do need to have that view be updatable by the system that's supporting it so in our video about views we discuss this issue those are the only examples i'm going to give for now but i do want to emphasize that views are quite important for customizing authorization to specific user needs and in fact authorization is one of the most_important uses of views in database_systems now let's look how privileges are obtained when a relation is created the creator of that relation becomes the owner of the relation and the owner of the relation has all privileges and furthermore may grant_privileges to other users so there's a grant statement in the structured_query_language standard and it looks_like this we grant_privileges on a particular relation to one or more users and we have the option of allowing those users to further grant_privileges to others specifically the privileges themselves are the ones that we defined earlier and we can have a comma separated list of them so for example we could say here something like select student_id comma delete and that would give those two privileges the users are a list of actual user names on the data base there's also the user pre defined user called public and that would grant the authorization to any user of the database and finally the grant option allows the users who are getting the privileges to grant the same or lesser privileges to other users now what do i_mean by lesser well it's pretty_simple if we have say select and attributes abc then a lesser privilege would be something like select a and b now how about the revoking of privileges this gets a little_more interesting so the command is revoke privileges again it would be a list of privileges on a particular relation from users and again that would be a list of user names with the possibility of the special name public and then there are two option for revoking privileges called cascade and restrict and they may have to do with what_happens when privileges are being revoked from a user who was granted the ability to grant_privileges to others so let's take a look pictorially at what can happen let's_suppose that we have a user who has a privilege to say select on a particular relation r and we'll draw that is the root of a graph and let's_suppose that's say user u and let's_suppose that user grants to user u the same privileges select on 'r' and let's_suppose that's with the grant option and this is user 'u ' so user u is allowed to further grant_privileges to other users and those may further grant_privileges to others and we may get a big sub tree here now let's_suppose user u decides to revoke the privilege that was granted to user u so what cast it says is if there is revocation of that form then it will cascade down the tree so if you too further granted privileges then those would be revoked and so would any privileges down below so this entire sub tree is effectively removed all of those privileges however we have to be a little_binary_digit careful because it's possible that say u was granted the select privilege by a separate user i guess we'll call this one u who also granted exactly the same privilege and in that case if u does the revoke we don't want to revoke u 's privilege because u got it from another source so technically what cascade says is that when we revoke a privilege we revoke any privileges transitively when they weren't also granted by another source so what your seeing here is actually called a grant diagram and i'm not giving you all the details of grant diagrams but you can see basically what they do and their used is to properly cascade the revoking of privileges so again the cascade option and the revoke command says to also revoke any privileges that were granted from the ones being revoked transitively unless they were also granted form another source what the restrict option says is that the revoke command is not allowed to execute if cascade would revoke any other privileges so if we have any of those transitive cases so if we do have the transitive cases and we want to use restrict and we have to manually revoke those privileges effectively bottom up through that graph that we say incidentally restrict is the default in the revoke command so if neither of these options are specified then restrict is the one that will be enforced lastly let_me talk a little_binary_digit about where privileges actually reside in reality so we have our data that's being managed by a database system and typically we'll have application developers who are working directly with the database system often developing modules that will be invoked by the end users so those application developers have to have privileges on the database to create the modules but then we have the software that sits above the database system that is used by end users and the end users typically don't have privileges themselves they might have separate privileges privileges to access the modules but they're not going to be using the privilege system of the database system and similiarly there may be even more software layered on top of the software that the application developer builds and again that software itself wouldn't be having database privileges but might have an authorization system for the software that it's accessing to summarize database base authorization is important it makes sure that users only see the data that they're authorized to see it guards the database against being modified by malicious users there's a privileged system similar to file system privileges but specific to database constructs and users can only operate_on the data for which they're authorized via their privileges there's a grant statement and a revoke statement in the structured_query_language standard for granting privileges and revoking privileges and again when a relation is created the owner of the relation starts with all privileges so that's where the granting would begin and finally for having privileges that go beyond simple table level operations views are a very_important construct and in fact authorization is one of the most_important uses of database views in this video we'll show how recursion has been added to the structured_query_language language we'll show the with statement which is a regular part of structured_query_language and then we'll show how with can be used to write recursive queries we'll describe a few examples that can't be written without recursion in structured_query_language and then in a follow up video we'll give a demo that will show the examples in action so structured_query_language is not what is known_as a turing complete language for those of you who are familiar with the idea of turing completeness it says that pretty_much any computation can be performed by a language and that's simply not true in structured_query_language so structured_query_language has some nice features it's simple convenient declarative meaning we don't have to say how to execute queries just what we want out of the queries we've talked_about that many_times throughout these videos we find that structured_query_language is expressive enough for most all database queries we want to do except for one type and that's the type that involves unbounded computations the basic structured_query_language language does not have features that allow_us to do those and i'll motivate those with a few examples i'll just say up_front that when unbounded computations need to be performed use a database typically there's some programming in a programming language that will be accessing the database over and over to do those computations but we're also going to see that structured_query_language has added a notion of recursion that allows_us to perform unbounded computations so in each of my examples i'm going to give a relational schema and then a query we'd_like to write over that schema but we will see that we can't the first is a simple ancestors computation so for example we might have that sue is a parent of mary and maybe bob is also a parent of mary and maybe fred is a parent of bob and jane is also a parent of bob and so on so we're just listing the parent child relationships in our relation called parent of and then our goal is to use that relation to compute say all of mary's ancestors so we can certainly write a structured_query_language query that finds mary's parents i'll let you do that as an exercise it's very straight_forward we can even write a query to find mary's grandparents a query to do that and again i'm not gonna write it here would involve two_instances of parent of so you'd be joining parent of with itself we wrote queries of that form when we were working with basic structured_query_language in our videos and you know we could even find the great grandparents by using say three instances in joining them the problem is that we might not know in advance how_many steps there are to get all of mary's ancestors and each one of those steps does involve an instance of parent of and adjoin so this query can not be executed using standard structured_query_language here's our second example a little_more complicated it involves three relations and they represent a company hierarchy we're going to have manager employee relationships we're going to have projects and we're going to have salaries so our first relation employee just gives_us the salary of each employee our second one gives_us the manager relationship and what this is saying is say that the employee with id is a manager i'll draw it like a tree here of two three four who himself might manage a few other employees and so on so we have a hierarchical structure of the management in the company and you'll see you can already probably recognize that this is similar to the parent relationship that we had in our previous example and finally we have a set of projects that gives the name of the project and the manager of that project and the query that we would like to run over this database is to find the total_salary cost of a given project let's say project_x so for example if happens to be the manager of project_x then the total_salary class would be 's salary plus 's and so on down the hierarchy so i'm not even going to try to write a structured_query_language query here again you can do that as an exercise if we knew precisely how deep the tree was below the manager of project_x then we could again use these self joins that would be on the manager relation this time to find all the employees that are in that sub tree of project_x and add up their salaries but if we don't know the depth of that hierarchy then it's impossible for us to write a structured_query_language query that goes to arbitrary depth to add up the costs by the way let_me_mention that one of the reasons i'm not bothering to write the exact structured_query_language right now as i motivate these examples is that we are going to see the sqls shortly when we do the live demo and the third example and my personal favorite is finding airline flights from a starting point to an ending point at the cheapest cost so let's say we have a relation here that lists all flights the start of the flight the end of the flight the airline and the cost of the flight and we're interested in flying from point a to point b now if i happen to be a very conservative traveler and i don't want to change planes more_than twice then i'm in good shape and i could still write this using structured_query_language because i'd be only willing to take flights and i could just join three instances of the flight relation matching the destination of a flight with the origin of the next one and then adding up the costs and finding the cheapest one it's not a trivial structured_query_language query to write again i'll leave you that as an exercise and by the way i often give that very query as an exercise in my class but when we don't know the number of flights we want to take so if we are a very frugal traveler whose willing to spend arbitrary amounts of time to get the cheapest flight then we can't with regular structured_query_language write a query that explores arbitrary numbers of flights to finds the cheapest_way to get from point a to point b so as you've probably surmised all three of these examples are going to be expressible once we have recursion in the structured_query_language language so next i'll introduce the with construct in structured_query_language the with construct is actually present even without recursion but it is the construct that was used to add recursion to the language so here is the width statement in structured_query_language we give the keyword with and then we list one or more new relation names so r rn would be relations that don't exist in the database and each one of those is tied to a query so what we're effectively saying is that r is going to contain the results of query one or two of the results of query two and so on once we've set that up then the final part of the with is a final query that can involve any tables in a database and can also involve these new tables r through_rn in some ways you can think of the with statement as setting up temporary views so it sets up a view for each one of these r's then runs a query involving the views and then the views go away or if you want to think of them as materialized_views you could think of these as assignment statements where we have the as so we create the table r we put the data in and then we run the query in reality most systems implement the with statement like for generalized virtual_views and they'll rewrite the query down here to be expressed over the tables that are used in these queries we'll be seeing examples of the with statement when we get to our demo it will of course be the recursive with statement just one more notational point just like as with views what normally happens is the schema of one of these rs is inherited as the schema that's the result of the query that's associated_with the r but if the user i_mean the designer the one writing the with statement wishes to have a different schema different names for the attributes those can be specified explicitly and then those would be used in this query when r is referenced so now here's the fun part we can specify recursive as a key word after with and that let's us write recursive queries in this first portion of the with statement very_specifically in query one here we an actually reference relation r which is the relation we're defining with query in a recursive fashion in query we can reference r we can actually also have a mutual_recursion which i'm going to focus_on in a separate video but that would be saying not this exactly that would be saying query could reference r and query would reference r but again we'll be talking_about that in a separate video for now we'll just talk_about recursion within each specification of one of these rs by the way one thing that i wanted to mention is a sort of syntactic inconsistency the structured_query_language standard actually says that this recursive modifier here goes with the relation specification so if r is recursive we would say recursive r if rn was recursive we'd say recursive rn the implementation that we're going to be using which is the postgres implementation actually says that recursive modifies the with so when you say with recursive then any of the ri's are allowed to be recursive now let_me show what the typical form is of one of these recursive specifications in the with statement so this example i'm giving has just one r specified in the with statement and then the query at the bottom again this is the final result of the recursive with statement involves r and possibly other tables of the database the typical way to define a recursive query is to have a base query and that would be over non over tables other than r so not r in this base query sort of to get the recursion started and then r will be the result of that base query together with the recursive query so here we will reference r and the idea is that the result of r the r that's seen when we run the query down here is what's_known_as the fixed point of running this union over and over again until we add no additional tuples to r one other thing that i wanted to mention is that this form of the recursion this idea here that we have the base query and a union with the recursive query is not enforced in the structured_query_language standard the structured_query_language standard merely says that we can specify r here and then any query inside the parenthesis that reference r although there are a number of restrictions this division into a base query and recursive query isn't required we'll be talking_about some of those restrictions late on actually in a separate video in the implementation that we're using the implementation it actually does require this form where you have a base query union and recursive query but that's not really a problem because all natural recursive queries at_least the ones i've seen and for the examples we're going to look_at do take this form and one last thing i want to mention is about the union operator first a reminder that in structured_query_language when we say union as opposed to union all we're talking_about duplicate eliminating union that means that when we add a tuple to our union that's already there we don't actually add a tuple and that's really key to this notion of reaching a fixed point or with the recursion terminating because we might be running the recursive query that over and over gives_us additional tuples but if those are all tuples that we already have in r then we won't actually be adding anything new because the union eliminates duplicates and that will tell_us our recursion is done as you can imagine if i wrote union all instead then i'm continuously adding new tuples and my recursion will typically not terminate so it's not common maybe never to see union all used in recursion but rather the duplicate eliminating union operator so now that we've_seen a number of examples that need recursion and we've_seen how recursion has been introduced into structured_query_language the next_video will give a demo of these queries in action this video gives a live demonstration of the recursive constructs in structured_query_language that we introduced in the previous_video as a reminder recursion has been introduced intosequal as part of the with statement where we can set_up relations that are defined by queries that themselves refer to the relation being defined and finally we have a query that can involve the recursively_defined relations as_well as other relations or other tables in the database the typical expression within a with statement for a recursively_defined_relation would be to have a base query that doesn't depend on r and then a recursive query that does depend on r we gave three examples in the introductory_video and those are the same examples that we'll be demonstrated shortly the first one was to compute ancestors when we have only a parent relation and the family tree could be arbitrarily deep our second example was a case where we have an arbitrarily deep company hierarchy and we want to compute the total_salary cost of a project starting at that project's manager and summing the salary of the entire sub tree and our third example was about airplane flights where we want to find the cheapest_way to fly from point a to point b and we're willing to change planes as many kinds as we might need to in order to bring down the cost we saw that all of these examples involved basically a notion of transit of closure computed as a recursively_defined_relation the last portion of our demo after we see these three queries solved using recursion will introduce one more twist which is what_happens when we introduce cycles so in the airline example we'll set_up a case where you can fly from one city to another one and back which is of course true in reality and we'll see what_happens when we try to answer our query in that setting i've started by creating a table called parent of with parent child relationships so we have alice carol bob carol carol dave and so on you_might actually want to write this down on a piece of paper to see what the actual tree looks_like but the query we want to run is to find all of mary's ancestors so we're going to of course have eve as a parent and dave as a parent and then dave's parent is carol and carol's parent is bob and so on we'll get most of the data in our database in our query so here is the query our first example of our recursive query let_me say right off that even more_than anything else we've done in these videos i_am going to encourage_you to download the script and take a close look_at the query and preferable actually run the queries and play with them on the postgres system and we are using for this demo postgres as sqlite and mysql do not support forth the with recursive statement at this point in time so anyway here's our query and it is the form that we described in the introduction it's a width statement with recursive that's going to set_up a recursive relation called ancestor so this is what we were calling r earlier this is our ancestor with a schema administrative domain for ancestor and descendant our final query once ancestor is all set_up is very_simple it just says take the 'a' attribute from ancestor where a descendant is mary so that will give_us mary's defendant of_course what's interesting is what's right here inside these parans because this our recursive query and it does take the form we described of having a base query that is the first line and then the recursive query with a union between them so we're going to start_by saying that whenever we have a parent child relationship that's also an ancestor relationship so we're going to take from our parent of table the parent and child and we have to rename them as a and d and that says that parent children are an ancestor what else in an ancestor well if we have a tuple an ancestor an ancestor and a descendant and that descendant is the parent of a another person then the a and the ancestor together with the child from the parent of is also an ancestor relationship so this is a kind of doing the join not just kind of it's actually joining our ancestor as its being created and extending that relationship by joining with another instance of parent so you can kind of think of going down the ancestor tree adding relationships as we go down again i really can't encourage_you enough to download this query and play with it yourself to fully understand what's going on let's go_ahead and run it it's going to be rather anticlimatic when we run it we do discover that these five people are mary's ancestors and if you've drawn the little tree of the data you can verify that that's the correct answer let's play around a little_binary_digit let_me try a few other people's ancestors let's try frank we don't see frank here because frank actually happens to be a child of mary's so we should get even more ancestors when we run this one especially mary should be included and in fact she is there she is and these are frank's ancestors let's try george i think george was somewhere in the middle of the tree there yes george has three ancestors and finally let's try bob bob is at the root so we should get an empty result and we do because again bob has no ancestors in our database now lets take a look_at our second example that was the one where we had a hierarchy of management chain in a company and then we were interested in computing the total_salary cost of a project so i've set_up our three tables the first one is the employee table it just gives the ids of the employees and the salary of each employee the second table is the manager relationship so again you might want to draw the little tree here although it's pretty_simple this time is at the root of our little management structure as as a subordinate has two subordinates and and is another one so it's only a three level tree of_course if we knew it was only three levels we wouldn't need recursion at all but we're going to write a query that will work for arbitrary numbers of levels so that's our management structure and finally our third table the project table says that employee is the manager of project_x so what we want to do is find the manager of project y in the hierarchy and then take that manager's salary along with the salary's of all the manager's subordinates recursively down to the management structure and of course that's everybody in in our little database again i can't encourage_you to download the script and run it for yourself so here's our query to find the total_salary of project x and i'm actually going to give a couple of different_ways of running this for you the way we've done it the first time is to effectively expand the management structure into a relation called superior so that's really pretty_much doing the ancestor computation which by the way is a transitive closure i should have mentioned that earlier for those of you familiar with transitive closures it's basically that operation so we're going to compute these superiors so that we'll have every manager and employee relationship with a manager is arbitrarily above the employee and then once we have that superior relationship computed then we write a actually a fairly_complicated query so this is the final query of our with statement and this one says we've_got this recursive relation superior we're going to the salaries from the employee relation where the id is either the manager of the project_x so that's the first half here or an employee that's managed by the manager of project_x okay now this down here i just want to emphasize this is not recursive it just so happens to have that same structure of union but there is nothing recursive happening down here so this is just a regular structured_query_language query once we have the superior relation that's the transitive closure of the manager relation so let's take a look_at superior superior here this is recursive with the union says that if we have a manager and that's the mid and eid then if somebody is managing someone else then they are their superior notice by the way i didn't specify a schema here so the schema is implicitly going to be m i d e i d so we're going to put manager relationships in and then if we have a superior relationship so if we have an mid managing an eid in the s relationship then we can add one more level because we join with the managers saying that if s is a superior of y and why is the manager of z been x's superior of z this parallels exactly what we did with the ancestor computation in the previous example again it's going to be rather anti climactic to run the query but let's do it and we find out that four hundred is the total_salary cost of project x when we count the manager of project_x together with all of the people underneath that manager in the hierarchical structure so when we think of recursion we often think of transitive closure or expanding hierarchies as we've done with our examples so far but if we step back for a second we can see that there is a quite a binary_digit simpler way to express the query that finds the salary burden of project_x now not only is this actually nicer to look_at it's probably much more efficient depending on how smart the query processor is in our previous example if the query processor executes the query in a straight_forward way it would compute this superior relationship for the absolute entire company hierarchy before it figured out which of those people were involved in project_x now a really good query processor might actually figure_out to fold in a project_x but not necessarily here's an example and here's a new formulation of the query we're actually going to tie x specifically to our recursion what we're going to compute in our recursive with statement here so this is the temporary relation we're computing is a relation containing just a list of the ids of the employees who are involved in project_x once we have all the employees involved in project_x the query down here is trivial we just find those employees who are among the x employees and we sum up their salaries so let's take a look_at the recursive definition here and again it's taking the usual form of a base query union and recursive query and here's what we do well obviously the manager of project_x is one of the ids involved in project_x so here we find in the project the project name text and we take the manager of that project and we put that person's id into xemps that's the first id that's going to go in there that's going to seed the recursion that's again the base query then we add in our recursive step any employee who is managed by anybody who's in the x employees so we'll take our manager relationship our x employees relationship and if the employee's manager is an x then that employee is also involved in x so we seed the recursion with the manager of project_x and then we just recursively go down the tree adding all of the employees that are underneath one by one we don't have to know the depth of the tree because the recursion will continue until nobody else is added i guess i should have mentioned that earlier in my earlier examples again the recursion sort of adds a data over and over again until there's nothing new to add and that's when it terminates so let's go_ahead and run the query anti climatic again but we get the same answer as the salary cost of project x now we use the same form of query to find the total_salary cost of two projects y and z and that will also demonstrate having two relations that are defined in the width recursive command so i have added project y and z to our project table and they're both managed by employees who are already in the database so they're a little lower down the hierarchy we should expect those projects have lower total_cost that's for project_x whose manager was at the root of our hierarchy so here's our query it's a big one we're going to define ym and zm exactly as we defined x amps in the previous example so y amps is a table of a recursively_defined_relation temporary that's gonna contain a list of ids of the people the employees that are involved in project y so we are going to put the manager of project y as our base query and then we're going to add to it in the recursion all of the employees who are managed by someone who's in the yms and zm's exactly the same we start the manager of project z and then we add to it all of the people are managed transitively down the tree by someone who's in the zm's relation and then our final query down here for the statement is a union of two queries the first one gets the total_salary for y and it labels it as y total so it takes all the ids that are in the y table and from the employee table get their salaries and sums them up and similarly the z total so now we'll run this query it will be slightly less is anti climactic we do have now two tuples in our result we see that the total_salary for y is in the total salaries for z is and if you check cross check this result against the data you'll see that these are indeed the total salaries when we take the managers we specified for projects y and z and finally our last and most fun example the one to find how to fly from point a to point be when all we're concerned about is cost and we don't care how_many times we have to change planes so here's the little flights table i've set_up and i used a and b so we can literally fly from point a to point b all of our intermediate destinations are actually real airport codes and i've put in some airlines although they're not actually going to be used in our query and then i've put in the cost of the flights you_might want to draw yourself a little graph so you can see what's going on and we can fly from a to chicago for from chicago to b for another or we can go from a to phoenix and then phoenix to las_vegas to las_vegas to oh oh i don't remember what this is cmh detroit cincinnati somewhere in the midwest and from there to point b or we can take a non stop from a to b on good old jet blue for so clearly we're never going to be going through chicago for a total of with that jet blue flight but i've set_up the data as you're probably not surprised so that this long route through phoenix and las_vegas and somewhere in the midwest is in fact gonna be our cheapest_way to go so now let's take a look_at the recursive query that's going to find us our root from point a to point b or at_least find us the cheapest_way to get from point a to point b so the first query i'm going to show actually gives_us all the different costs of getting from a to b just so we can see those enumerated for us and then we'll modify the query to give_us the cheapest cost so here's the recursive query and we're going to use a recursively_defined_relation called root and root says that we can get from an origin to a destination for a particular total_cost ok so we again in our recursion have the base query and the recursive query this is exactly what you'd imagine we can certainly get from point x to point y for a total_cost if we can take a direct_flight from point x to point y for a given cost so that's our base query we start out with all of the direct flights in our route relation and then we start adding routes by doing the join of a route with a additional flight so basically what this join here says if i can get from the origin in a route to the destination and then that destination is the origin of another flight then i can add that flight i can start with my original origin final destinationand the cost of that is going to be the total that i already had plus the cost of the new flight and that's my new total so again this is another transitive closer like recursion it's very similar to the ancestor recursion very similar to expanding the company hierarchy the only real difference here is that we're also accumulating these costs as we do the recursion so once we've done this recursion then we have a complete specification of all the roots within our flights database all of the way's we can get from a to b and the total_cost now one thing i should say is this is not actually giving_us the ways of getting from one place to another if we wanted to accumulate the actual route that we take so the flights and the costs and the airlines and so on we have to kind of use a structured structure inside our data base to accumulate those there are ways of doing that but i'm not going to demonstrate that here i'm just going to demonstrate the is accused of recursion and computing the total_cost ok so let's go_ahead and run this query so we've computed all of the routes and then we're just gonna start_by finding the routes from a to b and what the total_cost of those are so we'll run the query and we'll find out that there are three ways of getting from a to b the first one happens to be that direct jet blue flight for the second was the flight through chicago for a total_cost of you can go_back and look_at the data and verify these and the third one was that complicated routing where we stopped several times but we save a lot of money well twenty dollars over the direct_flight by going through those cities because the total sub cost is i'll leave it up to you whether it's worth twenty dollars to stop several times versus the direct_flight so now since my actual specification of what i wanted to know was the cheapest_way to go then i just say min total instead of in my final query and i run that and my answer is that is the cheapest_way to get from a to b now here is an alternative formulation of the same query that essentially parallels the alternative that we looked at with our project cross where we built in project_x into our recursion that simplified the recursion in that case in this case it's not simpler but it could potentially be more efficient we're going to build in the fact that we're starting from origin a so instead of finding all roots from any point to any other point in our recursion and then finding the roots from a to b let's create a relation recursively that says starting from point a i can get to a particular destination for a particular total_cost so this is going to build up roots starting from a the base query is going to of course start_by looking_at direct flights where the origin is a and is going to put the destination and the cost into our relation called from a so that starts with that first gives_us direct start from a where we can get on the direct where we can get to and how much it will cost us and then our recursion is going to add flights to that one again it really parallels what we did with the project x our recursion is going to say ok we know we can get a from particular we can get to a particular place from point a for a certain cost and that's our destination if we add more flight so the origin of that flight is the destination of where we can get then that will also be a destination that we can get to from point a and we'll just add the cost of the additional flight on one more time a strong suggestion that you download and try these things for yourself once we found all the places we can get from a then we'll use that to figure_out the cheapest_way to get to point b but let's just start_by running the with statement where all we do is see the places we can get to from a and the total_cost of getting there so here we go and we can get to chicago phoenix or we can get to b a couple of different_ways three different_ways actually as we already know we can also get to las_vegas and this mysterious cmh i wish i remembered what it were so now if we're interested in finding the cheapest_way to get from a to b then we'll add where the destination equals b on here and we'll add the minimum total_cost and hopefully that will be our good old and indeed it is by the way we can do the same basic_idea but backwards instead of finding all the places that we can get from city a how about if we find all the places from which we can get to city b so here's the query that does that to b is going to be our recursively define relation that's going to give_us the origin the place from which we can get to b and the total_cost of getting to b from that place so again the structure is exactly parallel we start out with our base query saying if we have a direct_flight to b then we can get from the origin of that direct_flight at the cost of the flight to b and we then recursively add flights on that you can think of if your going from left to right adding flights from the left so if we know we can get from a place to b and then we can go from take a direct_flight from somewhere else to that place and we can get from that somewhere else to be anyway so we do that again by joining so we're going to take our origin from which we can get to b we're going to find flight that take us to that origin we're going to add the cost of that flight and that gives_us a new way to get to b and then let_me start_by just writing the query that all of the places from which we can get to b and the cost of getting there we'll run the query and we can see that we can get to b from point a in different_ways and from our other cities in our database as_well similarly to what we did previously if we're particularly interested in getting from a to b whoops let's make that our origin then we add where origin equals a and if we want the minimum it would be our minimum total again paralleling exactly what we did before we run it and good old comes out now we're going to have some real fun because i added another flight to our database and this flight takes us from columbus i now know its columbus to phoenix and creates a loop in our flights so that means that we can fly from a to b next to las_vegas to columbus back to phoenix and then to las_vegas and columbus again so we're going to have arbitrarily actually unbounded actually infinite length routes that we can take now now obviously those routes aren't going to ever be the cheapest_way because as we take those roots it's going to get more and more expensive none of them are negative costs paying us to take flights but if we just do our naive recursion where we generate all of our roots before we take a look_at our final query then we're going to be generating an infinite number of roots so here's our original enquiry the first one we wrote where we were just finding all of the costs of getting from a to b by computing all of the roots in the entire database and then looking_at those from a to b now with our additional flight that creates a loop we run this command and nothing happens actually if we wait long enough we're going to get an_error well okay we waited for a while appears that the user interface we're using isn't going to show us the error but if you try running this in post risk command line interface i assure you if you wait long enough eventually it will tell you that the recursion effectively overflowed so it is trying to compute this unbounded number of routes in the recursive part of the with statement and never even gets to the query that we want to execute ok here's my first attempt at fixing the problem we know that we're never going to want to take a arbitrarily long route we're never going to want to go around a cycle lots of times as our cheapest_way to get from point a to point b so what i've done here and i'm not going to go into this in great detail but i have added a condition in the recursion that says i'm only going to add a new route a new route into my recursively_defined route table when the total_cost of that route and that's defined as the cost plus total here when we added is less then all of the ways we can already get from that place to that origin to that destination so in other_words i'm only going to add cheaper routes than the ones that are already there and by the way if there are no routes already from the origin to the destination then this will be satisfied and we will add that first route then after that only adding cheaper ones so let's try running this query and see what_happens well we got an_error now this is not a runtime execution error this is actually an_error that says we're not allowed to refer to our recursively_defined_relation in a sub query within our recursion the structured_query_language standard actually might allow this particular use but i don't know that any implementation actually handles it it can be fairly difficult to handle a case where you have the recursively_defined_relation in a subquery as_well as in the outer query here so that's obviously not going to solve our problem now there's actually a feature of basic structured_query_language that can help us here with our problem there's something called limit we actually didn't discuss this in the structured_query_language videos but that says just give_us this number of results so let's say that we're going to have our recursion here for the roots but down here we're going to say i only need up to results for how i get from point a to point b and the posary system actually makes use of the limit command in the final query to restrict the recursion it's a nice feature and it was added specifically for this problem of possibly infinite recursions where we actually don't want it to be infinite because we only need a finite number of answers okay so let's go with that here and we'll see that ah great everything worked well we got our roots from a to b and i do have roots i_mean so they're getting very expensive down here i'm going to go around and around the mid west while lots and lots of times but that did the limit the recursion it did stop unlike our query where we didn't have the limit and it just went on indefinitely so that looks pretty good with one unfortunate problem which is if we still want the minimum we're going to again get a infinite execution so the old result is still sitting here but now the system is chunking on because the limit here is applied to this min to the number of tupimit the recursion we're always going to get only one tuple in our result so even if we said limit one here we'd still get the infinite behavior so we haven't quite solved our problem okay so here's what we're going to do aesthetically maybe it's not the absolutely best solution but i'm going to argue that it's a pretty reasonable one we tried limiting our recursion to only add new routes that were cheaper than existing routes to and from the same place we weren't allowed to do that syntactically the recursive with statement didn't allow the sub query with the recursively_defined_relation in it so we're going to do a different change here where we're not going to add new roots to our flight when the length of the root in other_words the number of flights contributing to that root is greater_than or equal to ten so how do we do that we're going to add to our recursively_defined_relation route the origin destination and total_cost of that and then we are going to add the length and so that's going to put in each root tupple how_many flights were involved in the root so let's see how we do that with our recursion we still have the base case here and the recursively_defined union in our base case we're going to be adding to our route the non stop flights so we'll have exactly what thought we had before and then we'll have the constant one to say that this non stop flight is just one flight then when we do our recursion we're joining our route relation that we're building up by extending it with an additional flight exactly as before but there is two changes here one of them is that we're going to compute our new length by adding one to the existing length of the root for our new root because we're adding one flight and then we're only going to add tupples to the root relation when the length of the route that we're adding is less_than ten so now let's see what_happens i'm going to start again by looking_at all of the costs of getting from point a to point b and then we'll take to look_at finding the least so we'll go_ahead and execute the query and we see that we have one two three four five ways of getting from a to b where the length of the number of flights involved is less_than or equal to we see our friends here this was the nonstop flight this was the one through boston here's our favorite one and there's a few more so these are going to go through that cycle a couple of times but once we get to the length of ten we're not going to add any more so we've_got termination and if we want to change it to find the minimum cost flight then it's just the min total as before and we'll find good old now what 's unaesthetic about this is that we're actually limiting the amount of recursion so the whole point of writing recursive queries is when we don't know the minimum number of computations that we need to do to get our answer so maybe it would so happen to turn out that more_than ten flights were required to get the cheapest and if that was the case then we wouldn't get our right answer of_course we could change it to a hundred and we'd still get the one seventy five and you know honestly we could change it to and you can't see it happening here but it is actually recomputing that even when i put in i can even do a and still going to work for me so if we presume that nobody wants to take more_than a flights in order to get from point a to point b in the cheapest fashion then this would be a reasonable way to bound the recursion and get the answer that we want even in the presence of cycles in our relation in this video we'll be exploring some further issues involved in recursion in the structured_query_language language first a reminder of how structured_query_language implements recursion there's a with statement in structured_query_language that can be specified to have recursively_defined relations in it we say with recursive and then we define a set of relations where the query to find relation could involve the relation itself so that's where recursion pops in and then at the end the final result is a query that might involve those recursively_defined relations as_well as other tables in the database as we saw in the previous_video and demo it's very common for recursively_defined relations in the with statement to take the structure of having a base query that doesn't involve r the recursively define relation unioned with the recursive query and we saw many examples of that form the first thing i want to talk_about in this video is what's_called linear_recursion linear recursion specifies that in the recursive definition of r and again let's assume it takes this form of the base query union and the recursive query in the recursive query there is only one reference to the recursively_defined_relation r so let's take a look_at an example to understand linear_recursion and nonlinear recursion the first example we used when we introduced recursion was finding ancestor relationships from a base table that just has parent child relationships so a basic transit of closure operation and the query we wanted to run was to find all of mary's ancestors and here's the query that we wrote it does take the form of having a base query here which says if we have a parent relationship that's also an ancestor relationship and then the recursion occurs in the second part of the union where we join the recursively_defined ancestor relationship ancestor relation with parents so that we extend the ancestors with one more generation now this query does have linear_recursion because we only have one instance here of the recursively_defined_relation ancestor so let's take a look_at what_happens underneath when this query is executed we start with our parent table and here it is with a parent and child and let's_suppose we have say sue and john and john and mary for example in our parent table then in what's effectively the first iteration the base query here is run that copies the parent table to the ancestor table so now we have sue and john and john and mary and anything else that we had in the parent table in the ancestor table as the iteration continues we're effectively joining the parent table and the ancestor table to get additional tuples in the ancestor table for_example we see that sue and john the sue and john tuple here would join with the john and mary tuple and that would give_us sue and mary in the ancestor table the iteration continues until there are no new tuples to add to the ancestor table and then we're done with our recursively_defined_relation and we can go_ahead and execute the final query in the with statement and again often when i say we i really mean we the system all of this is of course being performed by the system as it executes the recursively_defined with statement now let's take a look_at a non_linear expression of the same query and here it is what we see here is that the primary change is right in here instead of joining the parent with the ancestor in the recursive half we're going to join two_instances of the ancestor relation and let's see what_happens during execution when this is how we express our recursion so we again start_by copying the contents of the parent table into the ancestor table as part of the base query and i've already shown that here but now instead of during iteration joining the parent table with the ancestor table we're actually going to join the ancestor table with itself to generate new tuples for_example we will join the first two tuples in ancestor with each other sue john and john mary in order to obtain what was the same tuple we obtained with the linear_recursion which would be the tuple with sue and mary just a quick reminder i intended to say this earlier but it's the fact that we have these two references to ancestor in the recursion here that makes it non_linear ok so what's the deal with these two queries why might we prefer one form of the query over the other and take my word for it by the way we do get equivalent results to the query in its linear and non_linear versions well here's some pros and cons to non_linear versus linear for this particular query and actually in general when we can express a query both ways first of all there's some pluses to the non_linear so the query looks cleaner if you go_back and look_at the queries the non_linear version is sort of more symmetric a little shorter even to express than the linear version second of all the nonlinear version actually converges faster to the fixed point to the final state than the linear version and i'm going to show that a little_binary_digit abstractly because it is actually fairly important so i'm going to create this abstract example parent child relation which is going to be completely linear just for illustrative purposes so we have this person here who's the parent of the person here who's the parent of a person here and so on we're going to make it eight levels deep so this is an abstraction of our a parent table and now let's see how ancestors are computed so in the first step we'll add one ancestor tuple for each tuple in the parent relation so the purple are the tuples that are added to ancestor then in the second iteration we're going to join those with themselves i'm_sorry we're going to join the ancestor tuples with parent tuples so each ancestor tuple could be extended by one so that's going to give_us all pairs of tuples i'm_sorry it's already getting a binary_digit crowded here but i think that you will get the idea on the next iteration we're going to again take our ancestor tuple and extend them by one by joining them with parent so after the second we'll have all triples here so all great grandparent relationships ok and that's a big mess but you can really see what's going on each time we iterate we get one more generation added into the ancestors and now let's think_about what_happens when we use the non_linear version where after the first step we join ancestor with itself instead of ancestor with parent so as before on the first step and now i'm going to make these red the ancestor relation will contain exactly the same as the parents and the second step is the same as_well we're going to join ancestor with itself but since each one of ancestor is only the parent relationship we're again going to get all pairs in the second step of the iteration the difference begins in the third step now we're joining ancestor with itself so we will be joining these two step ancestors with the single ones just like before to get all the threes but we will also be joining twos with twos in_other_words we will joining grandparent relationships with grandparent relationships and we will be getting in that same iteration the fours so as you can see the nonlinear version does converge faster now this example is very small so it's not as blatantly obvious but the linear version is going to take a linear number of iterations in order to converge to the final recursively_defined_relation contents whereas when we use the non_linear version it's actually logarithmic so for a large database it can be considerably faster so what about the downsides of non_linear recursion well the major downside is that it's harder to implement or certainly harder to implement efficiently and as a result of that actually the structured_query_language standard only requires linear_recursion and the postgres system that we've been using also only supports linear_recursion so back to the basic form of our with recursive statement in order to introduce a different topic which is the topic of mutual_recursion mutual recursion as i alluded to in the previous_video is the case where one of our recursively_defined relations does not refer to itself but rather to a different recursively_defined_relation and that one refers back to the first one or we could even have a loop of three or four or more so the idea is that we can't look_at these individually to see the recursion but together they are recursive and they have to kind of be computed in tandem so the example i'm going to use here is what's_known_as hubs and authorities hubs and authorities was an algorithm for web searching actually for annotating web nodes for the purposes of searching was developed around the same time as google's page rank i guess we can see which one won out but hubs and authorities actually quite interesting just in what it does let_me go_ahead and define the meaning of hudson authorities and then show how mutual_recursion in structured_query_language can be used to compute the hudson authorities in a database that contains a link a structure a graph basically so here's a little graph and we're going to assume that each node has a number say associated_with it and that we have a relation called link that just tells_us the edges of the graph so the source node and the destination node so in a graph we're going to designate some of the nodes as hub nodes and some of the nodes as authority nodes and we are going to define a hub node to be a node that points to at_least some number let's say three authority nodes and similarly we're going to say an authority node is a node that's pointed to by let's say at_least three again hub notes and by the way this numbers three and three don't have to be the same and another thing i wanted to mention is in a graph say representing the web we wouldn't expect a large fraction of the notes to be hubs in authorities many would be normal notes but again this just for illustrative purposes but it also serves to teach you about the hubs in authorities concept which is kind of interesting now you can see already how mutual_recursion is going to fit into the picture but how are we gonna get started the only way you can actually get started is to have some nodes that are predesignated as hubs and authorities for_example if we predesignated as authorities these three middle nodes here then we could compute the fact that node one is a hub so we'll also assume that we have two more relations in our database one of them gives_us a set of notes predesignated as hugs and the other a set of notes predesignated as authorities and our job is to write a query that computes all of the hub and authority nodes based_on this mutually recursive definition here so here is the query that does it by the way you have certainly noticed that i'm not doing a live demo of the recursive queries in this particular video nonlinear recursion is not supported in the postgres system and it's also not part of thaql standard mutual recursion in limited forms is part of the structured_query_language standard but it's also currently not supported in postgres so i've used the nice interface is here to get the coloring of our queries but these queries currently don't run on the systems that we're using ok so back to our actual query here so this is a query to compute hubs and authorities given that we have a starting set of hub nodes and a starting set of authority nodes and then we have the link relation that gives_us the structure of our graph so we're going to compute to relations the hub relations with the nodes that are hubs the authorities relation of the nodes that are authorities and they are going to have mutual_recursion between them so let's take a look first at the hubs and we'll see that the structure of the queries for hubs and authorities is very very similar so the base case for the hubs is that the nodes that are in the hub start relation are in the hub relation of course and then the recursive query here is a little_binary_digit complex so what we're going to find is links elements in our link relation where the destination is an authority and so we're going to find all of the sources that point to an authority we're going to group_by the source so we consider each node one at a time and then we count how_many times it appears in the link pointing to an authority so this is going to give_us a nodes that point to greater_than or equal to three authorities which was our definition of hubs now here of course we're referring to authority which itself is a recursively_defined_relation the authority relation is very similar as i said we start with our base case of adding nodes that are in the authority start relation and then we consider destinations instead of sources in our link relation such that there are at_least three sources that are hubs and that's what we've_got down here so this is going to give_us elements that are pointed to by greater_than or equal to three hubs and here of course we are using hub which is also a recursively_defined_relation so you can think of these two as working in tandem you can think of the system as sort of iteratively adding to the hubs and the authorities until there's nothing more to add to either one now one thing that this definition of hubs of authorities and this computation allows is for a node to be both a hub and an authority and there is nothing wrong with that if the structure of the graph yields that result but let's_suppose we don't want nodes to be allowed to be both hubs and authorities we want every node to be either one or the other that will require us to modify our query to not add nodes to become hubs if they're already authorities or to have nodes become authorities if they're already hubs so let's go_ahead and modify the query to incorporate that additional constraint so here's the query and by the way just a reminder that you can download these queries from our website even_though you can't run them at this point in time the difference in this query from the previous one is one additional condition in the definition of hubs right here saying i'm not going to add a node a source node to the hubs if it's already in the authorities and similarly i've added one more condition here in authorities that i'm not going to add a node to authorities if it's already a hub now let's_suppose we have the following graph structure we have a node here that hasn't been labeled as a hub or authority yet and let's_suppose that this node is pointed to by three nodes that have already been designated as hub nodes and furthermore this node points to three nodes that have already been designated as authorities so by our definition this node could be a hub because it points to three authorities and it could also be an authority because it is pointed to by three hubs but the query we've given now is not going to allow_us to label this node as both a hub and authority and just to be clear in the previous query we would have put this node in both the hub relation and the authority relation but now we're not going to be able to do that because of these conditions right down here so actually whether this node ends up as a hub or an authority depends on effectively which one of these arms of our with statement gets executed first if we first consider the possibility of the node being a hub then it will be put in the hub relation and then it won't be allowed to be put in the authority relation on the other_hand if we first make an authority then when we look for computing the hub relation it wouldn't be allowed to be a hub so you can think of this as a sort of non deterministic behavior or if you're into theory there's a non_unique fixed point of the recursion and this is considered as a not good thing generally database people when they run queries would like to have one answer all the time they like to have deterministic answers for their queries so actually this type of mutual_recursion is not allowed in the structured_query_language standard and the real crux of the problem here is that one recursively_defined_relation is depending negatively on another one so this negative dependence is what causes the problem and actually we can have a negative dependence even without mutual_recursion we could define a relation that sort of depends negatively on itself in a sub query and that wouldn't be allowed either so that completes the example of hubs authorities and again what we're trying to show first of all is mutual_recursion which can be quite_powerful and second of all the restriction that we can't have negative subqueries across recursively_defined relations the last thing that i wanted to mention in this video it's not in the title of the video since we are focusing mostly on nonlinear and mutual_recursion is recursion with aggregation and let_me just show a simple abstract example so we have a relation p that just contains one attribute we can assume that it's integers and we're going to try in our with recursive statement to computer recursively define relation called r that contains the tuples in p together with the sum of the values in the attribute of p i will just write that as sum of p so here's how we write it in structured_query_language we have our base case which is that the tuples in p are also in r and then we do our union of the recursive part which says and also in r i want to have the sum of the tuples in r so let's say that p starts out with two tuples the values one and two so what does the query compute for r well certainly one and two are in r based_on the first part here and then based_on the second part then in the first iteration r should also contain the sum of r which is except as soon as we put three in the sum of r isn't three anymore the sum of r is six so shall we cross out the in and put six there but then now the sum of r has become six seven eight nine you can see the problem there's no good definition for what r should contain based_on this recursion and for that reason actually recursion with aggregation is disallowed in the structured_query_language standard and isn't supported by any system so to summarize about both of our videos about recursion structured_query_language has introduced recursion into the standard as part of the with statement whether the keyword recursive goes with the with or with recursively_defined relations is a binary_digit inconsistent but in any case the basic_idea is the same when we have this statement we can write queries that refer to the relation that's being defined and we can also have mutual recursions between the queries that are defined in the with statement and finally the result is a running of the final query which might involve the recursively_defined relations adding recursion to structured_query_language does strictly extend it's expressiveness there are queries that can't be written without recursion they usually involve some type of unbounded computation for example computing any number of flights or any depths of ancestors usually there's a transitive closure flavor to those queries without recursion the iteration involved in computing recursively_defined_relation has to be written outside of the database has to be written in code in some fashion now we saw that the basic functionality of structured_query_language recursion is linear_recursion where we only have one instance of the recursively_defined_relation in the query defining the relation we can write a lot with linear_recursion it's very expressive and can express most of the natural queries we might want to do in recursive structured_query_language but there is extended functionality there's non_linear recursion we saw that non_linear recursion can lead to nicer looking queries and can converge faster but is actually more difficult to implement efficiently and then there's mutual_recursion where r here might be defined in terms of r which itself is defined in terms of r and we saw one interesting example where we'd_like to use mutual_recursion where it was appropriate finally in terms of what was disallowed recursive sub queries by that i_mean referencing recursively_defined_relation in sub query is actually in the structured_query_language standard not supported by the postgres system that we were using when a reference in a sub query to a recursively_defined_relation is negative sort of like a not exist or not and that is disallowed by the structured_query_language standard and we saw that that can lead to sort of non obvious behavior non deterministic final results and finally aggregation causes complication as_well in recursion and is disallowed too the features that are disallowed really don't come up that often naturally and once again and let_me just emphasize that the basic functionality of linear_recursion does allow one to express a lot of really nice queries and does extend the expressiveness of the structured_query_language language this video introduces online_analytical_processing or online_analytical_processing a subsequent video will have a demo of online_analytical_processing queries in action overall database activity can be divided into two broad classes one of them the traditional one is known_as online_transaction_processing or online transaction processing the other one the subject of this video came about more recently and it's known_as online_analytical_processing or online_analytical_processing online transaction processing is typically characterized by short transactions both queries and updates things like updating an account balance in a bank database or logging a page view in a web application queries in online_transaction_processing data bases are generally fairly simple find an account balance or find the gpa of a student they typically touch small portions of the data and updates in this environment can be frequent we might be making airline seat reservations or updating a online shopping cart online_analytical_processing is pretty_much the opposite in all respects in online_analytical_processing we have long transactions often complex analysis of the data or data mining type operations the queries as i said can be complex and especially they often touch large portions of the data rather_than small portions as in online_transaction_processing and updates in the online_analytical_processing environment tend to be infrequent in fact sometimes in the online_analytical_processing environment there are no updates to the data at all now these two are extremes and really there is a spectrum between those two extremes we might have a sort of moderate amount of update and queries that touch a moderate portion of the data but the fact is that database_systems traditionally were designed for the first extreme and then special techniques were developed for the other extreme so the systems are tuned for the two extremes and depending on ones work load one might choose to use different options in a database system just a little_binary_digit more terminology in the online_analytical_processing world there's a concept called data warehousing it's really a software architecture the idea is that often in enter prizes or other operation there are lots of operational sources so you can think of a point of sale for example might have many many online_transaction_processing database pieces related to an enterprise and data warehousing is the process of bringing the data from all of those distributed online_transaction_processing sources into a single gigantic warehouse where the point then is to do analyses of the data and that would fall under the online_analytical_processing camp another term you might encounter is decision support systems also known_as dss this isn't really an exact term it's generally used to talk_about infrastructure for again large scale data analyses so if you think of a data warehouse where we're bringing in a lot of data from operational sources and that warehouse is tuned for online_analytical_processing queries that would be thought of as a decision support system and of course this system is designed to support decisions that are made again based_on data analysis now let's get into some technical details of online_analytical_processing frequently applications that are doing online_analytical_processing are designed based around a star schema so it's a certain type of relational schema in a star schema there's usually one fact table that will be a typically very_large table it will be updated frequently often it's actually append only so there are only inserts into the fact table and then there are maybe many dimension_tables those are updated infrequently and don't tend to be as large so examples of a fact table might be sales transactions in a sales database or in a university database maybe students enrolling in courses or in a web application logging the page views in all of these cases we can see that the fact table can be very_large and can be append only so inserts only examples of dimension_tables might be in a sales database store's items and customers in a college enrollment database maybe students and courses in a web application maybe web pages his users and advertisers so you can see that these are generally smaller tables they're more stable they're not updated as frequently you can sort of think of dimension_tables as things in the real_world and then fact tables as logging things that happened it's not always divided this way but it's not a bad approximation now you might be wondering why is it called a star schema and it's called that because we have the fact table sort of centrally referencing dimension_tables around it so i'll draw the picture let's take a particular example and let's look_at the sales domain so we'll have our fact table here which will be the sales table and that will log sales transactions actions it will include the store where the sale was made the item that was sold the customer how_many were sold and the price that was paid and then the other three tables are the dimension_tables so those those are giving_us information_about the stores and the items and the customers so i've drawn a picture of our schema here we have our central fact table the sales table and we can see that the sales table contains these three columns i've abbreviated them in the picture the store id item id and the customer id the store id values in this column will be foreign_key attributes to the primary_key of the store table if you remember our constraints video so we can think of these as pointers into the store table least specifically matching store ids over here and we'll have similarly our item ids will be foreign keys to the item table i won't actually point to the values here and then our costumer ids over here will be pointing to the customer table so if you look_at this squinting you will see that it is kind of a star schema with the central fact table pointing to the dimension_tables around it and that's where the name comes from just a little_more terminology the first three attributes here in the fact fact table these three are what are known_as dimension attributes so those are the attributes that are foreign keys into the dimension_tables then the remaining_attributes in this case the quantity and the price are called dependent attributes so they're i guess dependent on the values for the dimension attributes and typically queries will tend to aggregate on the dependent attributes we'll see examples of that in a moment so now that we known what a star schema looks_like let's look_at the type of queries that are generally issued over this schema and they're called online_analytical_processing queries typically a query over a star schema will first join some or all of the relations and when you're joining the sale as the fact table with the dimension_tables you can almost think of it as expanding the facts in the sales table to include more information_about the sales since we have the foreign keys we'll be adding for example to the information_about a sale more about the store the city and state of the store for a sale item will be adding the category brand and so on so that's the join process and the query will join as much as it needs in order to do the rest of it's work it might then filter the data for_example we might decide that in our query we only care about stores in california or customers in california we're only interested in shirts and so on so they can filter on the dimension attributes after joining or could filter on the price or quantity as_well after filtering there's often a group_by an aggregation so we might decide that we're interested in figuring out our total_sales divided by customer or by item or by state or all of those and then the aggregation might sum up the sales or it might determine the average price that's sold we'll be doing a number of this type of query in our demo later on so if you think_about executing queries of this type they can be quite complex and they can touch large portions of the database sowe 're worried about performance and our data is large we do have a worry running this type of query on a gigantic database over a standard database system can be very slow but over the past decade or so special indexing techniques have been introduced and special query processing techniques specifically to handle this type of query on star schemas on large databases and again by large just think_about the number of sales for example in a large retail chain or a number of web views or even shopping cart additions in a large online vendor so in all of those applications people are interested in doing online_analytical_processing queries and they tend to use a system that supports these special techniques another component of getting good performance in these systems is the use of materialized_views you_might remember that materialized_views are useful when we have a workload that consists of lots of queries and not so many updates and that's exactly the type of workload we have in online_analytical_processing furthermore we have many queries that take roughly the same structure so material wise we use are useful in that setting as_well now let_me switch gears and introduce a different way of looking_at the data in these online_analytical_processing applications with star schemas and it's what's_known_as a data cube sometimes this is also called multidimensional online_analytical_processing and the basic_idea is that when we have data with dimensions we can think of those dimensions as forming the axis of a cube it's kind of like an n dimensional spreadsheet now we can have any number of dimensions but for the examples i'm gonna give the best i can draw is up to three dimensions and that's why people call acute because they know how to draw three dimensions but again any number of dimensions are possible in this view of the data so we have our dimensions forming the axis of our cube and then the cells of the cube again you can think of it sort of like cells of a spreadsheet are the fact of data or the dependent data it's like in the previous example that would be our quantity and price and finally we have aggregated data on the sides edges and corners of corner of the cube again similar to how you might aggregate columns in a spreadsheet so let's go_ahead and i'll do my best to draw a picture to explain what's going on so here's my cube with these three axes that i've drawn in black and i've drawn these dash lines as_well to sort of give you a visual idea of the cube but i'm going to actually get_rid of these dash lines right now just so we don't have too much clutter so for our sales example we're sticking with the same example we have dimensions and those will label the three the three axises of are cube and in one dimension we will have the stores and another dimension we will have the customers here and in another dimension we have the items then we can think of the points along these axes as being the different elements in each of those domains or the different tuples in each of those dimension_tables so for example in the store domain we'll have you know store store store and so on i'm not giving them any fancy names here and so each of those is a point on that dimension and similarly for the items will have item item item and so on and for the customers along the bottom we'll have customer customer number customer and so on now here comes the tricky part especially for drawing the idea is is that every cell in the cube so every combination of item costumer in store has a cell in the cube so this would be sort of a free floating cell here and this will have for our schema the quantity and the price for that item that customer and that store so this might be the floating thing here that's you know item i costumer and store something like that and then floating in there is this cell with the quantity and the price now we are assuming that there's just one quantity and price for the combination of those three attributes and i'll come_back to that in a moment but let's assume that for now so that's what we have in the whole central area of the cube so now on the faces edges and corner of the cube are going to have aggregated data and there does need to be with each data cube a predefined aggregate so for this one let's say that what we want as our aggregate is the sum of the quantity times the price so we're going to figure_out the total amount that we're making for different combinations of stores items and customers so now let's consider a cell on the face of the cube so again i'm not drawing this very well but let's assume this is on the bottom face of the cube so this is for a particular customer say customer in a particular store say store and then since it's on the bottom of the cube so we didn't go up this dimension here it considers all items for customer and store so this will be the aggregate over all items for that particular store and customer and we'd have similar values on the other faces of the cube so this face over here for example would be for a particular item and customer overall stores and then on the front face of the cube if you could imagine that would be for a particular item and store over all customers now let's talk_about what's on the edge of the cube so here we have say for store we'll have the aggregate value over all customers and items in this point for store so that will be the total_sales that we conducted at store s over here on this edge we'd have the total for a specific costumer and over here for specific items and then finally we have at the corner of the cube the full aggregation so that's going to be in this case the sum of the quantity times price for every store customer and item so i'm not a great artist but i_hope this gives you some understanding of how the data cube works so as we saw in the cube we have one cell in the cube for each combination of store id item id and customer id so if those three together form a key then it's very straight_forward if the dimension attributes together don't form a key then we might be pre aggregating already inside the data cube so we might decide to already have say the sum of quantity times price for each combination of store_item and customer another possibility and it's done quite commonly is to add to the fact table the attribute date or even the time and that can be used to create a key typically we won't have two transactions at exactly the same time now if we do have an attribute here called date one might_wonder is that a dimension attribute or a dependent attribute actually it's pretty_much a dimension attribute because we're gonna use it as another dimension in our data cube but the difference being that we would not have an actual dimension table listing the dates now let's move on to a couple other concepts in the olap world called drill_down and roll_up the idea of drill_down is that we may be examining summary data and then we want to get more information drill down into the details of that data and actually we can think of that very specifically in a structured_query_language context as follows let's_suppose that we have this query and structured_query_language which follows by the way the description of the query i had earlier where we'll do a join and then a selection and then it grouped by and finally we have an aggregation here so this query specifically is looking_at our total_sales broken out by state and brand maybe we'll look_at that and we'll just say that's not enough detail i need more information so to drill_down what we do is add a grouping attribute so if we added for example category when we add another grouping attribute that gets us more data in the answer more_detail in our data rollup is exactly the opposite rollup says we're looking_at data and we decide we have too much detail and we want to summarize and summarize is simply a matter of removing a group_by attributes so if we took out state then now we'll only see our data summarized by brand rather_than broken out into state and brand and lastly i want to add introduce some structured_query_language constructs these are constructs that have been added fairly recently to the structured_query_language standard in order to perform online_analytical_processing queries and we'll be seeing these in our demo the constructs are called with cube and with roll_up and they're added to the group_by clause when we add with cube to a query with a group_by what_happens is that basically we're adding to the result of our query the faces edges and corner of the cube using no values for the attributes that we're not constraining we'll see this clearly in the demo with rollup is similar to with_cube except it's smaller it actually is a portion of the data cube and that makes_sense when we have dimensions that are inherently hierarchical and again we'll see that in the demo as_well so we can conclude there are two broad types of data base activity online transaction processing short simple transactions touching small portions of the data lots of updating and online_analytical_processing or online_analytical_processing where we have complex queries long transactions might touch a large portion of the data and might not update the data at all for online_analytical_processing online_analytical_processing we saw that star schemas are frequently used we saw how to view the data as a data cube of_course that can be in any number of dimensions we just use three for visualization there are two new constructs in structured_query_language with_cube and with rollup and finally this type of query can be very stressful on a database system when we have very_large databases so special techniques have been introduced into systems to help perform these queries efficiently in this video we'll be doing a live demonstration of online_analytical_processing we'll create a star schema similar to the one we used in our previous examples it will be sales data with a fact table and several dimension_tables and then we'll do several different types of online_analytical_processing queries we'll show a full star join over the star schema we'll show some examples of drill_down and roll_up we'll also show what's_known_as slicing and dicing which we haven't explained yet we'll just do when we get to those queries and finally we'll show the with_cube and with rollup clauses that have been added to the structured_query_language standard for online_analytical_processing queries for those we'll be using mysql actually for the whole demo we'll be using mysql mysql supports with roll_up neither of the other systems that we've been using sequel lite or postgres supports with roll_up yet and mysql does not yet support with_cube but we'll see that we can simulate the behavior with_cube using with rollup command of mysql so let's move to the demo here we are in the demo we have a fact table that contains information_about stores items and customers we don't see much here except their id values and we have sixty tuples loaded up in our fact table our dimension_tables are the customer table we have four customers with a gender and an age we have our item table five items a category of the item just t_shirts and jackets just in blue and red and finally we have our stores and we have six stores that are in various cities in santa_clara san_mateo county in california and king county in washington our first query is simply the complete star join so we're joining all four tables using the foreign_key references in the fact table to the keys and the dimension_tables now since these are foreign_key references you can think of this star join as simply extending the tuples in the sales table with further information_about the store_item and customer mentioned in each one so here we go and we should expect again sixty tuples in the results one for each tuple in the fact table and we can see that we have the information from the fact table but then we also have more information that we've joined in from the dimension_tables now it's not typical to do the complete star join usually we would have at_least constrained the star join in some way so our next query will do selections and projections on the join we're going to limit ourselves to sales where the state of the sale is california the category is t shirt the age of the customer is less_than and the last condition is actually over the fact table saying the price of the purchase was less_than and now we'll return the city color customer name and price of the item we run the query and we see now that we have just sales that meet our criteria so we've_seen the join with constraints on the join but what's even more common in online_analytical_processing applications is to do grouping and aggregation in order to analyze the data and we're going to start_by looking_at grouping it in the aggregation involving the dimension attributes in the group_by and then the dependent attribute being aggregated this is a very common form of query so here we'll say we want to analyze our data based_on combinations of stores and customers so we'll group_by store id and customer id and then we'll sum up to see the total_sales for each combination of store and customer so here's our result now maybe not that meaningful to us right now just looking_at the store ids and customer ids but for an analyst it might be meaningful we'll see in a moment doing group_by an aggregation on other attributes that look a little_more interesting so now i'll demonstrate the concept of drilling down so you might remember drilling down says that we're looking_at data that's aggregated in some fashion and we decide we want more_detail we get more_detail by adding more attributes to the group_by so let's say in this case i want to break out not only by store and customer but also by item so i'll add item id to the group_by and also to the select and when i run this query i see that i get more results and i now have more_detail in the analysis of the data now i don't have tumbles in my result even_though i'm grouping by all three dimension attributes because i do have in my fact table more_than one tuple for some combinations of store_item and customer next i'm gonna introduce a query that shows the concept called slicing slicing of course evokes the data cube we've talked_about the data cube in the previous_video and we specifically used this example to demonstrate a three dimensional data cube so the idea of a slicing query is a query that analyzes a slice of the cube and it does that by constraining one of the dimensions so what i_am going to do is add to this query a constraint that says let's only consider sales that are from the state of washington and when i add that we'll continue to do the group_by an aggregation but only on that slice of the cube representing washington stores the sales that are from washington stores so it made a few changes to the query the first thing we see is that i added the store relation to the from clause in order to constrain the state of the sale i have to join with the store table that dimension table so that i can access the value of state which is not present in the sales table so i also had to add variables and i add the join condition for the sales table to join with the dimension table and then i add the constraint that the state is washington the last small change is to add a variable to the store id so that i don't get an ambiguous error so now let's go_ahead and run the query and we see that we do get a subset of what we had before and that subset is the slice of the data cube if you want to think of it that way representing the sales in washington state now in addition to slicing there is also a notion of dicing and again if you imagine the data cube what a dice does is slice in two dimensions and it gives you a chunk of the cube so i_am going to add a condition on the item being sold i_am going to add that the item must be red so then i'm going to be looking_at the chunk of the data cube that identifies red items purchased in the state of washington so here's the query i've added a third relation to the from clause i added the item dimension_tables so that i can constrain the color to be red i have added a join condition joining the fact table to the item dimension table i have added the condition that the color is red and finally i had to add again the variable names to make_sure i didn't get ambiguous attribute references so we'll run this query and we see that we get an even smaller portion of the data cube again a dice where we have constrained two dimensions so we have seen drilling down and slicing and dicing now let's take a look_at rolling up rolling up says that we're looking_at our data analysis and we decide that it's too detailed we want to have less detail in other_words more aggregation to do that we take attributes out of the group_by clause so let's say this is way way too much detail and we just want our sales broken_down on item so we take all of the attributes out of our group_by clause except for item here we go and then when we run the query we'll see much more summarized data and here it is broken_down again just by separate items so far our grouping and aggregation has been on the dimension attributes specifically the id attributes identifying the tuples in the dimension table and that may be meaningful for analyses but for this demonstration it's more fun to look_at attributes that actually mean something to us so let's try a few queries that group instead based_on attributes in the dimension_tables we'll still be using the fact table we'll be joining it with dimension_tables and here we're going to start_by grouping on the state and the category of the sales again summing up the total_sales for the different groups so here we see that we have four combinations of state and category california or washington jackets and t_shirts and then we have the total_sales in each of those so we can see in both states the sales for jackets account for considerably more_than the sales for t_shirts but we do also notice that in california there's a lot more sales of t_shirts than there are in washington and i guess that's not surprising given the weather now let's demonstrate drill_down on this query so let's say we want a little_more information maybe we want a breakdown by county in addition to state so to do that we add county to the group_by clause and the select_clause and when we run the query we see we do now have more_detail we can see for example that we had more jacket sales in santa_clara county than in san_mateo county although the t_shirts were approximately equal a little actually more t_shirts in san_mateo this is a little surprising because santa_clara is generally warmer than san_mateo but it's fabricated data now let's see we want it drilled it out even further and we want to break our data down by gender as_well as the other attributes in order to drill_down based_on gender i first needed to add the customer table to our from clause prior to this we weren't doing any analysis that involved any attributes of the customer table and so i need to add the join condition here and then to do the drill_down i add the gender attribute to the group_by and to the select we run the query and what do we find well we can see for example that not too many females in san_mateo county are buying t_shirts most of those t shirt sales are counted for by males the other thing we notice is that we don't have every single combination of county category and gender very_specifically we look and we can see that no males in king county bought any t_shirts so we only have in our result those combinations of dimension values that actually appear in the fact table or in the join of the fact table with the dimension_tables now let's_suppose after i've gotten to this level of analysis i've decided that what might be most interesting is the data broken_down just by combination of state and gender so that would be a roll_up operation and remember for roll_up i take attributes out of the group_by clause so i take out the county and category and i'm just interested in state gender combinations by the way at this point if i wanted to i could remove the item table because i'm no_longer constraining based_on items or grouping based_on items but i'll just leave it in for now it's not going to make a difference in our result of_course for efficiency i might just prefer to take it out anyway let's run the query and now we see that rolled up data and when we look_at it i guess our main conclusion here would be that in our database the californian males are the big spenders so far everything we've_seen has actually just used the regular structured_query_language constructs that we already knew about although we were demonstrating them over a star schema and we're showing the types of queries that one tends to run over star schema's in online_analytical_processing applications now we're going to move to the specific constructs that have been added to structured_query_language for online_analytical_processing as you may remember the two constructs are called with_cube and with rollup and they are written in the group_by clause so our first query is the absolute basic cube query we start with our sales fact table we group on all three of its dimensions and then we add with_cube and what we're going to get is basically the data in the data cube that we saw in our previous_video that introduced the cube let's go_ahead and run the query disappointingly we get an_error message that this version of mysql doesn't yet support cube actually no version of mysql supports cube at this point in time but we're hopeful that a future one will in fact of the three open_source systems that we have been using for our demos only mysql supports the with rollup so we will continue with mysql and in fact you can get the same result that you would get if with cube was supported using with roll_up although it's a little_binary_digit contorted but i'll do that now to demonstrate what you would get if you wrote with cube so here's the query i'm not going to explain it if you're particularly interested in it you can download our script and exam it yourself again what i'm most interested in is looking_at the results and here they are so this result is the result of a with_cube on the grouping and aggregation on all dimensions of our sales table all three dimensions so some of our tuples look very normal this first tuple second and third tuple are all giving_us the total price for combination of store_item and customer and these are exactly what we got in our original query that didn't have the with_cube operator but now we see some tuples that have blanks and as a reminder blanks in this interface mean null so this tuple is store_item and null and what this corresponds to is an element on the face of the cube so this is the face of the cube that's not constraining the customer dimension and what the value gives_us then is the value we have on the face of the cube which is the total_sales for the combination of store one and item one and any customer and that's seventy and we can cross check that by seeing that the first three tuples add up to because those happen to be the three customers that have made purchases at store and item and we can similarly see for store and item the total_sales are if we scroll down a binary_digit we'll see cases where we have other single null_values i'll keep going until i find one here for_example here we have the null value for the store and that would be the face of the cube that's not constraining the store dimension so that would be the sum for item and customer at any store item and customer to at any store then we also have tuples that have two null_values here's an example so this one is going to be corresponding to the edge of the cube so this is the edge of the cube that is along the store dimension and is picking out store along that dimension and then giving the total_sales for all items and all customers in store and we see that and again we'll see other instances where we're missing two values scroll down to get here we've got one where we're missing the store in the item so this would be on the edge along the customer dimension so this gives_us the total_sales for any store_item made by customer and then finally if we find it we'll find the one that's all three null_values and that's right here so that represents the corner of the cube that gives_us the total for all stores all items and all customers so what we've done here by adding with_cube and again that would be the result if this query here were supported what we're getting is the contents of the data cube which are the inner parts of the cube which is what we would get without adding anything to our group_by and what we saw in one of our very first queries of the demo in addition to the data on the faces the edges and the corner of the cube now let's do a quick cross check so this data tells_us that the corner of the cube here the one with all null_values is total price so that should be exactly what we get if we sum up our prices without doing any grouping or aggregation so lets give that a try so we merely take our sales table we sum up the total prices and we run it and indeed we get thirty three fifty so now we've_seen how structured_query_language can be used to effectively create the data cube sometimes in online_analytical_processing applications it's convenient to query the cube directly so people frequently create data cube say in structured_query_language using a materialized_view or just by creating a table that contains the result of the data cube which is what we are going to do there are even some systems that use the data cube as their basic native data_model so let's go_ahead and take the result of our cube query and put it in a table so i've just added create table cube as before our query and the one the other thing i did was add a name to the result of the aggregation attribute so that we can refer to it in the data cube so p then will then be containing the sum of the price for the items inside the data cube as_well as for the faces edges and corners so let's go_ahead and create that table and now let's look_at querying the cube directly so the first thing you will notice in the next few queries is that we've replaced the sales table with the cubed table so we're gonna run our queries directly on the cube and we can join the cube with the store and item tables and the customer if we needed it just as we joined the sales table because it does contain the same dimension attributes what the cube gives_us is pre aggregated data both for the store a customer and item combinations as well as the data that has null_values that is already aggregated for the faces edges and corner of the cube as we'll just see in a moment so what our query is going to do is find total_sales of blue items in the state of california and it will start_by showing the tupples that are used to get that total so we'll join our cube table with the store and the item dimension_tables in order to constrain the state and the color and then we will constrain the state and the color notice the last thing we say is that customer id is null and that's going to give_us the data on the face of the cube that doesn't go along with the customer's dimension that_means it's going to be pre aggregated for all customers and that's what we want since we don't care about the customers and just about the color and the state so let's first run this query and we see we get six tuples and these tuples are all from the portion of the result of that cube query we ran that has a null value for customer id and that is all combinations of stores of items and if we checked our dimension_tables we'd see that these stores are in california and these items are blue and these are our total_sales broken_down by store and item finally to get the total total_sales we'll just sum up our column p which remember was the sum of price in the data queue so we replace c with sum of p and we run the query and we see that our total is now let_me show you something that may seem non intuitive at first but if you think_about it or maybe run the queries yourself you'll start to understand exactly what's happening i'm going to go_back to c in the select_clause and incidentally i didn't mention it before but c gives_us in the select_clause all the attributes from the cube table and that is showing which tuples are being used for the aggregation so we had before six tuples that were being used now i'm going to make one tiny change to the query instead of finding the customer ids that are null i'm going to find the customer ids that are not null i'm going to run that query and i see that we have fourteen tuples now what we've actually done is moved away from the face of the cube and into the cube and i've said don't give me any of the summarized data just give me the original values that are the store_item and customer together so i've taken away the summaries but actually this should still give me the same answer let's make_sure that's the case i do sum of p and i run it and i get so what_happened here is i used what's effectively the same data but broken_down by customer and i added it up that was a less efficient query but both of those queries do give the correct result they do give you the total_sales of california stores' blue items again i encourage_you to download these and run them yourself to figure_out exactly what's going on and as a last demonstration of this very same query we can actually go_back to the sales table let's say we don't even have our data cube so we're gonna use our sales table instead and it should give_us the same result but even less efficient than the the last query that we did so you can see here i've changed the cube to be the sales and all the c dots to f dots i took away the constraints on being null or not null since that's not relevant in the sales table otherwise the query looks pretty_much the same so let's run this much and see how_many tuples we are operating_on now so now we're operating_on tuples so this is the original completely broken_down data just as a reminder in the data cube even in the cells we'll be summarizing or summing for the combination of store_item and customer so if we have three tuples that are the same store_item and customer those will be broken out in the sales table and summarized in the cube even in the least summarized portion of the cube if you get what i'm saying so now we've_got our tuples and if we sum up the price of those twenty five tuples we should get that same result and we do so we saw that we had six tuples in the most efficient query over the data cube when we used just a center portion of the cube we had fourteen or something i actually don't remember the exact number and then all of them gave us the same answer obviously these numbers are very small but if you think_about huge data that has millions or tens of millions of rows then we're talking_about dramatic differences in how much data needs to be summarized or aggregated in order to get the answer so using the summary data from the cube can be orders of magnitude faster than going to the original fact data now a variation on the width cube is to give specific attributes with the cube operator itself and what that says is to only give summaries for these dimension attributes and not the others in_other_words we'll only see null_values in the result for the store id and customer id and we won't see any null_values for the item id so in some sense we're materializing just some of the faces edges and corner of the cube not all of them if we run this query well we'll get the same results that mysql doesn't yet support it but this is the structured_query_language standard for the cube operator with subsets of attributes as before i've cooked up an equivalent query using a mysql's with roll_up command and i'm certainly not going to explain it but you're welcome to download it and examine it what i really like to look_at is the result and here it is so this looks a lot like our original data cube but what we will notice is that there are no null_values in the item column so it's a subset of the result of the cube query and we would use that when we know we're never going to be rolling up on items so that dimension the summaries based_on that dimension aren't going to be useful to us now let's look_at with roll_up which is supported natively by the mysql system with roll_up again gives_us a subset of the data cube but it's a very specific one and it's based_on the ordering of the attributes in the group_by clause so let_me just go_ahead and run it and explain what we get we again get null_values and those null_values indicate the summary for_example the store item and s the sum of prices for all customers for store and item and we see store item as_well we again see cases with two null_values so this is the summary for store all of the items and customers the total_sales and we also have the triple null somewhere it's at the bottom this time with total_sales of but what we'll see is that we don't have all combinations of null_values we have a null value for customer id or we have nulls for the combination of customer id and item id or all three nulls so we only have the right hand attribute or the two most right attributes or all of them and if we had a fourth dimension we'd see that we have the right most two right most three right most this doesn't really make any particular sense for this query but it's used when we have dimensions that are hierarchical and i actually introduced a hierarchical dimensions in our original schema just for this purpose so lets turn to that query so here's a query that's grouping by the state county and city these are three dimension attributes they all come from the store dimension table and they are hierarchical meaning that we don't have every combination of state county and city we have cities that are in specific counties and counties that are in specific states so when we look_at the results of the query we see of course that we when we have san_mateo is always in the state of california king county is always in the state of washington we don't have palo_alto combined with say king county with state california so we don't have all the combinations of the three we have a hierarchical structure on them and it's this structure that makes_sense when we use a roll_up so let's add with roll_up to this query and see what we get so here in our result we see our original tuples for a state county city combination and then we see for example this tuple here which is taking the state of california and the county of san_mateo and adding up all of the sales there and we see similarly that we have all of the sales for santa_clara county then we can see that we have all of the sales for each state so this is the california sales and the washington sales and finally the triple null is the corner the cube it's all of our sales and as usual we get the total of now what don't we see in here compared with the data cube well we don't see for example a tuple that has california and palo_alto and the county as null why is that well palo_alto is always in santa_clara county so rolling up the county or saying i want california and palo_alto sales for every county is exactly the same as saying i want california and palo_alto sales in santa_clara county we also don't see for example the state and county both being null for_example if we had seattle as a city and the state and county being null well seattle is always in king county and always in washington so we're not aggregating anything there we get the exact same results as having seattle king in washington so if we ran with cube on this hierarchically structured data we'd actually not get anymore information we'd have a bigger result but it wouldn't be giving_us more information it would just be less efficient for getting the same data so that concludes our online_analytical_processing demonstration we saw star schema and we saw plain structured_query_language queries over that schema we saw the concept of drilling down and rolling up also slicing and dicing we introduced a with cube extension to structured_query_language which is not yet implemented in mysql but we were able to write a query that's equivalent to with cube we also saw putting a with cube query into a table and then querying that table directly and that can be much more efficient than running the equivalent query in structured_query_language directly over the fact table we also saw with rollup which is implemented we didn't demonstrate putting the result of with rollup in a table but we could certainly do that too all of these features are useful primarily in applications that are performing analyses over very_large data sets that exhibit this dimensional type structure but this is actually quite a common structure in analysis applications this pair of videos covers nosql_systems the first video is going to give a history and motivation for the topic and the second video will give an overview of some specific nosql_solutions but let_me warn you right away that the area of nosql_systems is changing rapidly so i'm going to avoid giving too many details so that the videos don't get out of date too quickly let's start_by talking_about the nosql name itself it's actually a little_binary_digit confusing and misleading has a binary_digit of a history to it already which we'll go through and those who invented it might be regretting it a binary_digit but let's pull it apart and let's first look_at structured_query_language in the term nosql structured_query_language is actually not talking_about the structured_query_language language what it's talking_about more generally is traditional_relational data base management_systems which do have the structured_query_language language but have a whole_bunch of other aspects to them as_well over the past decade or so there have been a number of new data management and analysis problems that have cropped up and we'll talk_about some of those where a traditional_relational database_management system might not be the best solution for those problems and again we'll talk_about that as_well so nosql termed when you take it apart to mean nosql is saying that for some problems we might not want to use a traditional_relational database system it's not talking_about this sequel language itself not picking on that but again talking about the whole trappings of the traditional system now while pretty_much everyone agrees that for some problems a traditional_relational database_management system isn't the best solution there are still a whole lot of problems for which it is and so people now like to say well problems aren't exclusively solved by traditional_relational database_systems they might be solved by traditional database_systems for some portion of them and by some other solution for other portions of the problem and for that reason nosql has actually come to mean and this is now the accepted definition not only structured_query_language but again with structured_query_language itself actually referring to traditional_relational database_management systems so what's wrong with a traditional_relational database system well the primary issue is that it's a big package with all kinds of features and in many cases though having all those features in one place is a great thing but sometimes we don't need all of the features and it can actually be advantageous to drop some of those now what are those features i'm going to wind all the way back to the introductory_video to these materials where we talked_about database_management systems and all the great things they provide and actually i've copied this directly from my very first set of slides that tells_us that a database_management system provides great things efficiency reliability convenience a safety multi user access to massive amounts of persistent data so let's analyze these adjectives a little_binary_digit more let's start_by talking_about convenience and let_me give aspects of a traditional database system that lead to its convenience to use for an application so here they are a simple data_model declarative query language and transaction guarantees and these components of a database system are one of the reasons that they are really good for certain applications because you can put your data in an understandable way you can query it using a language that's easy to write yet very_powerful and you get guarantees about what_happens if the system crashes or if multiple users are using it at the same time so the relational data_model is great because the data is organized into tables we have an understandable algebra over relations and that algebra forms the basis of the query language and everything fits neatly into a package the problem comes when our data doesn't fit so neatly into that package and if we insist on using the relational_model and our data isn't very relational then there has to be some process of organizing the data before we can say load it into the tables of our system the structured_query_language language is great because it's very_powerful it includes selections projections joins aggregation all kinds of set operators useful predicates and so on but what if that query language is much more_than what we need maybe we only need to do simple fetches of records based_on key values for example in that case using a system that supports the complicated language may be again more_than we actually need and similarly transaction guarantees are terrific when we have lots of users hitting a system at the same time and we have very strict requirements on consistency but if our requirements are a lot less even the weakest guarantees that are made by the traditional database_systems might not be appropriate for application and we're going to see examples of all of these things so the next attribute multi user ties right into our discussion of transaction guarantees again for some applications we might not need to maintain the level of consistency when multiple users are operating_on the database at the same time that traditional systems are designed for next attribute safety safety is both from a an authorization standpoint and from an attacker's standpoint and you know safety is not that different a concern in these nosql type applications than in traditional applications although in some cases the nosql_solutions we're going to discuss are used more to process data offline and in a batch mode in which case safety in terms of authorization or even attack is much less of an issue than say a database system that's sitting behind a deployed website persistence is something that's provided by database_systems and persistence is certainly something important in nosql type applications as_well although for nosql we'll see that files are often okay as a storage mechanism rather_than specialized structures that are typically implemented in a database system reliability again is something we're certainly going to want in any data management application but again the considerations are a little different in certain types of applications say the batch data analysis applications or it might be just okay to completely redo the entire say processing of the data where that wouldn't be the case if you had an operational database sitting behind a website now the last two adjectives on the other_hand are on the other end of spectrum one of the reasons for nosql_solutions is that the data being handled these days is much much more massive than the amount of data that the traditional_relational database_systems were designed for part of the reason is that the cost of hardware's gone down and so people are just saving much more data and then again another reason of course are websites such as facebook and tweeter and so on that are just collecting data from enormous numbers of users at enormous rates and those same websites by the way have efficiency requirements that are much much higher than we've_seen in the past so we have these millions billions of of records and we expect a response time of under a second for fairly complex operations overloads so again these are areas where nosql_systems want to increase the adjectives where the earlier ones we want to sort of decrease what they're offering so in some sense you can almost think of nosql_systems as compromising on some of these earlier ones in order to boost some of the later ones so with that motivation now let's talk_about the nosql_systems so they are as i've said an alternative to a traditional_relational database system for managing and analyzing large amounts of data at the highest level here are the attributes that are provided in nosql_systems so first of all a more flexible schema than the rigid relational_model second of all and i really hesitate to say this but they tend to be a binary_digit quicker and a binary_digit cheaper to set_up for a particular application now that may change over time but that's the word on the street as of this moment third as i already motivated they are designed for massive scalability and that means massive both in the amount of data and also with the efficiency of the operations on that data and lastly they don't necessarily have transactional guarentees in general what they do is relax the consistency that's offered by the system and in turn gain higher performance and higher availability of the system so these systems do tend to be used for applications that have strict requirements both in how fast they can do things and in being up all the time now of course there's a downside and again this is just at the very highest level different nosql_systems address things in different_ways on the downside they tend not to have a dec declarative query language so one of the benefits of a traditional system is being able to write add hot queries in a very nice high_level language change your mind about what you want to write and make changes easily explore the database in lots of different_ways just with these simple queries so in those structured_query_language systems the lack of declarative query language does mean that there's more direct programmig involved in manipulating the data and another downside is the relaxed consistency does mean there are fewer guarantees so for applications that have very strict that need very strict guarantees about the consistency of the data or say the serialized ability of operations on the data no sequal systems are probably not a good idea so the remainder of the video is just going to go through a set of examples to motivate the cases where we might want to use a nosql system and the reasons that it might be difficult to use a traditional system they're all sort of simplified made up examples but i do think they give the overall idea so the first example is an application where we have a large number of logs of web activity and we want to analyze those logs in various ways let's assume that when a web log is written there's a set of records for each access and that record is going to report that a particular user with a given user id accessed a particular uniform_resource_locator at a particular time and then we might have some additional_information associated_with that access maybe something about the user or whether it was converted into a purchase or where the user went next all kinds of possible things we might want to include in there and actually that additional info might change over time so let's_suppose that we're going to work with our web log data in a traditional database system the first test then would be to get the data loaded into the system and this is one of the first problems with relational systems is that there might be quite a binary_digit of work involved in taking data like this that might not be perfectly organized and getting it into a relational system for_example we might want to do some amount of data cleaning data cleaning refers to finding say errors or is inconsistencies in the data and resolving those for_example maybe our time stamps are in multiple formats and we need to resolve them maybe some of our urls are invalid so we go through a data cleaning process the next thing we might want to do is some amount of data extraction so let's take a look_at this additional_information so this might be in a structured semi_structured or free text format but if we're going to load into a database system then we're probably going to need to extract the relevant fields from that information and get that formatted so we can load it into a table we might also do some amount of verification maybe checking that all the urls are valid and then finally we have to devise design some kind of schema or specify a schema and then get the data loaded in now proponents of nosql_systems will tell you hey you don't have to do any of that you can just do nothing and immediately start operating_on the data directly out of say the file where it's stored and that sort of comes back to the idea that you can get up and running more quickly on a nosql system now of course there's_no free lunch or pay me now pay me later the reality is of course when you actually start processing the data you are going to have to embed somewhere in there these same basic operations to get the data cleaned up and usable but those would occur during the processing of the data and if there's some portions of the data that you're not operating_on you can just leave those in place without doing the clean up of that portion of the data now let's look_at the type of operations we might want to preform over this data it might be very_simple things we might say just want to find all records that correspond to a given user or maybe we want to find all accesses of a given uniform_resource_locator or everything that happened at a particular point in time now none of these things require structured_query_language ooh nosql but of course that's not what nosql stands for but these all just require finding you know a set of records based_on a single value or we might want to look for some special construct that appears inside the additional_information which the structured_query_language language again is not particularly designed to do the other thing to notice about all of these operations is that they are highly parallelizable each one of them in fact is just looking_at the individual records we could do everything in parallel and exploiting parallelism when you have simple operations is one of the important aspects of most nosql_solutions here's an operation i came up with because it does look like it requires a relational joint let's say that we want to find all pairs of users that have acessed the same uniform_resource_locator in fact back in the structured_query_language videos i gave several examples like this this is essentially a self join over two_instances of a table or two_instances of the web logs so this looks_like maybe we actually do need a sql like solution but i'm going to argue that this is actually kind of a weird query and it's fairly unlikely that we would be doing this one on a regular basis now let's make our data scenario slightly more_complicated in addition to the web log let's_suppose that we have separate records with information_about users so we have the user id maybe the name age gender and some other attributes of the users and now suppose our task is to take a given uniform_resource_locator and determine the average age of the users who have accessed that uniform_resource_locator okay well this is a very i would argue sql like query so it's nice in this case to have a language somewhat like structured_query_language but i'll still say that some aspects of nosql_solutions may be relevant to this task and in particular it's the question of consistency if we're using if we're analyzing a huge amount of data and we're just looking for some type of average some type of statistical information over that data it might not be required that we have absolute consistency in fact it might even be okay if we count some accesses to url's that were at a certain time and we completely missed some from an earlier time just because the database might be fragmented and and inconsistent and that's that's again probably okay for this application so to summarize the weblog application it might be somewhat difficult to get web access records into a relational database system it might be easier to use them in their filed format and extract the information when we need it many of the operations that we perform maybe extremely simply just fetching a set of records based_on a value and also highly parallelizable and even for the more_complicated analyses that we might do we may not need strict consistency accessing say a very specific snapshot of the data now let's take a look_at another application let's say the friends relationship in a social network which generates a graph when a user is represented by nodes and say the friend relation is represented by edges so each record is going to have user id's that says that one user is friends with another and then we'll have separate records with information_about users the user id maybe again their name age and gender and so_forth and let's imagine this is an extremely large social graph what kind of operations might we want to perform well one of them is to find all the friends of the given user and so that's pretty straightforward again we are just fetching the set of user 's that are associated_with a given user so not an operation that requires a complicated query language on the other_hand what if we are looking for all friends of friends of a given user actually now we do require a joint operation in order to do that and furthermore what if we want to find all women friends of men friends of a given user in that case we're going to need a couple instances of the friend relationship and we're going to need to join that with a couple instances actually of the user information as_well so this is starting to look more a little_binary_digit more sql like but maybe we don't need the full power of the language because we can see that there's a certain sort of pattern to the types of operations we're doing and of course the problem comes when we want friends of friends of friends of a given user in that case we're doing large number of joins and large numbers of joins tend not to be not that efficient in relational data base systems even when you use recursive structured_query_language so in addition to this type of operation being not necessarily suitable for structured_query_language a second attribute that we probably don't need again in this environment is consistency because we probably don't care that much whether we get an exact snapshot of the database if things are changing typically for these types of analyses approximate solutions are acceptable so these types of operations suggest that we might want to have a special type of database system that's suitable for graph operations on very_large scale and in fact graph databases are one type of nosql solution that we will talk_about in the next_video and finally my last example is wikipedia pages if you think of wikipedia it's a large collection of documents extremely large and inside each document there's typically a combination of some structured data inside boxes that has say key valued pairs and then on the structured data which might be fairly large volumes of text a type of task we might want to do is say retrieve the first paragraph the text paragraph in all pages where we look in the structure data and find out that the page is about a united states president say before clearly this is not very suitable for loading into a relational database and querying in that fashion again because of the mix of structured and unstructured information and once more consistency is probably not critical in this environment as_well as we'll see another type of nosql solution is called the document database system which can be more appropriate for this type of application so to summarize nosql_systems provide an alternative to using a traditional database_management system for certain types of applications nosql_systems provide a flexible schema which can be useful when its not easy to get the data into a structured table format they can be quicker and cheaper to set_up so you might be able to get going faster on actually analyzing your data and maybe for less cost a binary_digit debatable but that's the word on the street right now they do provide massive scalability so they're generally used for very very_large applications often applications that don't require the amount of consistency that a traditional system provides and by relaxing the amount of consistency they'll give you better performance higher availability the downsides of the this system tend to be the lack of a declarative query language that_means more programming is generally involved when using the systems and fewer guarantees are provided about consistency in the next_video we'll specific nosql_solutions and how they embody the adjectives that i've included here this video provides an overview of some nosql_systems i want to say right up_front that it's being made in november this is a field that's changing very fast so this is an overview of what's going on right now as a reminder from the previous_video nosql_systems have arisen because it was recognized that not every problem involving large scale management or analysis of data was best solved by using a relational database system some problems still are but there are others that are more suitable for a different type of system that we're going to talk_about nosql as a term has evolved to mean not only structured_query_language where structured_query_language doesn't really mean the structured_query_language language but it means a traditional database_management system again as a reminder from the previous_video the nosql_systems are different from traditional systems in that they tend to provide a flexible schema rather_than a rigid structure they tend to be quicker or cheaper or both to set_up they're geared towards really massive scalability and they tend to use relaxed consistency models in order to give higher performance and higher availability the downside is being that there's_no declarative query language so more programming is typically involved in manipulating the data and because of the relaxed consistency models the plus is a better performance the downside is fewer guarantees about the consistency of the data so there are a number of incarnations of nosql_systems and i've chosen as of november to divide into four categories the mapreduce_framework key value_stores document stores and graph database_systems in terms of the first two one way you can think_about it sort of roughly is that the mapreduce_framework is typically used for applications that would have used relational online_analytical_processing or online_analytical_processing they tend to be analysis applications that touch large amounts of the data to do complex analyses whereas key value_stores tend to be more in the online_transaction_processing world as a reminder that's online transaction processing and that tends to be a lot of small operations touching very small parts of the data the other two document stores and graph database_systems are self explanatory they involve documents and graphs now you_might_wonder why i didn't mention column stores because column stores are often discussed in terms of nosql so column stores are in one sense just a way of organizing relational database_systems for higher performance for certain types of applications but we'll also see that key values stores do tend to have sometimes not all of them have a model that's also based_on columns being an important concept so now i'll discuss each of these in turn although i'm going to spend the most amount of time on mapreduce so we can think of mapreduce as a framework it came originally from google they invented the term mapreduce and now there's an open_source system widely_used called hadoop which does implement the mapreduce_framework so the first aspect of mapreduce is that there is no data_model at all the data in the mapreduce_framework is stored in files both as input and output in the google mapreduce implementation it's the google file system gfs in the hadoop open_source implementation it's the hadoop distributed file system hdfs what the user provides to process data using the mapreduce_framework is a set of specific functions not surprisingly one of those functions is called map and one of them is called reduce other functions that the user needs to provide is a reader function which will read data from files and provide it as records a writer function that will take the output records and write them into files and finally there's an optional function called the combiner that we'll discuss so the user just provides this set of functions and then what the system provides is the glue that processes the data through the functions the system also provides fault tolerance of the processing so if there is a crash or a node goes down during the execution it will be guaranteed to be as if that didn't happen and finally the system also provides scalability so that the mapreduce_framework can be used for very very_large data analysis so let's talk_about the two most_important functions the map_function and the reduce_function the map_function is used to take the data analysis problem and divide it into sub problems very_specifically the function that the user provides called map is going to take a data item as input and it's going to produce as output zero or more key value pairs now what i_mean by a sub problem here is that we're going to separately deal with the set of records associated_with each key and that's the job of the reduce_function so the reduce_function which we'll write takes as its parameters a key and then a list of values for that key and it produces as output zero or more records now we'll shortly see a concrete example that will hopefully make this more understandable but before we do that let 's look_at the overall architecture of how these functions are used to process data so we'll start with our map_function which let's put inside a box and then we will have input records going into the map_function as a reminder what the map_function produces from each input record is an output record that's a key value pair and we're going to have these records sort of directed in a different way for each key so let's say this is the way that the records are gonna go for key key and up to key n and of course the records will have values associated_with them as_well so we'll send each batch of records for a given key into our reduce_function so let_me just draw a few reduce boxes here there's one for each set of records for a given key and then as we mentioned before the reduce_function produces output records at the highest level that's it that's our data processing we start with a bunch of input we divide it up into sub problems based_on a key which will extract from the input record somehow we'll see an example and then each sub problem associated_with a particular key is set through the reduce_function which produces the output and that's the end of our processing now things are of course a binary_digit more complex than that first of all there's_no reason to have one map box because the map_function takes each input record and processes it separately so we can parallelize the mapping as much as we want so let's change the picture here to have a whole set of map boxes so now each mapbox is going to take its records and it's going to produce records with given keys so we'll still send k over to the first reducer if we have k it'll go here and down here and of course this map will send things to reduce reduce reduce and so on now you_might_wonder what_happened to those reader and writer functions that i talked_about the reality is that we don't actually start with input records we start with our data in files so here's the real original data we'll draw this picture here for files and let's erase our input records here because the job of the reader is to take the files extract the records from the files and provide them to the map functions so here is that side of thing it's a binary_digit sloppy but i think get the idea and we have a similar thing on the other end the output methods come out of the reducers but then their provided to the writer functions that which write the output to a final file so here it is our original input in files here our final output in files there ok but let_me remind_you what the user provide what the system provides so the user creates a single map_function that takes records and emits a key value pair for each record the user provides a single reduce_function that takes a set of values for a given key and produces zero or more outputs and i should mention that the map can produce zero or more outputs from each record as_well it doesn't have to be a one to one mapping the user also provides the reader function to extract data from files and the writer function to write data to the output and there's one more optional function i_mentioned called the combiner the combiner actually is sort of attached to the mapper so we can kind of put it here and what the combiner does is it actually in sort of in the mapper will take a set of records for a given key so say for k and then we'll send a combined version of that record to the reducer in a way you can think of it as a sort of pre reduce phase and we'll see examples of this that occurs with the mapper to make things more efficient and send less data to the reducer so the user has provided these pieces these system infrastructure takes the pieces and distributes them to multiple machines because a lot of this can go on in parallel all of this can go on in parallel this too and this too here you have to exchange data maybe from one machine to another but once you do parallelism can occur and here as_well so the system distributes them to machines and you can add more machines to make it all all run faster the system also provides fault tolerance so if something goes badly here it will redo that reducer function and here as_well and finally as i_mentioned before it provides scalability but i should add i think one of the most_important things the mass produce architecture provides is the glue that puts this all together because again the user is only providing these functions and the system will take care of all of the execution moving the data around and calling the function over the large amounts of data that are being processed well all of that is pretty abstract so let's look_at a concrete example and let's go_back to the domain that i introduced in the previous_video of analyzing a web log where we have in each record a user id uniform_resource_locator the time of the access and maybe some additional_information and let's start out with a fairly simple task which is that we want to count the number of accesses for each domain where the domain is inside the uniform_resource_locator so for example the domain might be the stanford edu domain where we have accesses to many different urls with that domain and we're just going to count how_many accesses there have been to stanford so to perform this task the user has to provide a map_function and a reduce_function let's look_at what they do the map_function is going to take a record we'll assume that the reader has already extracted the record from the file and it provides it in this format with these four fields and what the map_function is going to do is simply look inside the record and extract the domain from the uniform_resource_locator and it's going to produce as output from that record the domain as the key so this is the key and then for this we can just have a null value as the value we're not going to actually need to use a value and so that's the job of the mapper pretty_simple now what does the reduce_function do the reduce_function is going to take a domain because that's the key and that's the first argument and then it's going to take a list of values in this case it's going to be a list of null_values and what's interesting is that each one of these null_values represents one access to that domain so all the reduce_function needs to do is count up how_many nulls there are for each domain so it's going to produce as its result the domain and the count and believe it or not we've solved their problem with just a little_binary_digit of code just a code to find the domain inside the uniform_resource_locator from our record and then this simple code to count up the number of nulls the system will take care of shipping the records to the right nodes to perform the tasks in parallel and then re shipping them so all of the records for all of the outputs for a particular domain are in the same place and can be counted now let_me give an example of how that combiner function will be used the combiner function as a reminder will operate at the same node as a mapper and do some sort of pre aggregation of the data so for example we could use a combiner we'll put that right here after the mapper and the combined function is going to take the domain and the list of nulls actually it's going to do exactly what the reduce_function was doing and it's going to produce the domain and account and so that at each individual node we'll count up how_many accesses there were to that domain in the data that's being processed at that node but then when we get to the reduce_function we may get a bunch of those records so this list of null here now becomes a count that's what arrives at the reduce_function the output of the combine and then instead of doing a count here we do a sum and that will give_us the right answer as_well and that will be more efficient again because of the pre aggregation that occurs right in the same node that's processing the map_function whoops i made one mistake there sorry about that actually this count here that goes to the reduce_function is a list of counts right because we're going to get one of these from each of the mappers and then we add those list of counts that's the sum that we perform here sorry about that small mistake now let's modify the problem we'll take the same data but instead of just counting how_many accesses we have to each domain let's compute some total value of the accesses for each domain and we might do that based_on something that we see in the additional_information for example how valuable the user is whether the user went off and bought something something like that so let's modify our map and reduce functions for this slightly enhanced problem now our map_function again is going to take a record and this time it's not going to look only at the uniform_resource_locator but it's also going to look inside the additional_information and what it will produce is the domain that it extracted from the uniform_resource_locator and then let's say some kind of score on how valuable that access was based_on whatever it sees inside additional_information the reduced function then is going to take a domain and it's going to take a list of scores for that domain and then similar to what we had previously the output is going to be the domain and the sum of those scores now one of the interesting things here is how the map_function interacts with this additional_information because the map_function is going to have code that is going to look in the information and it's going to determine a score based_on what it sees if we change what's available in additional_information then we can modify the map_function but everything else can stay the same or if we say we refine how we extract the score so that is one benefit to some extent of the the mapreduce_framework because the computation of the score is just embedded in this one piece of code now let's modify our example further similar to the modification we made in the earlier video let's_suppose that in addition to the web blog we have separate information_about the user so separately from what might be an additional info we have in a different data set the user id the name the age the gender and so_forth and now let's say that we again want to find the total value of the accesses for each domain but now the value is computed using the user attributes that we get from the separate data set well this frankly in map reduce is hard to do it effectively involves joining these two data sets not something that's supported natively in mapreduce so now we've kind of hit the limit of what's very convenient to do in the map reduce framework but we will momentarily see that there are solutions to that as_well so to summarize the mapreduce_framework has no built in data_model the data just starts and files and it ends in files the user just needs to provide specific functions the map_function reduce_function reader and writer and optionally a combiner and the system will provide all of the execution glue it will guarantee the tolerance to system failures and it provides scalability by doing the assignment of the processing tasks to say an increasing number of computing nodes so when the mapreduce_framework came out of google and the hadoop open_source implementation was released there's a lot of excitement it was pretty exciting because you could just write a couple of simple functions and then the system would provide the processing of massive amounts of data through those functions and it would be scalable it would be efficient and it would be fault tolerant but over time people realized that they don't always want that low level programming and our favorite traditional notions of database schemas and declarative queries started to be missed and so what was developed is some languages that actually sit on top of hadoop or the mapreduce_framework one of them is called hive and hive offers schemas and a language that looks very much like structured_query_language another language is called pig pig is a little_binary_digit more imperative in_other_words it's a binary_digit more of a statement language but the fundamental constructs in pig are still relational operators and you could almost think of a pig script as being a little_binary_digit like those statements of relational_algebra that we saw way back when with the addition of loops and so_forth both of these languages are what the user sees and they compile to a workflow or you think of that as a graph of hadoop jobs hadoop again being the open_source implementation of map and reduce any job being one instance of map and reduce like that big picture i showed before and one thing i should mention as of november which it is now a really significant portion of hadoop jobs are actually generated by hive and pig or hive or pig so more and more users are actually choosing to use a higher_level language rather_than program the mapreduce_framework directly now i'd be remiss if i didn't also mention one other system there's a system called driad that allows users to specify a workflow sort of similar to the workflow that might be generated by hive and pig so it's more general than just one mapreduce job and there's also a language called driadlink that sits on top of driad and compiles to driad sort of in the same way that hive and pig compile to a workflow of mapreduce jobs now let's move on to talk_about key value_stores as a reminder the hadoop or mapreduce_framework is designed for more olap type operations or analytical operations that involve scanning most of the data and i think that was very clear from what the mapreduce_framework does where key value_stores are designed more for these online_transaction_processing style applications where you're doing small operations maybe over a single record in a massive database and so the key value_stores are extremely simple the data_model for key value_stores are just pairs of keys and values not surprisingly and the basic operations are simply to insert a new record so you provide a key and value to fetch a record by it's key to update the contents the value in the record for a given key or to delete the record with the given key so that's it and with that simple set of operations as you can imagine the implementation is focusing on doing these simple operations over massive databases very very quickly so again like hadoop efficiency scalability and fault tolerance are the most_important things because we're looking_at applications with massive amounts of data and very stringent performance requirements so the way the implementation works at a very very high_level it's actually quite complicated to make it work very well is that the records are distributed to the nodes the computing nodes based_on the key probably a hash value over the key so to find the record for a given key can be very quick you go straight to the node in fact the records may be replicated across multiple nodes and that gives you both efficiency you can go to maybe a lightly loaded node it gives you fault tolerance if a node fails the notion of the actions and key value_stores are very_simple one operation itself is a transaction so we don't have the idea of grouping a bunch of operations into transactions and furthermore they implement something called eventual consistency and that says that the replicas of a single record can actually diverge in their value for some point of time what eventual consistency specifies is that if all operations stop then the system will become consistent with all copies of each record being the same now unfortunately as is sometimes the case these very_simple operations and this simple data_model weren't always quite enough and so some key value_stores but not all i would say have a concept called columns that occur within the value so the value here has a little_binary_digit more structure to it than just a blob of bits and the columns will typically be kind of like an embedded key value_stores one thing that's important is they don't require uniform column so none of the key value_stores are as strict in their structure as a relational database system would be the other addition that some allow is a fetch on a range of keys so this might say i want to get all keys say between two and ten and so that requires a different type of implementation as you can imagine but it does allow that operation to be performed efficiently if that is something that the application needs just a few examples of key value_stores this is not an exhaustive list there are many more and this is only november so things will change over time but some of the more prominent key value_stores are listed here google's big table amazon dynamo cassandra which is an open_source voldemort h base and again there are many others these are just a few example now let's talk_about document stores actually document stores are very much like key value_stores except the value itself is a document so the data_model is a key document pairs and what's interesting now is that the document in document stores is typically a known type of structure so the document might contain javascript_object_notation formatted data javascript object notation it might contain extensible_markup_language which we have learned about or other semi_structured formats the basic operations are very similar though to what we say in key value_stores you can insert a new document based_on a key we can fetch based_on a key modify the contents associated_with key and delete the record associated_with a specific key but also very_important is that there is a fetch operation based_on the document contents and this is very system format specific what the operations would be so there is not a standardized fetched query language at this point in time again a few example systems a not exhaustive list are the systems couch db mongo database simple database they all seem to have database in their name and again this is november things that will undoubtedly change one structured_query_language system i'd like to cover is graph database_systems graph database system as the name implies are designed for storing and running queries or other operations over very_large graphs the data_model is that every object is either a node or it's an edge between nodes nodes may have properties very often id is a required property of a and edges may have labels so you can think of them as rolls so i think what's best to understand this is just to see an example my example is going to be a very small social network a tiny one actually a similar one to what was used for some of our structured_query_language exercises so let's start with three nodes and the nodes are gonna represent people and the properties of the nodes are going to be id name and grade and so each node is going to have a value for the id name and grade for this one we'll make it one amy in grade nine and we'll have two more so here are the three nodes representing three people in our social graph we also have id which is ben in grade nine and id which is carol in grade ten depending on the system the nodes may or may not have to have uniform key value pairs within the most system won't be that stringent then in addition to the nodes we have the edges between the nodes typically they would be directed edges so let's make two different types of edges let's make friend edges and let's make likes edges so let's say for example amy likes ben so that would be a directed edge here with the property likes and maybe ben likes carol let's say here and maybe then we have that amy and carol are both friends with each other so we'll have a different type of edge called friend now one might_wonder how long those friendships will last with this complicated likes relationship but in any case this gives you an idea of the type of data that's stored in a graph database the data_model is very specifically about storing nodes with properties inside them like key value pairs and edges typically with labels or rolls on them of course that's not required so in graph database_systems currently the interfaces to the systems and the query languages vary a lot there's no standardization at all and the queries might just be single step queries like asking for friends they might be path_expressions like ask for the women friends of the men friends of someone we saw that example in the earlier video or they might have full recursion where you can traverse to arbitrary depths through the graph a few example systems again as of november you know i was going to say that are a neo j flat database and prego and these systems actually differ quite a lot from each other i also wanted to mention resource description framework resource description framework is the resource description framework and there's something known_as the resource description framework triple stores resource description framework is based_on objects having relationships to other objects so you can almost think of those as two nodes with edges between them so you can imagine how resource description framework can be mapped to graph databases so those were four examples of nosql_systems if the most prominent categories at this point in time the mapreduce_framework again with languages sitting on top of mapreduce such as hive and pig key value_stores for more small transactions over massive databases but just operating small bits of them at once document stores and graph database_systems nosql stands for not only sql recognizing that for some applications these frameworks work better than traditional database_systems but for many applications a vast number of applications traditional databases are still used
