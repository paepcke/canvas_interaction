 in this video which will mostly be live demo we'll talk about modifying views through triggers
 as a reminder once we've defined a view say called v we'd_like to be able to run modification commands over v as if it were a regular table
 now since v is not a regular table
 it's just a view definition what happens is that the modification commands against v are rewritten to modify the base tables over which v is defined and as we talked about previously unlike with queries overviews we can't in general automate the process of rewriting of modifications on views into modifications on the base tables
 as we discussed in the introductory video there are two basic approaches to dealing with the fact that the translation can't be automated
 one is to have intervention by the view creator where the rewriting process is specified as part of creating a view if we want to allow the view to have modifications against it and the other is to restrict the allowed views and modifications so that the the translation can be automated
 in this video we're talking about the first case and specifically we're going to see how instead of
 triggers
 a special type of trigger can be used to specify the rewriting process to enable modifications against views
 we'll be using our standard simple college admissions database for the demonstration where we have our usual three tables the college table the student table and the table containing information about students applying to colleges
 so let's turn to the demo
 as usual we'll start with our four colleges stanford berkeley mit and cornell our bunch of students and finally the records showing our students applying to colleges for a specific major and a decision for that application
 some of the views we use in this demo are going to be the same views that we used in our demo showing how we define and query overviews and now we are going to focusing on the ability to run modification commands against views
 our first views is one of those it's called cs accept and as before it contains the student id and the college_name where the student has applied to major in cs at that college and the decision is yes we've now created the view and we can take a look_at its contents and we'll see that we have a few students who have been accepted to cs at a few colleges
 now what we'd_like to do is run a delete command against the view
 let's say that we want to delete student the two records of student being accepted to major in cs
 so we would run that command like this very simple
 delete from cs accept or student id equals one two three
 but when we run the command we get an error because sql light does not allow us to modify views
 so here's the trigger that we're going to create to enable deletion commands to be run on the cs accept view
 this trigger is going to intercept those deletions and it's going to translate them into deletions on the base data over which cs accept is defined
 so let's take a look_at what we'd_like to happen
 if a user asks to delete some data from the view and again let's go back and look_at our view
 if the user wants to delete one two three stanford from the view then what we want to be deleting is the apply records that gave us these tupples in the view
 so let's go take a look_at the apply relation here and we'll see that this was the first record here where the student applied to c s
 at stanford and the decision is yes and the rd record where this person applied to berkeley and c s
 is yes
 we don't want to delete the other records for the student because those weren't contributing to our cs accept view
 so we'd_like to translate that deletion on the view into a deletion over apply such that the new value of the view no longer has those first two tupples for student
 so let's see how that's implemented by our trigger
 now the one important thing to know that happens and this is the one real contribution the system makes to what we're doing here to enable view modifications is that we do have access two of the deleted tupples
 so this trigger it's actually a row level trigger so it's going to be run once for each deleted row and when we run the trigger we will have this special variable old that contains the contents of the row that the user is asking to delete
 so in the action portion of the trigger that we can refer to the variable old to the student id and college_name that are in the accept view as if we were really deleting that tupple from the view so again let me reintegrate the system is going to bind to variable old the tupples to be deleted from the view using the scheme of the view even though those tupples aren't physically in existence
 and we'll use the value from those to translate to the deletion we want to perform on the apply table
 very specifically for the cs accept view if we have a student id college_name combination to be deleted from the view then what we'd_like to delete from the apply table is the tupple that has that student id that collage name a major of cs and a decision yes
 so the person who writes this trigger which is presumably the person who created the view is going to use the combination of what was defined in the view major equals cs in decision equals yes combines with the value getting to be deleted from cs accept
 i hope that makes some amount of sense
 so now that we've created this trigger let's go back and let's try to perform our deletion operation again this time it looks like we had success so lets go_ahead and see what happened
 we go to our view manager
 we see indeed those couple tupples are gone
 now remember this table isn't actually stored this when we look_at the view its actually running the view query against the data
 so when we look_at the apply table we should also find that's the really important thing that the tuples corresponding to being accepted to cs are indeed gone
 and it's the deletion of these tuples from apply that causes the tuples to be deleted from the view and that was the deletion on apply was because we installed this trigger that intercepted the deletion on the view and translated to the deletions on the base tables
 so that worked out pretty well now suppose that we want to enable update commands on our view
 let's say we want to change this student 's acceptance to cs at cornell to be an acceptance to cs at carnegie melon university instead
 so here's the update command we run it's very simple we find student id and we change the college_name to cmu and we're updating the view cs accept
 of course when we run this we again an error because sqlite won't allow us to perform an update command on a view except if we have a special instead of trigger that intercepts that command and translates it
 so that's what we'll do next is create a trigger
 so here's the trigger but what i'm going to demonstrate with this trigger is that nothing is forcing the trigger writer to actually do the right thing when a modification is translated to the base tables
 so we are going to intercept updates to the cs accept view
 and in fact you might remember from triggers that we can be even more specific with update triggers and say which column is updated
 so this particular trigger is only going to update is only going to intercept commands that are trying to update the college_name column of the cs accept view
 and then it's going to translate them to update the apply table
 now what we have when this trigger is run and again it's run once for each roving updated is we have old and new that are bound to the old value of the updated view tuple and the new value of the updated view tuple
 and only the college_name will have changed in this case
 so we're going to update the apply the relation
 we are going to set college_name to be the new college_name and that's going to be for the tuple where we have the old student id and the old college_name that finds the tuple to update however whoever wrote this got a little wacko instead of writing the condition that it's applications to cs where the decision is yes they've made it applications to ee where the decision is no
 but nothing prevents us from writing this trigger which performs this incorrect translation
 so now that the trigger is installed we can run our update command before we do that lets go look again and remind ourselves what we have we have has applied to cornell and we're trying to change that to be carnegie mellon
 and in our apply relation we have has applied to cornell of cs yes that's why is in the view
 also by the way has also applied to cornell offer ee and the decision on that one was no
 so back to our update command
 now we'll run the command and now that we have our trigger installed the command succeeds
 and let's go see what's happened to our database
 here we are in cs accept and nothing has changed
 has still applied to cornell
 we wanted it to be cmu but we wrote the wrong trigger so it did the wrong thing
 and specifically if we go look_at apply now we see that this record here this apply record has actually been updated
 so our trigger went in and modified that cornell to be cmu because it matched the major being ee and the decision being no
 so again what i'm emphasizing here is that it is important to write the correct translation and nothing in the system is checking that that is the correct translation
 of course the correct translation would be if we wrote cs here and decision equals yes
 that would be the correct oops decision equals yes
 here would be the correct trigger that we'd_like to install to manage updates on the college_name of the cs accept view
 so far we have been looking at the cs accept view and we've looked at deletions and updates
 now we are going to look_at insertions and we'll look_at a somewhat different view
 this is a view of the ids college names and majors of students who have applied to major in either cs or ee
 now let's take a look_at the contents of our view in csee and we see that we have quite a number of students who have applied to major in ee or cs and the colleges to which they've applied
 now let's suppose we want to insert a new tupple into this view
 so we want student to have applied to berkeley in cs
 we run the command and of course we're going to get an error because we haven't yet installed the trigger that intercepts insertions into the view called csee
 so here's the trigger and this one's pretty straight forward
 it says instead of inserting on the view and again the system will provide to us the user's intended insertion on the view in the variable called new as part of the trigger so instead of inserting into the view we'll insert into the apply table the student id the college_name the major and then we'll put in null for the decision
 with that trigger installed we can now go back to and our insert and perform it and look_at the contents of our view
 so here's our new tupple that we wanted insert the view and again this is not a start table this is just a result of a query over applied but it's there as we wanted it to be
 and if we take a look_at the applied table we'll see that was inserted with berkeley cs and a null value for the decision
 but now let's see where things can go wrong
 our trigger was blissfully simple but what if we put here that is going to apply to berkeley in biology
 and we try to insert that tuple into our view called csee that is suppose to be cs and e majors
 so lets go_ahead and run that insertion
 and everything went fine let's take a look_at our data
 well here's our view and nothing changed our attempted insertion apparently didn't happen
 well here is our insertion we inserted a biology major so what in some sense that's good we don't want our biology major to show up in our view
 on the other hand our insertion trigger was activated and if we go_ahead and look_at the data specifically the apply relation we'll see that we did get a tupple insert into apply
 that tupple just didn't show up in our view because it didn't satisfy the condition
 so presumably we don't want users to be able to writ insertion commands against a view that affect the underlying database but don't get reflected in the view because they shouldn't be in the view in the first place
 so we need to write a better trigger to handle insertions into this particular view
 so we are going to drop the trigger that we wrote and create a new one and and this one is going to use the when clause of triggers it's the first time we used it in this demo and it's going to check that the tupple that the user is attempting to insert into the view has a major that's cs or that's in ee
 if the attempted insert doesn't have cs or ee as a major then the trigger won't do anything
 but if does then it will insert into apply the student id name and major
 now that we've fixed up our trigger let's go back to our insertion command
 we've already done damage with student
 so let's try student this time
 let's attempt to insert the student and then let's see what happened
 if we go to the view that student is not in the view which is a good thing because it's a biology major
 but most importantly we hope that nothing happened to the apply table and just to be sure we have refreshed and we see that indeed nothing got inserted
 so that's the case that we would like
 i mean maybe we'd_like an error message to be generated but certainly if the user attempts to insert into the view a tuple that doesn't belong in the view wouldn't like the database to be altered
 now let's suppose instead that student asks to major in ee
 now when we run the command we should see in our view that the student has shown up and indeed they have
 so that insertion was intercepted and the underlying modification was made to the apply table so that the view now has student and if we go look_at apply we'll see again that successfully was inserted to apply
 so now insertions into cs ee are doing the right thing
 so we've seen examples of triggers to intercept now updates and insertions to views and do the right thing of modifying the underlying base tables so that the view gets the desired modification
 the next phase of the video is just going to show a few examples quickly where we'll define views that have ambiguous modifications in fact where we might not even want to allow users to modify the contents of the view at all so our first view demonstrates that when a view includes aggregation it's probably not sensible to allow users to modify it
 this view finds for each high_school size the average gpa of high_school students who went to a high_school of that size
 so we'll create the view
 we'll go and take a look and let's see what it contains
 so here are the contents of that view
 it has the different sized high schools represented in our database and the average gpa of students who went to a high_school of that size
 so does it make sense
 for a user to modify this view
 i mean maybe would a user want to write a command that says update the view and set the average gpa to or the high_school size as
 so going back and looking here we wanna change this average of gpa
 how would we have a rule for modifying the underlying data to change the average gpa
 it really isn't very sensible and making insertions and deletions to this view well maybe we translate deletions to translate to delete every student who went to a high_school of that size but that's probably not what we want
 so fundamentally when a view includes aggregation it usually does not make sense to allow users to perform modifications on that view
 aggregation views are most useful just for running queries
 here's an even simpler view where we may not want to make modifications
 this view just lists all the majors that are represented in our apply relation
 so we'll create the view and take a look_at it and we see that we have seven different majors in our relation
 now would it make sense for a user to say i want to add a new major to that view so i'd like to have students who have applied to the chemistry major
 well certainly looking at the view it will be no big deal to put chemistry in here but would be the underlying change to the database
 what who you know who would be the student that's apply to that major and at what college
 so in this case what makes it not very sensible to update this view is mostly that we're just taking one column out of our table and also that we're eliminating duplicates from that column so to think how to translate this to the underlying base data we'd have to add a lot of of new values for columns just begin with and maybe there would be multiple tuples contributing to a new tuple in the apply relation
 again you know we might allow deletions we could potentially say if delete a major then we delete every application to the major
 but that's not be what's intended by creating the view
 so when we have projections onto few columns or we have the distinct keyword
 that's another example where we may not want to allow users to perform modifications to the view
 and here's our third last example along these lines this one's actually the most complicated one
 the view that we're creating now called the non unique is going to give us all student tuples where there's some other student who had the same gpa and the same high_school and it's a different student
 so you may want to refresh your sql to remind yourself how this works
 let's go_ahead and create the view and take a look_at what's in it
 here we find that there are three students who were some other student has the same gpa and size high_school
 in fact all three have the same gpa and size high_school which is not surprising in our small data set
 so let's suppose the user decides they don't want amy in this view
 so they try to write run the command delete from the non unique view where the student name is amy
 so what deletions should be performed or what modification should be performed to the underlying data in order to get amy out of the view
 well of course we could delete amy herself and that might be the most sensible
 but if we deleted doris here and the other amy i forgot to point out these are two different amy's this one's if we deleted dolores and the other amy then this amy would be deleted from the view too
 so there's something a little subtle going on on this particular example
 we are asking to delete from a view that just selects from students so you might think there is a one to one mapping so let's just delete the students that were asking to have taken out of the view
 but because the sub query references the same relation as the outer query the leading tupple reference in the outer query also affects the result sub query which can feedback into what's in the outer query
 so it's this interaction between the two references of the table that makes it pretty tricky to figure out how a modification to the view should be mapped to the modification to the base table
 so we've seen three examples of where it doesn't make a lot of since to allow users to write modifications commands against the view
 and those are based on constructs in the view definition
 and actually we're gonna see those same constructs pop up when we talk about what the sql standards says about views that are allowed to be modified but i do want to remind you that in this video we're talking about writing triggers that enable modifications to views
 and so really for all the views that i showed you we could choose to write triggers that intercept the modifications and perform
 some modifications on the base table but probably that translation would not make a lot of sense and that's the point i'm trying to make
 not that you can't do it when you have the power of writing instead of triggers but you probably don't want to do it because it probably doesn't make sense in the application
 now let's return to views that we do want to allow it to be modifiable and so we're going to enable that through instead of triggers and the next example is more complex because it involves a join of two tables
 this view is called berk and it returns student id's and majors where the student has applied for that major at berkeley
 we'll create the view we'll take a look_at its contents and we'll see that we have two students who have applied to berkeley one to major in biology and one to major in computer science
 some of our students have gotten deleted from our database along the way through our examples by the way
 so let's say that we want to enable insertions into this view
 so we want to be able to insert a pair that's a student id and a major and then insert into our underlying tables in some fashion so that that tuple is now in the view so what we're going to do is assume that when someone wants to insert into this view they are inserting for an existing student
 i'm going to actually check that's the case
 so if we have an existing student and we're inserting into the view then all we need to do is add a tuple to the apply relation that says that they are applying to berkeley for the major that's specified in the insertion we've asked for on the view
 so we will write that as a trigger
 so here is a trigger it says instead of inserting on the berk relation for each row again we'll get one instance of the trigger for each inserted row
 we'll check first of all that the student id of the inserted tuple and again new is bound to the inserted tuple the student the tuple the user wants to insert into view berk
 we'll check that that student does exist in the student relation
 if they don't exist in the student relation we're just not going to do anything with the requested insert
 if they already exist in the student relation then we can insert into apply the student id berkeley because we know this is the view for students who applied to for applications to berkeley the major they're applying for and null for the decision
 so instead of demonstrating just a single tuple being inserted i'm going to do something a little more complicated and ask to insert a whole bunch of tuples into berk and we're going to see that each of those tuples is going to result in an insertion into the apply table underneath and of course the desired insertion into the view
 so the way that i'm going to generate a batch of tuples to be inserted is into the view is to run a sub query
 and a sub query's gonna take all student id's that are not in the apply table for berkeley so students who have not yet applied to berkeley and we're going to for each one ask that we insert into the view that student and a psychology major application to berkeley
 so lets first take a look_at our apply table to see who is going to be applying to berkeley for psychology
 so we have two three four who has applied to berkeley already and nine eight seven and their in our view
 by the way if your wondering why these three students down here didn't appear in our view it's because these were inserted as an artifact of our demo and we never inserted matching student tuples
 so these aren't going to participate in the joint
 so we just have two students in our joint
 all the rest of the students here who haven't applied to berkeley are now going to apply to berkeley in psychology as a result of us running that insert command that's gonna be intercepted by our trigger
 so here's the trigger here's the insert command lets go_ahead and run the insert and now let's take a look and see what happened
 we go to berkeley and we do see indeed a whole bunch of psychology majors now in our view and of course that's because we should have a whole bunch of psychology majors now in our apply relation and here they are
 so back to our view what if we now want to enable users to delete from the view
 we're going to again assume that the intention is not to delete the student the student id table is gonna stay stable
 and what we're going to do is we're gonna delete the corresponding applications
 so here's the trigger to do that it's activated by deletions on the berk view and the system again will bind in the desired deleted tupples from the view to the reserved variable old
 so the action the trigger will delete from apply where the student id matches the one to be deleted the college_name is berkeley because that's what we're looking for that doesn't come from the deleted tuple that's not present in the view but we know that's a condition from the view definition and the major has to match the desired deleted major
 so we'll ask to delete from berkeley all the records were the major is cs
 so lets go_ahead first and take a look_at the view and we see that we have just one so we'll expect this tuple to be deleted from the view
 but that's going to happen because we are going to delete the corresponding apply record underneath
 so we go_ahead and execute the deletion
 we'll take a look first at the view
 make sure that cs is gone and it is and then we'll go look_at it in apply
 we forgot to look_at it in first place but i think it was student
 and now has no longer applied to berkeley
 and finally let's enable updates to our berk view update the student id
 but we'll allow updates to the major
 so we'll have a student that applied to berkeley in say psychology decide they want to major on something else
 so here's the trigger
 and this one is going to intercept updates to the major on berkeley so it won't intercept updates to the student id
 and again now we'll have the old and new values bound to the old and new imaginary tupples of berk
 it's going to update the apply relation
 it's going to find the record where we have the student id and our update
 this could be old student id or new student id since it's value isn't changing
 so we find the student id we care about their application to berkeley for the old major and we'll change that to be applying to the new major
 so let's take all those psychology majors and let's turn them into physics majors
 so with this one update command we'll be asking to update most of the tupples in the berk view each tupple one at a time will be intercepted by our trigger and it will modify the apply table for the corresponding record and turn the psychology major into physics
 we'll run the command
 and we'll take a look_at what happened
 here's our view and we see indeed that all the psychology majors have turned into physics majors
 and of course that's a result of the modifications to the underlined table apply where again we've seen all the psychology is changed to physics
 now back to our view i said we weren't going to allow modifications to the student id and the trigger that we wrote only intercepted modifications to the major
 so let's see what happens if we try to modify the student id
 here's a command that tries to set to in our berk view
 and if we run the query then we do get an error because we didn't implement any translation for modifications to that column
 the last portion of our demonstration is going to demonstrate the interaction of view modifications and constraints
 so i'm going to drop my apply table create a new version of it where we add to the decision column a constraint that the column is not allowed to be null
 now let me remind you of a view we created a long time ago called csee that took the student's colleges and majors where the student had applied to major in cs or ee
 and lets look specifically at the trigger that we created to handle insertions into this view
 so you might remember or you might not that we first created an incorrect trigger
 but here is the one that we have activated
 and the important thing to notice is that it intercepts insertions into the view and then it inserts into apply a tuple that contains the student id the college_name and the major and then puts null for the decision
 and this is where our troubles are going to occur because we've now created a version of apply that doesn't allow null for a decision
 so let's try inserting into our csee view
 the value is one to three berkeley in cs and that will translate to an insertion to apply of the same values and null for a decision
 we run the insertion and we get the constraint violation
 so what happened is the insertion into the view was intercepted by the trigger translated to an insertion to apply but that insertion generated a violation against our not null constraint on the decision column
 so it's doing the right thing but we'll never be able to insert into the csee view now because we're always going to attempt to insert more values
 so if we want to have that not low constraint on the apply relation we'll have to modify modify our translation for csee so it doesn't generate the null values
 and here is a second example along the same lines
 we're going to drop apply again and create a new version of apply
 this time we're going allow null values and decisions
 so we've taken away that null constraint but we've added a key constraint to apply saying that the combination of student id college_name and major must be unique
 so a student can't apply twice to the same college for the same major
 so because we've created a new apply relation it's starting out empty
 but let's insert some tuples but we're going to insert into the apply relation via the csee view and its trigger
 so we'll insert student applying to berkeley for cs and berkeley for ee
 and again we're inserting these into the view
 we'll run that
 we'll take a look_at our view and we'll see that where is it here we go csee has those two tuples that we inserted
 of course those are intercepted by the trigger and created insertions into apply
 and here's the apply relation which looks exactly the same but with a decision as null
 now what we're going to do next is actually insert into one of our other views
 i don't know if you remember the berkeley view but that was the ids and majors of students who had applied to berkeley and let's go take a look_at what happens when we try to insert into the berkeley view
 here's the trigger that we wrote to handle insertions into berkeley
 when the student that we're trying to insert does exist then we'll insert a record into apply having that student apply to berkeley for the major that's specified in the insertion and a null decision which again is fine now because we removed that non null constraint
 so we're going to try to insert into berkeley student majoring in ee and we're going to see that's actually going to violate our key constraint
 so let's go_ahead and we get a non unique constraint because that attempted to insert into the apply table
 let's go look_at that table and attempted to insert in to apply berkeley ee and that would have violated the constraint that we can only have one tuple for a student id card
 college name and major combination
 so again our attempt to insert into the view was translated that's the earlier insert
 sorry our attempt to insert into the berkeley view was translated into an insertion to apply that violated the constraint
 and as a grand finale let's try an update on our berk view
 so let's suppose that we want student one two three to major in cs in both applications to berkeley and that will generate an update to the underlying apply table that should violate our constraint
 just as a reminder let's take a look_at what happens when we try to run an update command on the major of the berk view
 here's our trigger that we wrote a while ago
 it intercepts updates to berk and it translates them to update the apply relation find the appropriate record where it's an application to berkeley matching the old major and the student id and it changes it to the new major
 so we're going to try to update a berk
 we're going try to set let's find it here we're going to try set the major equals cs for student id
 so if we take a look_at what is going to try to the apply relation
 it's going to try to set these majors both to cs and that will give us again a key constraint violation
 so let's go_ahead and try to run the command against burk it'll translate to an update on apply and that update won't be allowed
 so that completes our demonstration of enabling view modifications using triggers so this demonstration was all run on the sqlite system
 the sqlite system does not allow any modifications commands on views directly so we saw every time we tried that we got an error
 and the only way that a user can run modifications over views is if we have in place the special instead of triggers that intercept the modifications that are attempted on the views and translates those to modifications on the base table
 now the system when it does process the triggers generates for the modification on the views what the data would be in terms to binding those modification to the old and new variables that are available in triggers
 but the rest of the process is up to the user to write the actions that will take place when the user attempts to do a modification on a view and as we saw there are no checks in place to make sure the user writes correct modifications that result in view updates
 however when the user does things correctly it can all work in a very powerful and correct fashion
