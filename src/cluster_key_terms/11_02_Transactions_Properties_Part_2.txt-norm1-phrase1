 now you might wonder how the database system could possibly guarantee this level of consistency while still inter leading operation
 it uses protocols that are based on locking portions of the database
 now we're not going to describe the implementation because implementation aspects are not the focus of this course
 what you need to know from a user's application perspective is really the properties that are being guaranteed
 now with the formal notion of a let's go back and look at the examples from the previous video that motivated the problems we could get into with concurrent access
 the first one was the example where two separate clients were updating standford's enrollment
 let's just call one of them t
 it's not a transaction
 and the other t
 so when we run thing is against the system and serializability is guaranteed then we will have a behavior that is at least equivalent to either t followed by t or t followed by t
 so in this case when we start with our enrollment of either execution will correctly have a final enrollment of solving our concurrency problems
 here's our second example
 in this case the first client was modifying the major of student in the apply table and the second was modifying the decision
 and we saw that if we allowed these to run in an interleaved fashion it would be possible that only one of the two changes would be made
 again with serializability we're going to get behavior that guarantees it is equivalent to either t and then t or t and then t
 and in both cases both changes will be reflected in the database which is what we would like
 the next example was the one where we were looking at the apply and the student table and we were modifying the apply table based on the gpa in the student table and simultaneously modifying that gpa
 so again if these are issued as two transactions we'll have either t followed by t or t followed by t
 or at least we will have behavior that is equivalent to that
 now this case is a bit interesting because either of these does result in a consistent state of the database
 in the first case we'll update all the decision records before the gpas are modified for anyone and in the second case will update the apply records after the gpas have been modified
 the interesting thing here is that the order does matter in this case
 now the database systems only guarantees serializability
 they guarantee that the behavior will be equivalent to some sequential order but they don't guarantee the exact sequential order if the transactions are being issued at the same time
 so if it's important to get say t before t that would actually have to be coded as part of the application
 and our last example was the case where we had the apply table the archive table and we were moving records from one table to another in one of our clients and the other client was counting the tuples
 and again so t and t they're issued as transactions
 the system guarantees that we'll either move all the tuples first and then count them or will count the tuples and then move them
 now again here's a case where the order makes a difference but if we care specifically about the order that would have to be coded as part as the application
 ok so we've finished our first of the four acid properties
 the other three will actually be quite a bit quicker to talk about
 let's talk now about durability
 and we only need to look at one client to understand what's going on
 so let's say that we have our client and the client has issuing a sequence of transactions to the database
 and each transaction again is a sequence of statements
 and finally at the end of the transaction there is a commit
 so what durability guarantees for us is that if there is a system crash after a transaction commits then all effects of that transaction will remain in the database
 so specifically if at a later point in time after this occurs there's a failure for whatever reason the client can rest assured that the effects of this transaction are in the database and when the system comes back up they will still be in there
 so you may be wondering how it's possible to make this guarantee since database systems move data between disc and memory and a crash could occur at anytime
 they're actually fairly complicated protocols that are used and they're based on the concept of logging
 but once again we're not gonna talk about the implementation details
 what's important from the user or application perspective is the properties that are guaranteed
 properties down
 now let's talk about atomicity
 again we'll only look at one client who's issuing a sequence of transactions to the database
 and let's look at transaction t which itself is a sequence of statements followed by commit
 the case that atomicity deals with is the case where there's actually a crash or a failure during the execution of the transaction before it's been committed
 what the property tells us is that even in the presence of system crashes every transaction is always executed either all or nothing
 on the database
 so in other words if we have each of our transactions running it's not possible in a system crash to say have executed on the database a couple of statements but not the rest of the transaction
 now once again you might be wondering how this is implemented
 it also uses a log in mechanism and specifically when the system recovers from a crash there is a process by which partial effects of transactions that were underway at the time of the crash are undone
 now applications do need to be somewhat aware of this process
 so when an application submits a transaction to the database it's possible that it will get back an error because there was in fact a crash during the execution of the transaction and then the system is restarted
 in that case the application does have the guarantee that none of the effects of the transaction were reflected in the database but it will need to restart the transaction
