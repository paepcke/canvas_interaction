 the next set of queries will show introduced the concept of the aggregation in sql
 once again we start with the basic select from where construct and this time we're going to introduce what are known as aggregate or aggregation functions
 these are function that will appear in the select clause initially and what they do is they perform computations over sets of values in multiple rows of our relations and the basic aggregation functions supported by every sql system are minimum maximum some average and count
 now once we've introduced the aggregation functions we can also add two new clasues to the sql select from where statement the group by and having clause
 the group by allows us to partition our relations into groups and then will compute aggregated aggregate functions over each group independently
 the having condition allows us to test filters on the results of aggregate values
 the where condition applies to single rows at a time
 the having condition will apply to the groups that we generate from the group by clause
 all of these constructs will become very clear when we show some examples
 as usual our examples we use are simple college admissions database that has a table of colleges a table of students and information about students applying to colleges
 as usual we have four colleges a bunch of students and applications of students to colleges for specific majors
 our first aggregation query is a very simple one computes the average gpa of the students in the database
 here is the query but just to explain the query let_me first replace the aggregation with star
 when we run select star from students we get our result here
 specifically when we look at the gpa column what the aggregation is going to do is perform a computation over all values in the column and then produce just one tuple in the results that has that value
 so we'll write average gpa
 we'll run the query and we see now the average gpa in the database
 our second querie is a bit more complicated
 it involves a join
 what it finds is the minimum gpa of students who have applied for a cs major
 so we do the join of student and apply on student id
 filter for major equal cs
 once again let_me just remove the aggregation first so we can see the result without aggregation
 here we see all of the information about students who've applied to a cs major
 the aggregation is going to look at the gpa column and it's going to take the lowest value in that column
 so we write min gpa
 run the query and we discover that the lowest gpa is three point four
 now let's go_back to the average aggregate function again
 so let's compute the average gpa of the students who have applied to computer science run the query and we see the result is about three point seven
 in fact this result is probably not precisely what we were looking for
 in a previous video we talked in some detail about this particular form of query versus using a sub query to find the gpa of students who have applied to cs
 the issue with this particular query and let's go_back to select star version is that if a student applied to cs multiple times for example student amy applied to both stanford and berkeley
 then when we compute their average gpa we're going to be counting their gpa twice
 presumaly what we actually want is to count the gpa once for each student who applied to cs no matter how many times they applied
 so in order to do that we use the sub query form where we select from student and then we just check for each student whether their id is among those who apply to cs
 so let's just do a bit of editing here from apply where major equals cs
 i'm not a very good typist
 let's just first take the sub query form and we see that we made a mistake here and it says that we forgot a word here which is in
 apologize for that
 okay now we have the students who applied to cs and in this case we only have one instance of each student
 so now if we run the aggregation when we compute the average gpa we'll correctly count students gpa only one time
 so remember with three point seven approximately before now we run the query and we see that the correct result is three point six eight not that different but this one is the numerically correct result
 so far we've seen the average and min aggregate functions
 this query shows the count function
 so not surprisingly the count function just returns the number of tuples in the result
 so this particular query finds the number of colleges in our database whose enrollment is greater than fifteen thousand just for it to be thorough let's run the query without the aggregate function and we see that there are two of them and the aggregate function simply counts those number of tuples
 we run the query and the result is two as expected
 let's do another count query that looks very similar
 in this case we are counting the number of students who have applied to cornell
 so the query looks the same will run the query and we discover that six students have applied to cornell
 well in reality what we've actually counted in the number of applications to cornell not the number of students who have applied to cornell
 if a student applied three times then we're counting them three times in this result
 so in some sense this is similar the previous one we saw we were over counting and we could try to fix it with the sub query and the in and so forth but actually sql provides a very nice way for us to perform the query that we want
 in the count function we can put a special keyword distinct and then the name of one or more attributes and in this case what the count will do is will look at the result and then it will count the distinct values for the particular attribute so we run the query and we are find that there are three distinct student ids
 if we ran it without just like this
 when we see we would look and again we would find that there are three distinct student ids
 so count distinct actually turnes out to be a very useful feature in sql
 here's a rather complicated looking query and i have to admit it computes something fairly obscure but it does demonstrate some features
 what this query computes is it gives us back all students where the number of other students who have the same gpa as the student is equal to the number of other student that have the same high school size at the student
 again i admit it's a little bit of obscure but let's take a look at how it works
 so it looks at the student relation and for each student it counts the number of other students that's by testing that the id is different that have the same gpa
 it also counts the number of other students that have the same size high school and if those two values and the sub queries both produce a single value which is why would contest equality if those two values are the same then the student comes out in the result
 let's run the query
 we get our answer
 i'll leave it to you to verify by looking at the data that this is indeed the correct result
 here's another complicated looking query although this one computes something quite a bit more intuitive
 what this query computes is the amount by which the average gpa of students who apply to computer science exceeds the average gpa of students who don't apply to computer science and we are going to assume it does in fact exceed
 so we are using in this example sub queries in the from clause which i hope you remember from the previous video
 a sub query in the from clause allows you to write a select from where expression and then use the result of that expression as if it were an actual table in the database
 so we are going to compute two sub queries in the from clause one of them which is the average gpa of cs applicants and one the average gpa of non cs applicants
 let's look a little closer here so this query here says let's find the students who have applied to major in cs let's compute their average gpa and we'll call it average gpa
 we'll take the whole result and we'll name it cs
 similarly the second new relation that were computing in the from clause computes the average gpa of students who did not apply to cs so their student id is not in the set of students who applied to cs
 we'll call that one non cs
 so now with this from clause we have a relation called cs with an attribute called average gpa and a relation called non cs with an attribute called average gpa and in the select clause we'll simply do the subtraction of the non cs gpa from the cs gpa
 we run the query and we discover that the cs applicants exceed on average the non cs by point one nine
 now just for demonstration purposes let_me show that we can write the same query but using sub queries and the select clause
 you might remember from the previous video that in a select clause we can write a sub query as long as it returns a single value
 we're going to go even further we're going to write two sub queries that return single values and subtract them
 so i'm going to replace this from with select
 i'm going to take up this whole first line here
 and then i'm going to let's see
 what else do i need to do
 i'm going to take out the as here and i'm going to replace it with a minus
 i'm going to take out the as here
 so now what we've got is we've got the average gpa of cs student in the select clause producing a value
 the average gpa of non cs students
 we perform the subtraction as part of the select clause
 the last thing we need is something in the from clause so we'll say from student will call the result of this subtraction d as in for difference we run the query and we get almost the same result except for a bunch of duplicates
 the reason for the duplicates is that we compute this result once for each tuple in student
 we can add distinct and now we get the single result
 now let's learn about the group by clause which is only used in conjunction with aggregation
 our first query is going to find the number of applicants to each college and it's going to do so by using grouping
 effectively what grouping does is it takes a relation and it partitions it by values of a given attribute or set of attributes
 specifically in this query we're taking the apply relation and we're breaking into groups where each group has one of the college names so it'll be the stanford group the berkeley group and so forth and then for each group we will return one tuple in the result containing the college name for that group and the number of tuples in the group
 so to illustrate what's happening with grouping very clearly let_me start by replacing the select clause with uh select star removing the aggregation and doing an order by on the college name
 so that illustrates the groups that we're going to be using in in the actual query so we see there are three tuples for berkeley there six tuples for cornell and so forth
 within each group then for the particular query we're doing we're simply going to count the number of tuples so going back to the group by form we return the college name and we return the count of a number of tuples
 now before i actually run the query one thing to notice is what it makes sense to put in that select clause here
 we're grouping by the college name so the college name is going to be the same for all of the tuples of the group so it's sensible to include that but it wouldn't really be sensible to include when the other attributes that differs although we'll see an example later where we include that and interesting things happen
 for now we'll just put the name of the grouping attribute and then we can perform aggregation over that
 in this case count
 we run the query and we see that there are three applicants to berkeley six to cornell and so forth
 here's a very similar query just as a second example and this example we're finding the total enrollment of college students for each state
 now we only happen to have three states and four colleges in our database but what this query does is it takes the college relation it breaks it up into partitions by state and then within each partition or group it will return the state for that partition and the sum of the enrollment
 we run the query and we see the expected result
 here is a more complicated group by query
 in this case we're grouping by two attributes
 we also have a join involved and we're going to compute two aggregate functions in our result
 what this query computes is for each college and major combination the minimum and maximum gpas for the students who've applied to that college
 as usual before we do the aggregation let's replace the query with one where we can see the groups explicitly
 so i'll put gpa here and instead of grouping i'll order by and we run the query and we see for berkeley biology we actually only have one applicant for berkeley cs we have two
 i think stanford cs has the largest number of applicants at three
 so once we put the aggregation back each of these combinations of college and major is going to be considered individually and for each one will compete the minimum and maximum gpa
 so let's go ahead and do that
 all those parentheses
 ok change this to group by
 run the query and here we see for berkeley biology the minimum and maximum are the same because we saw that there was only one uh student uh who applied to berkeley biology
 stanford cs we had three we can see the spread of their gpa's and so forth for each college major combination
 now what if we were interested in finding information about the spread of gpas for each college and major uh what the differences between the minimum and the maximum
 so let's suppose in fact what we wanted to find was largest spread but let's take that in steps
 i'm going to take this current query here and i'm just gonna slap it into the from clause
 so now in the from clause i'm going to have a relation we'll call it m that's going to have the college major combinations and the minimum and maximum gpa
 this m is going to now have the result that we see below
 now once we have that result to work with in the select clause we can access the attributes here
 let me call this one mn and this one mx and if we write just mx minus mn here what we're going to get is a list of the spreads of the min and max gpa for each collage and major
 so we see many of them are zero
 those are all of the combination that had just one student but in some cases we actually have a spread but what we want to find it is the largest spread watch this it's very cute we just simply put a max function right here
 run the query and we find that the largest spread between min and max is approximately one
 our next sequence of queries introduces some subtleties of the group by clause
 what our query finds is the number of colleges that have been applied for the number of colleges that have been applied to by each student
 so the query join student and apply
 it groups the result for the student in the student id and then for each student id finds the number of distinct colleges in that group
 so once again just to illustrate let's take away the aggregation let's replace the group by by an order by just so we can see the data that we're working on and run the query and we see that student one two three has four applications to stanford berkeley and cornell
 three distinct colleges
 two three four has one and so forth
 so now let's return to our original query group by student we'll count the distinct college names
 run the query and we get the expected answer student one two three applied to three distinct colleges two three four to one and so forth
 maybe we'd like to have the student's name in the result as well
 that's easy to do
 we just add the student name to the select clause and we run query and now we've added amy is one two three bob is two three four and so forth
 that worked out fine in this case but we're gonna see in a moment where simply adding an attributes to the select clause in the case of a group by does something a little strange
 in fact the only reason that it worked nicely in this case is that when we group buy the student id within each group we have the same student name
 let's see that let's just take a look at that
 again we'll replace the group by with an order by
 we're sorting by student id and we see for the first group which is one two three we have all amys for the three four five group we have all craigs and so on
 so when we put student name in the select clause for our group by query it was ok because for each group we had the same name of the student
 when that's not the case we should presumably get an error but let's see what happens
 so let's say that we're interested now not only in finding the uh student name in our query but we're further gonna add a college name
 so let's go_back to the original query
 distinct college name
 let's add college name in our result and let's go_back to grouping by student
 so now for each student we're gonna return the i for each group which is identified by the student id we're gonna return the id the name the number of distinct colleges and then a college
 let's run the query and we do get a result we don't get an error
 so we've got amy one two three
 she applied to three distinct colleges but for whatever reason the system decided to tell us about stanford
 craig applied to two colleges and the system tells us about mit
 let's go_back again revert now to our order by form of this query and take away the aggregation and when we run the query we see there's amy and she did apply to four different colleges but when we put the college name in the grouping query it chose to tell us about stanford
 what this system is actually doing is when we include in the select clause of a grouping query again if we go_back to group by and we put in the select clause an attribute that's not one of the grouping attributes
 it actually chooses a random value from the group to include in the case of the student name the random value was always the same because the student name is always the same for the same student id
 in the case of the college it shows a random value among the colleges
 i'm personally not crazy about this behavior
 among three open source database systems that we've been using for our demos two of them allow this behavior sqlite and mysql
 i happen to be using mysql today
 if we were using postgre it would actually throw an error in this case
 let's go_back to the original query that finds a number of colleges applied to by each student
 here it is as we originally wrote it and here is the result
 now there are may some students in the database who haven't applied to any college at all and they're not going to be represented in our result because they're not going to be in the results of the join and we don't see any zero counts here
 what if we wanted to actually lift the student ids of students who haven't applied anywhere and include a zero in the result
 this is actually one of my favorite queries to give as an exercise or an exam question in my class because it takes a little innovation to figure out how to write it
 the way we write it actually is by using the union operator which i hope you remember from a previous video
 we're going to take the union of the students who have applied somewhere and the number of places they've applied together with the students who haven't applied anywhere and for those students we're going to put a cero in the result directly
 so let_me just write the beginnings of this so we're going to find those students who haven't applied anywhere at all so those are the students whose sid is not in at all the set of sids in the apply relation
 so that finds the students who didn't apply anywhere for each student will return their student id and then we want to have a zero in the result
 very simple to do we simply write zero
 we run the query and now we scroll down we'll see that in addition to all the students who have applied somewhere we get zeros in the result for the students who haven't applied anywhere
 the last clause that we're going to introduce in this video is the having clause and the having clause is also only used in conjunction with aggregation
 what the having clause allows us to do is apply conditions to the results of aggregate functions
 so the having clause is applied after the group by clause and it allows us to check conditions that involve the entire group
 in contrast the where clause applies to one tuple at a time
 so this particular query is finding colleges that have fewer than_five applicant
 so we look at the apply relation we group it by college name so we're going to have one group for each college
 then we're only going to keep those groups were the number of tuples in the group is less than_five indicating that we have fewer than_five applicants to the college
 we'll run the query and we'll see that berkeley and mit each have fewer than_five applicants
 so presumably cornell and stanford have greater than or equal to five applicants and you can check that by examining the data
 now it is possible to write the same query without that having clause and in fact without the grouping clause and let_me show you how that's done
 we're going to select again the cname from apply and here's what we're going to do
 we're going to add an attribute there sorry a table variable
 we're gonna erase this whole business and we're going to find all applicants so all applications where let_me just type this out for you five is greater than the count from apply a where a dot cname equals a dot cname and let's take a look at what this is doing
 so what we're doing here is we're looking at each application record and we're checking whether the number of other applications to the same college were gonna find all the applications to the same college we're going to count them and we're going to see if that number is less than_five
 so it's a little bit non intuitive
 now remember the result should be berkeley mit
 let's run the query and we do get berkeley mit
 we again get duplicates however
 the reason is that we're running uh we're checking this condition for each application record
 so for each application to berkeley we checked the condition that will be many of them and for each one to mit and so on
 of course as usual we can add distinct
 we can run the query and now we get the result
 it does happen actually that uh every query that can be written with the group by and a having clause can be written in another form sometime it can be in extremely contorted but another sort of complicated exercise i like to give sometimes in my classes to prove the fact that you can write every group by having query without using those clauses
 now let's go_back to our original form of the query were we used the group by and the having
 so we'll just get rid of all this
 i'm sorry i'm such a terrible typist
 group by college name having count star less than_five and we'll run the query will get the same result
 what if we were interested not in those colleges that have fewer than_five applications but rather those colleges that have fewer than_five applicants
 it's a subtle point but instead of counting the number of apply tuples for each college what we want count is the number of distinct student id's that appear in the group of apply tuples for that college
 so again now we're looking for the number of colleges who have fewer than_five distinct people distinct students applying to them and now we see that one more college joins the group so cornell had more than_five applications but at least five applications but it has fewer than_five applicants
 here's our grand finale query it has a having clause and group by and in addition to that is has a sub query within the having clause that also uses aggregation
 what this query finds is all majors represented in the database where the maximum gpa of a student applying for that major is lower than the average gpa in the database
 so we join student and apply and we group by the major so we can look at each major one at a time
 within the major we find the maximum gpa of a student applying for that major and we check whether it's lower than the average gpa in the student relation
 we run the query and we discover that bioengineering and psychology at this point in time are garnering applicants whose uh highest gpa is lower than the average in the database
 of course that does not represent reality
