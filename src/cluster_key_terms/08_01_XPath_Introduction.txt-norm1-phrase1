 now let's turn to the subject of querying xml
 first of all let me say right up front that querying xml is not nearly as mature as querying relational data bases
 and there is a couple of reasons for that
 first of all it's just much much newer
 second of all it's not quite as clean there's no underlying algebra for xml that's similar to the relational algebra for querying relational data bases
 let's talk about the sequence of development of query languages for xml up until the present time
 the first language to be developed was xpath
 xpath consists of path expressions and conditions and that's what we'll be covering in this video once we finish the introductory material
 the next thing to be developed was xslt
 xslt has xpath as a component but it also has transformations and that's what the t stands for and it also has constructs for output formatting
 as i've mentioned before xslt is often used to translate xml into html for rendering
 and finally the latest language and the most expressive language is xquery
 so that also has xpath as a component plus what i would call a full featured query language
 so it's most similar to sql in a way as we'll be seeing
 the order that we're going to cover them in is first xpath and then actually second xquery and finally xslt
 there are a couple of other languages xlink and xpointer
 those languages are for specifying as you can see links and pointers
 they also use the xpath language as a component
 we won't be covering those in this video
 now we'll be covering xpath xquery and xslt in moderate detail
 we're not going to cover every single construct of the languages but we will be covering enough to write a wide variety of queries using those languages
 to understand how xpath works it's good to think of the xml as a tree
 so i'd like you to bear with me for a moment while i write a little bit of a tree that would be the tree encoding of the book store data that we've been working with
 so we would write as our root the book store element and then we'll have sub elements that would contain the books that are the sub elements of our bookstore
 we might have another book
 we might have over here a magazine and within the books then we had as you might remember some attributes and some sub elements
 we had for example the isbn number i'll write as an attribute here
 we had a price and we also had of course the title of the book and we had the author excuse me over here i'm obviously not going to be filling in the subelement structure here we are just going to look at one book as an example
 the isbn number we now are at the leaf of the tree so we could have a string value here to denote the leaf maybe for the price for the title a first course in database systems then our authors had further sub elements
 we had maybe two authors' sub elements here i'm abbreviating a bit below here a first name and a last name again abbreviating so that might have been jeff ullman and so on
 i think you get the idea of how we render our x and l as a tree
 and the reason we're doing that is so that we can think of the expressions we have in xpath as navigations down the tree
 specifically what xml consists of is path expressions that describe navigation down and sometimes across and up a tree
 and then we also have conditions that we evaluate to pick out the components of the xml that we're interested in
 so let me just go through a few of the basic constructs that we have in xpath
 let me just erase a few of these things here that got in my way
 okay
 i'm gonna use this little box and i'm gonna put the construct in and then sort of explain how it works
 so the first construct is simply a slash and the slash is for designating the root element
 so we'll put the slash at the beginning of an xpath query to say we want to start at the root
 a slash is also used as a separator
 so we're going to write paths that are going to navigate down the tree and we're going to put a ' ' between the elements of the path
 all of this will become much clearer in the demo
 so i'll try to go fairly quickly now so we can move to the demo itself
 the next construct is simply writing the name of an element
 i put 'x' here but we might for example write 'book'
 when we write 'book' in an xpath expression we're saying that we want to navigate say we're up here at the bookstore down to the book sub element as part of our path expression
 we can also write the special element symbol ' i ' and ' i ' matches anything i i so if we write ' i ' then i we'll match any sub element of our current element
 when we execute xpath there's sort of a notion as we're writing the path expressions of being at a particular place
 so we might have navigated from bookstore to book and then we would navigate say further down to title or if we put a ' i ' then we navigate to any sub element i if we want to match an attribute we write ' ' and then the attribute name
 so for example if we're at the book and we want to match down to the isbn number we'll write isbn in our query our path expression
 we saw the single slash for navigating one step down
 there's also a double slash construct
 the double slash matches any descendant of our current element
 so for example if we're here at the book and we write double slash we'll match the title the authors the off the first name and the last name every descendant and actually we'll also match ourselves
 so this symbol here means any descendant including the element where we currently are
 so now i've given a flavor of how we write path expressions
 again we'll see lots of them in our demo
 what about conditions
 if we want to evaluate a condition at the current point in the path we put it in a square bracket and we write the condition here
 so for example if we wanted our price to be less than that would be a condition we could put in square brackets if we were actually better be the attribute at this point in the navigation
 now we shouldn't confuse putting a condition in a square bracket with putting a number in a square bracket
 if we put a number in a square bracket n for example if i write three that is not a condition but rather it matches the nth sub element of the current element
 for example if we were here at authors and we put off square bracket two then we would match the second off sub element of the authors
 there are many many other constructs
 this just gives the basic flavor of the constructs for creating path expressions and evaluating conditions
 xpath also has lots of built in functions
 i'll just mention two of them as somewhat random examples
 there's a function that you can use in xpath called contains
 if you write contains and then you write two expressions each of which has a string value this is actually a predicate will return true if the first string contains the second string
 as a second example of a function there's a function called name
 if we write name in a path that returns the tag of the current element in the path
 we'll see the use of functions in our demo
 the last concept that i want to talk about is what's known as navigation axes and there's axes in xpath
 and what an axis is it's sort of a key word that allows us to navigate around the xml tree
 so for example one axis is called parent
 you might have noticed that when we talked about the basic constructs most of them were about going down a tree
 if you want to navigate up the tree then you can use the parent access that tells you to go up to the parent
 there's an access called following sibling
 and the colon colon you'll see how that works when we get to the demo
 the following sibling says match actually all of the following siblings of the current element
 so if we have a tree and we're sitting at this point in the tree then we the following sibling axis will match all of the siblings that are after the current one in the tree
 there's an axis called descendants descendants as you might guess matches all the descendants of the current element
 now it's not quite the same as slash slash because as a reminder slash slash also matches the current element as well as the descendants
 actually as it happens there is a navigation access called descendants and self that' s equivalent to slash slash
 and by the way there's also one called self that will match the current element
 and that may not seem to be useful but well see uses for that for example in conjunction with the name function that we talked about up here that would give us the tag of the current element
 just a few details to wrap up
 xpath queries technically operate on and return a sequence of elements
 that's their formal semantics
 there is a specification for how xml documents and xml streams map to sequences of elements and you'll see that it's quite natural
 when we run an xpath query sometimes the result can be expressed as xml but not always
 but as we'll see again that's fairly natural as well
 so this video has given an introduction to xpath
 we've shown how to think of xml data as a tree and then xpath as expressions that navigate around the tree and also evaluate conditions
 we've seen a few of the constructs for path expressions or conditions
 we've seen a couple of built in functions and i've introduced the concept of navigation axes
 but the real way to learn and understand xpath is to run some queries
 so i urge you to watch the next video which is a demo of xpath queries over our bookstore data and then try some queries yourself
