 in this video we'll see a demonstration of json data
 as a reminder json stands for java script object notation and it's a standard for writing data objects into human readable format typically in a file
 it's useful for exchanging data between programs and generally because it's quite flexible it's useful for representing and for storing data that's semi structured
 a reminder of the basic constructs in json we have the atomic value such as integers and strings and so on
 and then we have two types of composite things we have objects that are sets of label value pairs and then we have arrays that are lists of values
 in the demonstration we'll go through in more detail the basic constructs of json and we'll look at some tactic correctness we'll demonstrate the flexibility of the data model and then we'll look briefly at json's schema not widely used yet but still fairly interesting to look at and we'll look at some validation of json data against a particular schema
 so here's the json data that we're gonna be working with during this demo
 it's the same data that appeared in the slides in the introduction to json but now we're going to look into the components of the data
 it's also by the way the same example pretty much that we used for xml it's reformatted of course to meet the json data model but you can compare the two directly
 lastly we do have the file for the data on the website and i do suggest that you download the file so that you can take a look at it closely on your own computer
 all right
 so let's see what we have right now we're in an editor for json data
 it happens to be the eclipse editor and we're going to make make some edits to the file after we look through the constructs of the file
 so this is json data representing books and magazines and we have a little more information about our books and our magazines
 so at the outermost the curly brace indicates that this is a json object
 and as a reminder an object is a set of label value pairs separated by commas
 so our first value is the label books
 and then our first element in the object is the label books and this big value and the second so there's only two label value pairs here is the label magazines and this big value here
 and let's take a look first at magazines
 so magazines again is the label and the value we can see with the square brackets here is an array
 an array is a list of values and here we have two values in our array
 they're still composite values
 so we have two values each of which is an object a set of label value pairs
 let me mention sometimes people call these labels 'properties' by the way
 okay
 so now we are inside our objects that are the elements in the array that's the value of magazines
 and each one of those has labels and values
 and now we're finally down to the base values
 so we have the title being national geographic a string the month being january a string and the year where is an integer
 and again we have another object here that's a different magazine with a different name month and happens to be the same year
 now these two have exactly the same structure but they don't have to and we will see that as we start editing the file
 but before we edit the file let's go and look at our books here
 the value of our other label value pair inside the outermost object books is also an array and the array in this case also has just two elements so we've represented two books here
 it's a little more complicated than the magazines but those elements are still objects that are label value pairs
 so we have now the isbn the price the addition the title all either integers or strings and then we have one nested composite object which is the authors and that's an array again
 so the array again is indicated by the square brackets
 and inside this array we have two authors and each of the authors has a first name and a last name but again that uniformity is not required by the model itself as we'll see
 so as i mentioned this is actually an editor for json data and we're going to come back to this editor in a moment
 but what i wanted to do is show the same data in a browser because browsers actually offer some nice features for navigating in json
 so here we are in the chrome browser which has nice features for navigating json and other browsers do as well
 we can see here again that we have an object in our json data that consists of two label value pairs books and magazines which are currently closed and and then this plus allows us to open them up and see the structure
 for example we open magazines and we see that magazines is an array containing two objects
 we can open one of those objects and see that the three label value pairs
 now we're at the lowest levels and similarly for the other object
 we can see here that books is also an array and we go ahead and open it up
 it's an array of two objects
 we open one of those objects and we see again the set of label value pairs where one of the values is a further nesting
 it's an array and we open that array and we see two objects and we open them and finally see the data at the lowest levels
 so again the browser here gives us a nice way to navigate the json data and see its structure
 so now we're back to our json editor
 by the way this editor eclipse does also have some features for opening and closing the structure of the data but it's not quite as nice as the browser that we use
 so we decided to use the browser instead
 what we are going to use the editor for is to make some changes to the json data and see which changes are legal and which aren't
 so let's take a look at the first change a very simple one
 what if we forgot a comma
 well when we try to save that file we get a little notice that we have an error we expected an n value so that's a pretty straightforward mistake let's put that comma back
 let's say insert an extra brace somewhere here for whatever reason
 we accidentally put in an extra brace
 again we see that that's marked as an error
 so an error that can be fairly common to make is to forget to put quotes around strings
 so for example this isbn number here if we don't quote it we're gonna get an error
 as we'll see the only things that can be unquoted are numbers and the values null true and false
 so let's put our quotes back there
 now actually even more common is to forget to put quotes around the labels in label value pairs
 but if we forget to quote that that's going to be an error as well
 you might have noticed by the way when we use the browser that the browser didn't even show us the quotes in the labels
 but you do when you make the raw json data you do need to include those quotes
 speaking of quotes what if we quoted our price here
 well that's actually not an error because now we've simply turned price into a string and string values are perfectly well allowed anywhere
 now we'll see when we use json's schema that we can make restrictions that don't allow strings in certain places but just for syntactic correctness of json data any of our values can be strings
 now as i mentioned there are a few values that are sort of reserved words in json
 for example true is a reserved word for a bullion value
 that means we don't need to quote it because it's actually its own special type of value
 and so is false
 and the third one is null so there's a built in concept of null
 now if we wanted to use nil for whatever reason instead of null well now we're going to get an error because nil is not a reserved word and if we really wanted nil then we would need to actually make it a quoted string
 now let's take a look inside our author list
 and i'm going to show you that arrays do not have to have the same type of value for every element in the array
 so here we have a homogeneous list of authors
 both of them are objects with a first name and a last name as separate label value pairs but if i change that first one the entire value to be instead of a composite one simply the string jefferey ullman
 oops sorry about my typing there and that is not an error it is allowed to have a string and then a composite object
 and we could even have an array and anything we want
 in an array when you have a list of values all you need is for each one to be syntactically a correct value in json
 now let's go visit our magazines for a moment here and let me show that empty objects are okay
 so a list of label value pairs comprising an object can be the empty list
 and so now i've turned this magazine into having no information about it but that is legal in json
 and similarly arrays are allowed to be of zero length
 so i can take these authors here and i can just take out all of the authors and make that an empty list but that's still valid json
 now what if i took this array out altogether
 in that case now we have an error because this is an object where we have label value pairs and every label value pair has to have both a label and a value
 so let's put our array back and we can have anything in there so let's just make it fu and that corrects the error
 what if we didn't want an array here instead and we tried to make it say an object
 well we're going to see an error there because an object as a reminder and this is an easy mistake to make
 objects are always label value pairs
 so if you want just a value that should be an array if you want an object then we're talking about a label value pair so we can just add fu as our value and then we're all set
 so what we've seen so far is syntactic correctness
 again there's no required uniformity across values in arrays or in the label value pairs in objects we just need to ensure that all of our values our basic values are of the right types and things like our commas and curly braces are all in place
 what we're gonna do next is look at json's schema where we have a mechanism for enforcing certain constraints beyond simple syntactic correctness
 if you've been very observant you might even have noticed that we have a second tab up here in our editor for a second json file and this file is going to be the schema for our bookstore data
 we're using json schema and json schema like xml schema is expressed in the data model itself
 so our schema description for this json data is itself json data and here it is
 and it's going to take a bit of time to explain
 now the first thing that you might notice is wow the schema looks more complicated and in fact longer than the data itself
 well that is true but that's mostly because our data file is tiny
 so if we had thousands you know tens of thousands of books and magazines our schema file wouldn't change but our data file would be much longer and that's the typical case in reality
 now this video is not a complete tutorial about json's schema
 there's many constructs in json's schema that weren't needed to describe the bookstore data for example
 and even this file here i'm not gonna go through every detail of it right here
 you can download the file and take a look read a little more about json schema
 i'm just going to give the flavor of the schema specification and then we're going to work with validating the data itself to see how the schema and data work together
 but to give you the flavor here let's go through at least some portions of the schema
 so in some sense the structure of the schema file reflects the structure of the data file that it's describing
 so the outermost constructs in the schema file are the outermost in the data file and as we nest it parallels the nesting
 let me just show a little bit here we'll probably look at most of it in the context of validation
 so we see here that our outermost construct in our data file is an object
 and that's told to us because we have type as one of our built in labels for the schema
 so we we have an object with two properties as we can see here the book's property and the magazine's property
 and i use the word labels frequently for label value pairs that's synonymous with property value pairs
 then inside the books property for example we see that the type of that is array so we've got a label value pair where the value is an array
 and then we follow the nesting and see that it's an array of objects
 and we go further down and we see the different label value pairs of the object that make up the books and nesting further into the authors and so on
 we see similarly for magazines that the value of the a label value pair for magazines is an array and that array consists of objects with further nesting
 so what we're looking at here is an online json schema validator
 we have two windows
 on the left we have our schema and on the right we have our data and this is exactly the same data file and schema file that we were looking at earlier
 if we hit the validate button hopefully everything should work and it does
 this tells us that the json data is valid with respect to the schema
 now this system will of course find basic syntactic errors so i can take away a comma just like i did before and when i validate i'll get a parsing error that really has nothing to do with the schema
 what i'm going to focus on now is actually validating semantic correctness of the json with respect back to the constructs that we've specified in this schema
 let me first put that comma back so we start with a valid file
 so the first thing i'll show is the ability to constrain basic types and then the ability to constrain the range of values of those basic types
 and let's focus on price
 so here we're talking about the price property inside books and we specify in our schema that the type of the price must be an integer
 so for example if our price were instead a string and we went ahead and try to validate that we would get an error
 let's make it back into an integer but let's make it into the integer now instead of
 and why am i doing that
 because the json schema also lets me constrain the range of values that are allowed if we have a numeric value
 so not only in price did i say that it's an integer but i also said that it has a minimum and maximum value the integer of prices must be between and
 so if i try to make the price of and i validate i'm again getting an error
 now it's not a type error but it's an error that my integer was outside of the allowed range
 i've put the price back to a hundred and now let's look at constraints on string values
 json schema actually has a little pattern matching language that can be used to constrain the allowable strings for a specific type of value
 we'll look at isbn number here as an example of that
 we've said that isbn is of type string and then we've further constrained in the schema that the string values for isbn must satisfy a certain pattern
 i'm not gonna go into the details of this pattern matching language
 i'm just gonna give an example
 and in fact this entire demo is really just an example lots of things in json's schema that we're not seeing
 what this pattern here says is that the string value for isbn must start with the four characters isbn and then can be followed by anything else
 so if we go over to our data and we look at the isbn number here and say we have a typo we forgot the i and we try to validate
 then we'll see that our data no longer matches our schema specification
 now let's look at some other constraints we can specify in json's schema
 we can constrain the number of elements in an array
 we can give a minimum or maximum or both
 and i've done that here in the context of the authors array
 remember the authors are an array that's a list of objects and here i've said that we have a minimum number of items of and a maximum number items of
 in other words every book has to have between one and ten authors
 so let's try for example taking out all of our authors here in our first book
 we actually looked at this before in terms of syntactic validity and it was perfectly valid to have an empty array
 but when we try to validate now we do get an error and the reason is that we said that we needed between one and ten array elements in the case of authors
 now let's fix that not by putting our authors back but let's say we actually decide we would like to be able to have books that have no authors
 so we can simply fix that by changing that minimum item to zero and that makes our data valid again and in fact we could actually take that minimum constraint out all together and if we do that our data is still going to be valid
 now let's see what happens when we add something to our data that isn't mentioned in the schema
 if you look carefully you'll see that everything that we have in the data so far has been specified in the schema
 let's say we come along and decide were gonna also have ratings for our books
 so let's add here a rating label property with the value
 we go ahead and validate you probaly think it's not going to validate properly but actually it did
 the definition of json schema that it can constrain things by describing them but you can also have components in the data that aren't present in this schema
 if we want to insist that every property that is present in the data is also described in this schema then we can actually add a constraint to the schema that tells us that
 specifically under the object here we can put in a special flag which itself is specified as a label called additional properties
 and this flag if we set it to false and remember false can is actually a keyword in json's schema tells us that in our data we're not allowed to have any properties beyond those that are specified in the schema
 so now we validate and we get an error because the property rating hasn't been defined in the schema
 if additional properties is missing or have the default value of true then the validation goes through
 now lets take a look at our authors that are still here
 let's suppose that we don't have a first name for our middle author here
 if we take that away and we try to validate we do get an error because we specified in our schema and it's right down here that author objects must have both a first name and a last name
 it turns out that we can specify for every property that the property is optional
 so we can add to the description of the first name not only that the type is a string but that that property is optional so we say optional true
 now let's validate and now we're in good shape
 now let's take a look at what happens when we have object that has more than one instance of the same label or same property
 so let's suppose for example in our magazine the magazine has two different years and
 this is syntactically valid json it meets the structure of having a list of label value pairs
 when we validate it we see that we can't add a second property year
 so this validator doesn't permit two copies of the same property and it's actually kind of a parsing thing and not so much related to json's schema
 many parsers actually do enforce that labels or properties need to be unique within objects even though technically syntactically correct json does allow multiple copies
 so that's just something to remember the typical use of objects is to have unique labels sometimes are even called keys of which evokes a concept of them unique
 so typically they are unique
 they don't have to be for syntactic validity
 usually when you wanna have repeated values it actually makes more sense to create an array
 i've taken away the second year in order to make the json valid again
 now let's take a look at months
 i've used months to illustrate the enumeration constraint so we saw that we could constrain the values of integers and we saw that we can constrain strings using a pattern but we can also constrain any type by enumerating the values that are allowed
 so for the month we've set it a string type which it is but we've further constrained it by saying that string must be either january or february
 so if we try to say put in the string march we validate and we get the obvious error here
 we can fix that by changing the month back but maybe it makes more sense that march would be part of our enumeration type so we'll add march to the possible values for months and now we're good
 as a next example let's take a look at something that we saw was syntactically correct but isn't going to be semantically correct which is when we have the author list be a mixture of objects and strings
 so let's put jeffrey ullman here just as a string
 we saw that that was still valid json but when we try to validate now we're gonna get an error because we expected to see an object we have specified that the authors are objects and instead we got a string
 now json schema does allow us to specify that we can have different types of data in the same context and i'm going to show that with a little bit of a simpler example here
 so let's first take away our author there so that we're back with a valid file
 and what i am going to look at is simply the year values
 so let suppose for whatever reason that in our magazines one of the years was a string and the other year was an integer
 so that's not gonna work out right now because we have specified clearly that the year must be an integer
 in json schema specifications when we want to allow multiple types for values that are used in the same context we actually make the type be an array
 so instead of just saying integer if we put an array here that has both integer and string that's telling us that our year value can be either an integer or a string and now when we validate we get a correct json file
 that concludes our demo of json schema validation
 again we've just seen one example with a number of the constructs that are available in json schema but it's not nearly exhaustive there are many others and i encourage you to read a bit more about it
 you can download this data and this schema as a starting point and start adding things playing around and i think you'll get a good feel for how json schema can be used to constrain the allowable data in a json file
