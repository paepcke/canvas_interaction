 in this sequence of videos we'll learn about designing good schemas for relational databases
 so let's suppose we're building a database for an application or set of applications and we have to figure out what schema we want to store our data
 usually there are many different possible schema designs for a database and databases do tend to get quite complicated
 and some designs are much better than others
 so how do we choose what design to use
 now the reality is that people often use higher level tools to design relational databases and don't design the schemas directly themselves
 but some designers do go straight to relations and furthermore it's useful to understand why the relations that are produced by design tools are what they are
 furthermore from an academic point of view it turns out there's a very nice theory for relational data base design
 so let's consider the process of designing the schema for our database about students applying to colleges
 specifically for a given student let's suppose we have their social security number and their name the colleges that student is applying to the high schools they attended and what city those high schools were in and the student's hobbies
 so if that's what we want we can create a single relation called apply that has one attribute for each of those pieces of information
 now let's take a look at how that database would be populated
 let's suppose that we have a student anne with social security number she went to different high schools in palo alto she plays tennis and the trumpet and she's applying to stanford berkeley and mit
 so let's look at some of the tuples that we would be having in the apply relation to represent this information about anne
 so we'll have anne her name she's applying to stanford she went to palo alto high school and that's in palo alto and one of her hobbies is tennis
 and then we also have and she applied to berkeley and went to palo alto high school in palo alto and tennis there as well
 of course she also has a tuple representing the fact that she's applying to berkeley and and we'll stick with palo alto high school and she played the trumpet
 and as you can see we'll have more tuples we'll have various stanford and berkeleys we'll have some for her other high schools called gunn high school also in palo alto and so on
 so if we think about it we will need a total of tuples to represent this information about ann
 now do we think that's a good design
 i'm going to argue no it's not a good design
 there are several types of anomalies in that design
 first of all we capture information multiple times in that design and i'll give some examples of that
 for example how many times do we capture the fact that the social security number is associated with a student named ann
 we capture that twelve times in our twelve tuples
 how many times do we capture that anne went to palo alto high school
 we're going to capture that six times
 and we're going to capture the fact that she plays tennis six times
 and we're going to capture the fact that she went to apply to mit four times so for each piece of information in fact we're capturing it many many times
 so that doesn't seem like a good feature of the design
 the second type is an update anomaly and that's really a direct effect of redundancy
 what update anomalies say is that you can update facts in some places but not all all or differently in different places
 so let's take the fact for example that ann plays the trumpet
 i might decide to call that the coronet instead but i can go ahead and i can modify say three of the incidences where we captured the fact about her playing the trumpet and not the fourth one and then we end up with what's effectively an inconsistent database
 and the third type of anomaly is called a deletion anomaly and there's a case where we could inadvertently completely do a complete deletion of somebody in the database
 let's say for example that we decide that surfing is an unacceptable hobby for our college applicants and we go ahead and we delete the tuples about surfing
 if we have students who have surfing as their only hobby then those students will be deleted completely
 now you may argue that's the right thing to do but probably that isn't what was intended
 so now let's take a look at a very different design for the same data
 here we have five different relations one with the information about students and their names one where they've applied to colleges one where they went to high school where their high schools are located and what hobbies the students has
 in this case we have no anomalies
 if we go back and look at the three different types they don't occur in this design
 we don't have redundant information we don't have the update anomaly or the deletion anomaly
 furthermore we can reconstruct all of the original data from our first design so we haven't lost any information by breaking it up this way
 so in fact this looks like a much better design
 now let me mention a couple of modifications to this design that might occur
 let's suppose for example that the high school name alone is not a key
 so when we break up the high school name and high school city we no longer can identify the high school
 in that case the preferred design would be to move the high school up here so we'll have that together with the high school name and then we don't need this relation here
 and actually that's a fine design
 it does not introduce any anomalies that's just based on the fact that we need the name of the high school together with the city to identify it
 as another example suppose a student doesn't want all of their hobbies revealed to all of the colleges that they are applying to
 for example maybe they don't want stanford to know about their surfing
 if that's the case then we can modify the design again and in that case we would put the hobby up here with where they're applying to college
 and so that would include the hobbies that they want to reveal to those particular colleges and we'll take away this one
 so it looked like we were taking our nice small relations and moving back to a design that had bigger relations
 but in this case it was very well motivated
 we needed these attributes together to identify the high school and we want it to have our hobbies specific to the colleges
 so what that shows is that the best design for an application for relational databases depend not only on constructing the relations well but also in what the data is representing in the real world
