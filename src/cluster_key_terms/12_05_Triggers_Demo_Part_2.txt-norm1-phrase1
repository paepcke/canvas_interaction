 if you made it through that long first part of the demo of triggers here we are in part two
 as a reminder our introduction video about triggers used the sql standard but no database system actually implements the standard and most systems deviate considerably
 postgres is the closest and is the most expressive with triggers
 however it has a kind of cumbersome syntax so we're not using it for our demos
 sqlite follows posts risks and is also quite expressive
 mysql is considerably less expressive
 mostly with some limitations it has and how triggers can interact so again we are using sqlite for our demo and just a few of the differences from the standard
 it has role level triggers only no statement level triggers and an immediate activation semantics
 for each row can be specified in triggers but if it's not there it's still a row level trigger
 it doesn't have old tables or new tables since it has immediate activation semantics only
 and it doesn't have a referencing clause the variables old and new are automatically bound in every trigger to what would be old row and new row if it had a referencing clause
 and finally the action part of sqlite triggers are sql statements embedded in begin and end blocks
 overall here's the long list of features that are covered in our two part demo
 we covered the first five features in part one so in part two we'll be talking about self triggering triggers we'll be talking about triggers that have cyclic behavior conflicts that means when we have multiple triggers triggered at the same time and finally nested trigger invocations when the action part of a trigger triggers additional triggers
 and finally we'll also add to the a demo a demonstration of sqlite row level immediate activation
 and again that doesn't follow the standard
 its a bit subtle but let me review it
 in the sql standard all triggers are activated at the end of the commands even if they modify multiple rows
 whereas in sqlite and also in mysql triggers are activated immediately after each row level modification
 the tables that we use for this demo are very simple because we want to focus specifically on trigger behavior so we'll just be using four tables each with a single attribute
 let's go to the demo
 our first trigger is a simple one that demonstrates triggers triggering themselves
 it's activated when we have an insertion on t
 it has no condition and after that insertion it inserts an additional row into t that contains the value that was inserted plus one
 so let's go ahead and insert a row and see what happened
 the first tuple in t the one is the tuple that we inserted with our command
 the second tuple the two was inserted automatically by the trigger
 however we expected additional trigger activations to insert additional tuples
 it turns out that sqlite as a default doesn't allow a trigger to be activated more than once in a trigger processing session presumably to prevent infinite behavior
 but if we'd like we can toggle a variable in the sqlite session called recursive triggers
 if we turn recursive triggers on then that checking is turned off and triggers can be activated arbitrarily many times during a trigger processing session
 now with recursive triggers on this trigger would in fact activate itself indefinitely inserting more and more tuples into t
 actually what would happen is eventually an error
 is generated
 but we can modify the trigger in order to put in a limit
 specifically we'll add a condition to the trigger that says we'll only perform the action when the number of tuples in t is less than ten
 so what we expect now is when we start by inserting a tuple we'll insert one two three four five and so on but when the size reaches ten the condition will not be satisfied
 the action won't be executed and trigger processing stops
 i deleted the two tuples from t so now let's once again start by inserting a single tuple with a value one and let's see what happened
 we take a look at table t we refresh and we see that indeed ten tuples were inserted the first one we inserted all the rest by self triggering of our single trigger and when it got to the size of ten triggering terminated because the condition part of the trigger was not satisfied
 now let's generalize the idea to three triggers that trigger each other in a cycle
 the first trigger is going to be activated by inserts on t and when there is an insert on t it will insert into table t the same tuple except incremented by one
 that will activate trigger r which is triggered by insertions on t
 when t is when r is activated it will likewise insert into table t
 again the value that was inserted into t incremented by then trigger t will be activated by those insertions onto t and it will go back and insert back into table t again incrementing value
 so let's start as usual by inserting into the first table the value one and let's see what happened
 now let me mention that before i started this example i turned the recursive triggers flag off
 so here is our original tuple
 that activated a trigger and it inserted two into table t
 we can go ahead and see that
 that in turn activated a trigger that inserted a three into table t and then we go back to table t and the four was inserted
 but because sqlite has as a default the limitation that each trigger is activated only once in a trigger processing session at that point trigger processing terminated
 now we're going to do the same thing that we did last time
 we're going to turn recursive triggers on again using this command for our sqlite session and then we're going to modify our triggers to put in a termination condition
 so we only need to put the termination condition in one trigger and we'll put it in the third trigger and this time we'll allow it go a little farther so the third trigger will add a condition that when the size of the first table t is less than then the trigger will go ahead and execute its action but when the size of t exceeds then it won't and that will break the cycle and trigger processing will terminate
 as always lets start things off by inserting the tuple into table t
 so when we look at table t we see our original insertion
 this inserted a into table t which then caused a to be inserted in table t and then back to a four being inserted into table t
 and that triggered a five being inserted into t and so on
 so we can see the trigger behavior
 now we did put in a limitation so when we go look at the size of t we'll see that it got to exactly and then when the size of t exceeded the third trigger's condition was not satisfied and that caused the action not to be executed which brought everything to a halt
 okay that's enough of cycles
 now let's take a look at a situation where
 we have two triggers activated at exactly the same time and they perform updates to exactly the same portion of the database
 both of our triggers are activated by insertions into table t
 and we're gonna again start trigger processing by inserting one tuple with the value
 the first trigger has no condition
 it updates the contents of t to set all the values to
 the second trigger checks to see if there exists a in table t and if so it sets the values to
 so these two triggers are designed specifically so we can see which one goes first
 if trigger r goes first it will set the value to
 the condition part of our will be true and it will then in turn then set the value to
 however if trigger r goes first it will not find a in table t so it's actually will not be executed and will then our trigger r will go next and we will set the value to
 okay so let's go ahead and do our insertion with these two triggers defined and see what happens
 we insert the value we take a look at t and we discover that we have the value of
 so what does that tell us
 that actually tells us that trigger r went first
 we performed our insertion
 it looked to see if there was a two in the table
 there wasn't because there was just a one
 it didn't execute its action
 then trigger r went and it modified the value to be two
 so that's interesting the second trigger went first
 so as an experiment let's try reversing the order in which the triggers are defined
 we'll create trigger r first and r second
 i've deleted the tuple that was in t so once again we'll insert a t to get things started we go take a look and now we see indeed that we have the value three
 going back to look at our triggers a value three means that trigger r went first it set the value to two that made trigger r 's condition true and then it set the value to three
 so interestingly in sqlite when you have triggers that are activated at the same time it appears that the trigger that was created second is the one that is going to go first
 now let's experiment with nested invocation of triggers
 to make things exciting this time i'm going start by inserting a zero into table t instead of a one
 and we're gonna be using all four of our tables t through t with three triggers
 the first trigger is going to be activated by the insertion into t
 and it will simply insert a tuple into table t and a tuple into table t
 what we're going to see and what we're specifically experimenting with is that the first insertion will in fact activate triggers before the second insertion is performed
 the first insertion into t will activate our second trigger inserts on t and this trigger will in turn insert into tables t and t and it will insert the values too
 so this will occur in a somewhat nested fashion and in fact in this action we'll see the first command will be executed and it will in a nested fashion activate our trigger r which will insert simply into table t the value three
 so let's get started and again as i mentioned for excitement we'll be inserting a zero this time and let's go see what happened to our tables
 so table t has just the zero that we inserted as expected
 table t has just a single tuple with the value one which is exactly what we expected this trigger is only activated once
 now let's take a look at table t
 table t has a and a and they're in that order and what that tells us is that this insertion here activated by trigger r happened before this insertion here from trigger r and that this is what demonstrates the nested invocation of the triggers and just to look at the last table we will see something similar in t
 we again can see nested invocation because the two occurs after the first insertion of three and then we have the final insertion of three
 so this is a bit complicated
 you might want to look at the video again or or even better yet download the triggers and try them yourself
 our last example is designed specifically to demonstrate the immediate activation of the low level triggers implemented in sqlite specifically i've populated table t already with four tuples with the value one and what my trigger is going to do when i insert additional values into t is this insert into table t the average value in t
 what i'm going to do is insert a batch of tuples into t in fact i'm going to insert four tuples with a value of two
 so when i'm done i'll have four s and four s in table t
 if triggers followed the sql semantics of being activated the very end of the entire statement
 so the entire batch of inserts then the average values that we insert into t would reflect the average of the four s and the four s so it would be the value
 however what sqlite does is activates the trigger after each tuple level insertion
 so as we insert the s one at a time an average will be inserted into table t two and the first average will reflect have one in table t the second will reflect having two s in table t and so on
 i think you'll get the idea when i show what happens
 so here is the command i'm going to use to insert the four s into table t
 i'm going to insert into t the result of this subquery which takes every value and adds
 so let's go ahead and do it
 and let's take a look at table t
 and we see now that indeed we have the four ones and the four twos
 so the real story is told when we look at table t
 and here we see indeed that we do not get four averages that are which is what we would have gotten with the sql standard semantics
 instead we saw that for each two that was inserted we inserted the average into table t reflecting the number of twos that were in the table so far
 again fairly complicated you might want to watch this example a second time or download it and try it at home
 so that concludes our rather long coverage of triggers
 we've seen that it can actually be quite complicated when triggers interact with updates on the database when they perform updates and especially when they interact with each other
 now the reality is that a lot of times that triggers are used in applications is for very simple purposes
 we might have a couple of triggers that are enforcing simple constraints
 they don't interact with each other and they don't interact with the database in complicated ways
 and i've shown a few of those triggers early on
 however i did want to make a point that when triggers are used for more complicated purposes when they interact with each other and with the database in complicated ways it is important to be very careful to fully understand how they behave
