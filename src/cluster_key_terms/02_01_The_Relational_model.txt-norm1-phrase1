 in this video we'll learn about the relational model
 the relational model is more than years old and it's really the foundation of database management systems
 it's spawned a many billion dollar industry
 the relational model underlies all commercial database systems at this point in time
 it's actually an extremely simple model and that's one of its benefits
 furthermore it can be queried
 by that i mean we can ask questions of databases in the model using high level languages
 high level languages are simple yet extremely expressive for asking questions over the database
 and finally very importantly there are extremely efficient implementations of the relational model and of the query languages on that model
 so let's move ahead and understand the basic constructs in the relational model
 so the primary construct is in fact the relation
 a database consists of a set of relations or sometimes referred to as tables each of which has a name
 so we're gonna use two relations in our example
 our example is gonna be a fictitious database about students applying to colleges
 for now we're just gonna look at the students and colleges themselves
 so we're gonna have two tables and let's call those tables the student table and the college table
 now as an aside there's a healthy debate in the database world about whether tables relations ought to be named using the singular or the plural
 i personally don't have a stake in that debate
 i'm going to use the singular
 next we have the concept of attributes
 so every relation and relational database has a predefined set of columns or attributes each of which has a name
 so for our student table let's say that each student is gonna have an id a name a gpa and a photo
 and for our college table let's say that every college is going to have a name a state and an enrollment
 we'll just abbreviate that enr
 so those are the labeled columns
 now the actual data itself is stored in what are called the tuples or the rows in the tables
 so let's put a couple of the data tables data tuples in our tables
 so let's start with the students and lets say that our first student has id
 name is amy gpa and she's happy with that
 so she has a smiley photo
 and our second student is bob his gpa is
 he's not quite as happy
 and typically of course a table will have thousands maybe millions even sometimes billions of rows each row containing a value for each attribute
 in our college table let's suppose we have well of course we're going to start with stanford in the state of california and stanford's enrollment is
 we'll include our cross bay rival berkeley again in the state of california
 berkeley's enrollment is a whopping
 and last of all we are going to not be west coast biased
 we'll include mit in the state of massachusetts with an enrollment of
 now of course there's gonna be again many more tuples in the college table and many more tuples in the student table
 okay next let me mention that in a relational database typically each attribute or column has a type sometimes referred to as a domain
 for example the id might be an integer the name might be a string gpa might be a float photo might be a jpeg file
 we do also in most relational databases have a concept of enumerated domain
 so for example the state might be an enumerated domain for the abbreviations for states
 now it's typical for relational databases to have just atomic types in their attributes as we have here but many database systems do also support structured types inside attributes
 okay a little bit more terminology
 the schema of a database is the structure of the relation
 so the schema includes the name of the relation and the attributes of the relation and the types of those attributes
 where the instance is the actual contents of the table at a given point in time
 so typically you set up a schema in advance then the instances of the data will change over time
 now i mentioned that most columns have types
 but there's also a special value that's in any type of any column and that's a special value known as null and nulls are actually quite important in relational databases
 null values are used to denote that a particular value is maybe unknown or undefined
 and so let's suppose let's add another tuple to our database
 let's say another student named craig and for whatever reason craig doesn't have a gpa
 maybe craig is home schooled maybe craig doesn't want to reveal his gpa
 so then the database would contain a null value for craig and we'll just put a neutral face there
 or for example maybe bob doesn't want to have his photo in the database so then bob would have a null value for his photo again nulls can go anywhere
 now null values are useful but one has to be very careful in a database system when you run queries over relations that have null values
 in a later video we'll go into this in more detail but i just wanted to give a just sort of example of what can happen
 so let's suppose we're asking a query over our student table of all students whose gpa is greater than
 so when we run that query on our database obviously we'll get amy out obviously we won't get bob out but should we get craig
 the answer is no
 we don't know for a fact that craig's gpa is greater than so we'll only get one student out from that query
 now let's suppose we had another query where we were gonna ask for the gpa less than or equal to
 so similarly where we would not have amy in result and we would certainly have bob in the result and similarly would not have craig in the result because we don't know that his gpa is less than or equal to
 so far so good but it gets a little weird is when we add an or here in our query we say i want everyone who's gpa is greater than or who's gpa is less than or equal to
 and even though it looks like every tuple should satisfy this condition that it's always true that's not the case when we have null values
 so that's why one has to be careful when one uses null values in relational databases
 let me erase this now and let's move on to our next concept which is the concept of key
 key is again another important concept in relational databases
 and a key is an attribute in of a relation where every value for that attribute is unique
 so if we look at the student relation we can feel pretty confident that the id is going to be a key
 in other words every tuple is going to have a unique for id
 thinking about the college relation it's a little less clear
 we might be tempted to say that the name of the college is an id that actually college names probably are not unique across the country
 there's probably a lot of or several colleges named washington college for example
 you know what we're allowed to have sets of attributes that are unique and that makes sense in the college relation
 most likely the combination of the name and state of a college is unique and that's what we would identify as the key for the college relation
 now you might wonder why it's even important to have attributes that are identified as keys
 there's actually several uses for them
 one of them is just to identify specific tuples
 so if you want to run a query to get a specific tuple out of the database you would do that by asking for that tuple by its key
 and related to that database systems for efficiency tend to build special index structures or store the database in a particular way
 so it's very fast to find a tuple based on its key
 and lastly if one relation in a relational database wants to refer to tuples of another there 's no concept of pointer in relational databases
 therefore the first relation will typically refer to a tuple in the second relation by its unique key
 as our videos develop we'll see the importance of keys
 okay just to wrap up i'll mention how one creates relations or tables in the sql language
 it's very simple you just say create table give the name of the relation and a list of the attributes
 and if you want to give types for the attributes
 it's similar except you follow each attribute name with its type
 so to wrap up the relational model has been around a long time
 has started a huge industry
 it's used by all database systems
 as you've seen it's a very simple model and will shortly see that it can be queried with very nice languages
 and finally it's been implemented very efficiently
