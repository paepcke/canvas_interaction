 now let's talk about duplicate values in the results of relational algebra queries
 let's suppose we ask for a list of the majors that people have applied for and the decision for those majors
 so we write that as the project of the major and the decision on the applied relation
 you might think that when we get the results of this query we're going to have a lot of duplicate values
 so we'll have cs yes cs yes cs no ee yes ee no and so on
 you can imagine in a large realistic database of applications there's going to be hundreds of people applying for majors and having a yes or a no decision
 the semantics of relational algebra says that duplicates are always eliminated
 so if you run a query that would logically have a lot of duplicate values you just get one value for each result
 that's actually a bit of a difference with the sql language
 so sql is based on what's known as multi sets or bags and that means that we don't eliminate duplicates whereas relational algebra is based on sets themselves and duplicates are eliminated
 there is a multi set or bad relational algebra defined as well but we'll be fine by just considering the set relational algebra in these videos
 our first operator that combines two relations is the cross product operator also known as the cartesian product
 what this operator does is it takes two relations and kinda glues them together so that their schema of the result is the union of the schemas of the two relations and the contents of the result are every combination of tuples from those relations
 this is in fact the normal set cross product that you might have learned way back in the elementary school
 so let's talk about say doing the cross products of students and apply
 so if we do this cross products just to save drawing i'm just gonna glue these two relations together here
 so if we do the cross product we'll get at the result a big relation here which is going to have eight attributes
 the eight attributes across the student and apply now the only small little trick is that when we glue two relations together sometimes they'll have the same attribute and we can see we have sid on both sides
 so just as a notational convention when cross product is done and there's two attributes that are named they're prefaced with the name of the relation they came from
 so this one would be referred to in the cross product as the student dot sid where this one over here would be referred to as the apply dot sid
 so again we glue together in the cartesian product the two relations with four attributes each we get a result with eight attributes
 now let's talk about the contents of these
 so let's suppose that the student relation had s tuples in it and that's how many tuples while the apply had tuples in it the result of the cartesian products is gonna have s times a tuples is going to have one tuple for every combination of tuples from the student relation and the apply relation
 now the cross product seems like it might not be that helpful but what is interesting is when we use the cross product together with other operators
 and let's see a big example of that
 let's suppose that we want to get the names and gpas of students with a high school size greater than a thousand who applied to cs and were rejected
 okay so let's take a look
 we're going to have to access the students and the apply records in order to run this query
 so what we'll do is we'll take student cross apply as our starting point
 so now we have a big relation that contains eight attributes and all of those tuples that we described previously
 but now we're going to start making things more interesting because what we're going to do is a big selection over this relation
 and that selection is first of all going to make sure that it only combines student and apply tuples that are referring to the same student
 so to do that we write student dot sid equals apply dot sid
 so now we've filtered the result of that cross product to only include combinations of student and apply by couples that make sets
 now we have to do a little bit of additional filtering
 we said that we want the high school size to be greater than a thousand so we do an and operator in the high school
 we want them to have applied to cs so that's and major equals cs
 we're getting a nice big query here
 and finally we want them to have been rejected so and decision equals we'll just be using r for reject
 so now we've got that gigantic query
 but that gets us exactly what we want except for one more thing which is as i said all we want is their names and gpas
 so finally we take a big parentheses around here and we apply to that the projection operator getting the student name and the gpa
 and that is the relational algebra expression that produces the query that we have written in english
