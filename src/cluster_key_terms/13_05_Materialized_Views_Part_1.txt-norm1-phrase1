 this video covers the topic of materialized views
 as a reminder the reason that we use views in database systems is to hide data from users to make some queries easier or more natural to express
 and to modularize our access to the database
 and real applications do tend to use lots and lots and lots of views
 so those views are for virtual views
 virtual views are what we've been talking about in our previous videos i'm not actually sure i used that terminology
 a virtual view is the usual type of view where we define it as a query of the database
 we don't actually create a table for the view
 queries and modifications are rewritten based on the view definition
 now there's also a notion of a materialized view obviously for this video and materialized views give us the same advantages of virtual views but one additional advantage which is perhaps the most important one which is to improve query performance over the database
 so again as a quick reminder about virtual views we define a view v say by giving a query to specify the view over some relations or even other views
 the schema of the view is the schema of the result of the query
 when we have a query queue so this is a user query that references the view v then conceptually not actually we can imagine that there is a table called v we run the view query over the current state of the relations
 we put the result in v and then we can evaluate the user query queue which refers to v now in reality what happens as we already mentioned is that the user query queue is rewritten based on the view definition to just use the base tables
 now let's talk about what happens to materialized views
 again exactly the same we define a view
 we give it a name say v and we define it as a query over a set of table or other views then the system actually creates a physical table v with the schema of the query result
 next the view query is executed over the current state of the database and the results are put physically in that table v now queries can refer to v as if its a table table because it actually is a table stored in a database
 this all sounds great of course there are some down sides
 the first down side is that v could be very large
 when we talked about virtual views
 we showed some examples where we could create a view that was just enormous much larger than could ever be stored in the database but because the view was only a logical concept it wasn't a problem
 when users ran queries over the view they'd typically have selection conditions so you'd never be materializing that very large view
 in materialized views obviously you're creating the view and so it is a problem if the view is extremely large
 so that's one of the downsides
 the other downside is that we need to worry if the view is stored
 what happens when we have modifications to those tables over which v is defined
 we need to actually modify the stored table v either makes changes to it based on the changes to the base tables or completely recompute the view
 let's move now to an example
 and we'll use our usual sample database shown here at the bottom of the slide
 let's create a materialized view
 we'll give it the name cacs
 it's for cs applicants to california colleges so this is a three way join over all of our relations and it's going to select the college name and student name when the student has applied to the college the college is in california and the student is applying to major in cs
 so once this command is issued the system will actually create a table called cacs and now the good news we can cacs in any query we want as if it's a table because it is
 now the down side is that the base data over which the view is defined is modified we have to worry that our view is invalid that it's become out of sync with with the base data
 so let's think about what modifications could occur to the database that would cause the view to become invalid
 well we have to worry about the three relations that are referenced in the view that is the college relation the student relation and the apply relation and for the college relation well inserts could change the results of the view
 we could have a new college
 it seems unlikely we could have a new college that the student will have already applied to in california for c s
 certainly deletes can affect the view and then updates to any of the attributes that are mentioned in the view and for the college that would be the college name and the state
 for the student table again inserts to student could affect the view if we already have an applied tuple and a college tuple that it matches
 deletes would certainly affect the view and again updates and in this case the attributes that are referenced from the student table are the student name and the student id
 and finally apply again that is the most likely one that would have modification that would affect the view inserts deletes and again updates and here the set of attributes that are relevant are the the college name the student id and the major
 now if there is certain constraints on the database referential integrity constraints for example it might be that some of these operations couldn't affect the view
 for example we might not be able to insert a college where there's already an application for that college or insert a student likewise
 we might not be able to delete a college if there's applications referencing it
 so if there are additional constraints that the system is aware of it might be able to eliminate some of these modifications
 but regardless many modifications will have to be monitored to make sure that the view is modified to stay in sync with the base data
 by the way if this feels a little bit familiar to you when we talked about general assertions over the database that was one of the types of constraints that we could specify
 we went through a similar exercise where if assertions were defined as clearly as over the database and we looked at what operations could occur what modifications to the database needed to be monitored to see if an assertion might be invalidated
 really an assertion can almost be thought of as a materialized view over the database
 and if you look back at that video i think you'll see there really is a correspondence between those two concepts
