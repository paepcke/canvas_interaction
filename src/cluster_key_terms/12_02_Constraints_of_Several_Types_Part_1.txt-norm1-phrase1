 in this video we'll be giving a demo of constraint of several types as a reminder constraints also known as integrity constraints impose restrictions on the allowable states of a database beyond those that are imposed by the schema that's been defined and the types of the attributes
 we have a number of different types of constraints we have non null constraints which specified that a particular attribute cannot have no values we have key constraints that talk about uniqueness in columns or sets of columns we have attribute base and tuple base constraints which specify a restrictions on the values and attributes or the values across attributes in particular tuples and finally we have general insertions which are quite powerful they allow you to specify constraints across an entire database
 as we'll see in the demo not all of these constraint types are fully implemented
 there are some limits on the attribute base and tuple base constraints in systems as compared to the sql standard and general assertions have not been implemented yet in any database system but we will give examples what they look like had they been implemented
 a very important type of constraint is referential_integrity or foreign key constraints and those will be covered in the next video
 for a demonstration of constraints we'll be returning to the same simple college admissions database that we use for our sql demos we have three tables one with a few colleges one with a number of students and finally a table that has information about students applying to colleges
 let's start by creating a table with a non null constraint
 so non null is a pretty simple type of constraint
 if we decide that our gpa values in our database must not take on the null value when we create the table we just add the key words not null in the declaration with that attribute
 let's run the creation of the table let me mention right up front we're going to be seeing a lot of this word affected this misspelling here which gets on my nerve but i'm not going to mention it again
 okay so let's do some insertions and updates just to experiment with a not null constraint
 we'll start by asserting three tuples the first one has no null values at all the second one has a null value for the high_school size which should be allowed and the third one has a null value for the gpa which should not be allowed
 let's run these three insert commands together and we see in fact the first two succeeded where the third one generated an error
 if we go and look_at the table we'll see that indeed we got our first two tuples including the null for the high_school size but there was no third tuple inserted
 now we'll try a couple of update commands
 both of them are going to set the gpa to null the first one for the student with id and the second for the student with id
 if we look_at our data we see that we do have a student with id so when we try to update that gpa to null we should get an error
 but we don't have a student whose id is so even though we're going to run a command that tries to set gpas to null because there's no matching data no data will attempt to be updated and we won't get an error
 let's run the query the two updates and we see indeed that the first one caused the constraint violation and the second one did not
 now let's take a look_at key constraints
 i've dropped the previous version of the student table and now we will create a new one where we're declaring the student id to be what's called a primary key
 as you may remember a key constraint specifies that the values in the column that's declared as a key must be unique
 so let's go ahead and create the table and now let's experiment with inserting and updating some data
 we'll attempt to insert three students first one amy second bob and third one craig
 since the third insert will generate a key violation because there will be two copies of in the id column that one should generate an error
 we run the queries the inserts and indeed the first two are fine and the third one has a key error
 if we go and look_at the data itself we'll see that the first two are inserted and the third one wasn't
 now let's take a look_at updates
 the first update is very simple
 it tries to set bob's id to
 since amy already has id three that should generate and error and when we run the update command indeed it does
 now we're going to do something a little bit trickier
 we're gonna run an update command that subtracts from each student id now you might wonder why did i choose let's take a look if we subtract from bob's id two three four will turn into one two three and will have a key violation on the other hand if the command first updates amy's student id to then we won't have a key violation when bob's in turned into two three into one two three
 so whether we get a key violation in this case could depend on what order the system chooses to execute the update
 so let's just run it and let's see what happens
 well things look good
 we didn't get an error
 let's go look back and refresh the table and we see indeed that both of the update succeeded without a violation so now let's set the as the student id back to what they were by adding let's run it see what happens well this time we got an error
 so we got a constraint violation error a key violation and nothing was updated
 that's presumably because the system again updated amy's id first and that generated an error with the one two three for amy
 so this sort of demonstrates it one it can be pretty tricky when key violations or other types of constraint violations are detected and when they aren't now we did mention earlier that there's a notion of for constraint checking so if an application have knowledge that it would rather have constraints checked after a bunch of changes rather than in the middle the for constraint checking can be use for that purpose and this demo we're doing immediate constraint checking
 you might have noticed in the previous example that i use the term primary key when i declared the student id as a key
 in the sql standard and in every database system only one primary key is allowed per table that's why it's called primary and often the table will be organized based on that key making it efficient to do look ups on that for values for that particular key
 so if we decided we wanted to declare two primary keys in our table the student id and the student name we would get an error now that's not to say we're not allow to have multiple keys in a table in fact we can have as many as we want only one of them can be declared as primary but we can declare any number of attributes or sets of attributes to be unique and that's again declaring a key constraint it says we can only have one we must have unique values in that column so let's create our table with the student name now also a key along with the student id and we'll do a few updates just to check that
 so we'll attempt to insert five students amy bob so far so good
 when we try amy we should get an error because we have now declared that the name must be a key as well as the student id so we won't be allowed to have amy
 door should be good
 amy should again generate an error we ran the query and indeed we get two errors
 so far we seen only keys that are one attribute but as you know we can have keys that spans several attributes that's not to say that each attribute is the key individually but rather the combination of values for all of the attributes must be unique in each tuple
 so let's suppose that our college name is not unique on its own but college name and state together are expected to be unique now syntactically we can't put the primary key statement with the attribute anymore because it involves multiple attributes so the syntax is to list the attributes first in the create table command then use the keywords primary key and put the list of attributes constituting the key in parentheses
 so let's create the table
 now let's insert some data
 i've tried to pick a college name that's kind of generic mason i don't know if i've succeeded but we'll try to answer the mason college in california a mason college in new york those should succeed because the two columns together need to be unique but not the individual column and then we should get an error when we try to generate a third tuple with mason california
 we run the query we run the inserts and indeed we do
 now lets use multi attribute keys to declare some interesting constraints
 we're going to create our apply table and we're going to have two key constraints
 the first one says that the combination of student id and college name must be unique in each tuple
 what that's really saying is that each student can apply to each college only one time
 we're also going to say that the combination of student id and major must be unique in each tuple
 that means that each student can apply to each major only once
 now a student can still apply to several colleges and several majors but only one time for each
 so let's create the table and then let's try inserting some data
 we'll insert quite a number of tuples and lets take a look_at what we expect to happen
 our first tuple says applies to stanford and cs and then also applies to berkeley and ee no problem
 tries to apply again to stanford and that should be an error because that's the second instance of the combination of stanford
 on the other hand should be able to apply to stanford
 comes back and wants to go to mit but tries once again to major in ee
 that should generate an error because the combination of and ee already appears in our second tuple
 and finally applies to mit but in biology and that should work just fine
 so we'll run the query and we'll find indeed the first two tuples and the fourth and the sixth were fine but the third tuple generated an error because of the second application to stanford and the fifth because of the second application to ee
 let's go take a look_at the data
 and here we see in the apply relation that we did indeed insert the four tuples but not the two tuples that generated the key error
 now we'll try a sneaky update command
 we'll try to take our fourth tuple and we'll identify it by having the college name equal to mit and we'll try to be sneaky and change the the biology major to cs
 that will then violate the constraint of the uniqueness of cs so if all goes well that update will be disallow here is the update command setting the major to cs with the college name is mit rerun the command and indeed it generates an error
 the last thing we'll show in this example is how null values work with keys so we'll try to insert two tuples again using where both the college name and the major are null
 so as a reminder the first and second attributes need to be unique in the first and third attributes need to be unique so if nulls counts for keys so it will generate an error what we'll see is that we actually don't get an error and we in fact do have the data in the table with the null values so the sql standard and most database systems do allow repeated null values even in column that are declared as unique for primary key declared columns most systems though not all do not permit repeated null values in them
 that completes our demonstration of key constraints now let's look_at attribute base check constraints
 lets create our table again with four students and this time we'll add two constraints to two of the attributes
 for the gpa we're going to add the keyword check and a condition that looks kinda like the where clause in the sql query
 this condition specifies that gpas must be less than or equal to and greater than zero
 we'll also put a check constraint on the high_school size saying that the size of the high_school must be less than five thousand
 so these are examples of sort of sanity checks that are mostly use for catching data entry errors saying that the attribute values must be within the expected range
 lets create the table and now we'll take a look_at some data
 this time we'll insert two tuples
 it will be pretty easy to see how these constraints work
 the first one inserts amy with a reasonable gpa and a reasonable high_school size the second one inserts bob with a reasonable high_school size but his gpa looks a little out of whack
 we run the query and the first row is inserted but the second one isn't
 we take a look_at the data and we see that amy has been inserted
 now to test the constraints on the size of high_school we'll try to run an update command that multiplies all high_school sizes by six
 here's the command and when we run it we get an error
 so attribute based constraints allow us to associate a condition with a specific attribute and that condition is checked whenever we insert a tuple or update a tuple to make sure that all of the values in that attribute satisfy the constraint
 a slightly more general notion is tuple based constraints
 tuple based constraints are also checked when ever a tuple is inserted or updated but they're allowed to talk about relationships between different values in each tuple
 and because we don't associate them with a specific attribute the check itself is put at the end of the declaration of of the table
 so we start by declaring all of the attributes and then afterwards we put the keyword check again and then the condition inside parentheses
 now this condition may look_at first a little bit odd to you
 it says that for each apply tuple either the decision is null or the college name is not stanford or the major is not cs
 why don't you think about that for a second and think about what it might be saying
 now if you're good in boolean logic you might have written this down using logical expressions and use some of de morgan's laws and turned your or's and not's into implications
 if not i'll just tell you that what this is saying is that there are no people who have applied to stanford and been admitted to cs at stanford
 specifically either they haven't been admitted or the college is not stanford or the major is not cs
 we'll create the table and then we'll experiment with some data
 first we'll try to insert three tuples
 the first one has a student applying to stanford cs but not being admitted second they apply to cs but it says mit and they are admitted and then finally will generate a constraint violation by having the student apply to stanford cs and be admitted
 we run the query and as expected the first two tuples are inserted and the third generates a violation
 now let's try some update statements
 so we have a student who applied to stanford cs and was not admitted
 and with a student who applied to mitcs and was admitted
 so first we'll try to take that standford student and change the decision to yes that's not going to work
 so then we'll try taking the students admission to mit and converting that to be an admission to stanford and that shouldn't work either
 we try all of those and neither of them succeed and both cases are tuple based constraintless check and the check condition was violated
 before i do my last set of examples i did want to explain one thing in case you're trying these constraints at home
 the constraints that i've shown so far were perfectly well in sqlite and in post risks
 in my sql as of the time of this video the check constraints both the attribute based and tuple based check constraints are accepted syntactically sp
 by the mysql system but they're not enforced
 so it can be a bit deceptive because you may create the tables exactly as i've done in my sql but then you will be allowed to insert enough data and violate the constraints
 so again i recommend for trying check constraints for now sqlite or postgres
 if you've been a shrewd observer of what we've done so far it might have occurred to you that we had some redundancy
 specifically the attribute base check constraints that we' ve showed can be used to enforce some other types of constraints
 very specifically if we want to have a not null constraint we can just write not null
 that's a built in type of constraint
 but that's equivalent to adding an attribute based check constraint that for the gpa for example checks that the gpa is not null
 as a reminder is not null is a key word in the sql language
 let's create this table and let's try to insert a tuple with a null value
 we have student amy again with a null gpa and that generates an error
 a little more challenging and interesting is to try to implement key constraints using attribute based check constraints
 so here's an attempt at doing so
 let's just consider a very simple table
 we'll call it t and it will have one attribute a
 and we'll try to write a check constraint that specifies that a is a key for t so here is my attempt at doing so
 i declare the attribute and then in at my check i say that the value of a is not in select a from t in other words the value of that or say attempting to insert or update is unique in table t well first i'm gonna tell you that i'm not allowed to execute that there's various reasons that i can't execute it
 one simple one is that i'm trying to declare a table t and refer to it before it has been declared
 another issue with declaring it is the sub query in the check constraint we'll talk about that in a moment
 there's actually a third problem with this constraint which is we need to think about when it's being checked
 if we say first attempt to insert the value a and then check the constraint then the constraint will be violated based on the existence of itself
 so this is clearly not going to work
 there is in fact a different expression that might work if it weren't for a couple of other obstacles
 here's an expression that doesn't have the problem of whether we check it before or after we insert a
 this is an expression of a key constraint in a way you might not have thought of
 what this says is that the number of distinct values for an attribute a must be equal to the number of tuples in the table
 in other words every tuple has a distinct value for a
 now there was one small issue here which is null values because as we mentioned unique key constraints allow multiple instances of null
 but if we don't worry about nulls then this is expression really is a different way of saying that a is a key
 we run the query and it doesn't allow it
 again we have the same problem that we're referring to table t within the check constraint that we're putting in the definition of table t by the way that can be overcome
 some systems do allow constraints to be declared or added to tables after the table has been specified
 so that would go away
 but no systems that i know of allow sub queries and especially not aggregation within check constraints
 let's pursue a little further the question of subqueries and check constraints
 the key example's a little bit contrived because of course we can declare key constraints directly
 but in some cases are very natural constraint that we might want to express a check constraint using sub query
 and i've set up a situation right here
 we create our student table as usual but when we create our apply table we want to have a constraint that says that any student id that appears in the apply table is a valid student
 in other words there is a student coupled with that student id
 now we can write that as a check constraint
 this is syntactically valid in the sql standard
 we specify that the student id here in the apply table is in the set of student ids in the student table but currently no sql system actually supports sub queries and check constraints
 now for this the civic type of constraint it happens to fall into a class that is known as referential_integrity where we say that this student id is referencing a student in the other is referencing the student id in the student table and therefore any student id and apply must also exist in the student and in another video we will referential_integrity in some detail
 but not every check constraint with a subquery falls in the class of referential_integrity constraints
 the example i gave for keys doesn't and neither does the one here
 now this is admittedly a little contrived
 but what this says is that every college's enrollment must be bigger than any high_school and so we write that by writing the check constraint in the college table that the enrollment is greater than the maximum high_school size from the student table
 now again no system currently will support this
 however it is in the sql standard
 now one thing i want to mention about check constraints with subqueries is that they can be kind of deceptive
 and we can take a look_at the apply table again
 supposing this was in fact supported by a system
 it would check whenever we inserted a tuple into apply or it updated a student id in apply that the constraint holds
 but what it will not check is when things change in student
 so we could write this constraint and every time we do an insert or update and apply it could be verified but somebody could go and change the student table and delete a student id and then what we feel as the constraint here is no longer actually holding
 so it can be tricky to use those subqueries
 again when we do referential_integrity as in this example the referential_integrity system will take care of making sure the constraint holds
 but when we have an example like the one with the enrollments if we say change the high_school size in the student table it would not activate this constraint checking that's specified with the college table
 the last type of constraint i am going to show are general assertions
 general assertions are very powerful and they are in the sql standard but unfortunately they currently are not supported by any database system
 the first assertion i'm going to write is coming back to the issue of trying to declare or trying to enforce a key constraint without using the built in facilities
 let me just write the command here
 it says we're going to create a assertion called key
 notice that this assertion is not associated with a specific table
 although this assertion only talks about table t assertions can refer to any number of tables in the database
 the way an assertion works is we create an assertion and we give it a name and the reason for this is so we can delete it later if we wish
 then the keyword check appears
 and then we write a condition
 and the conditions can be quite complicated
 the assertion is saying that this condition written in sql like language must always be true on the database
 so the particular condition that i've put in this first example is a condition we use to check whether attribute a is a key in table t it says that the number of distinct values in attribute a must be equal to the number tuples in t now i can try to run this but i guarantee you that it's not supported
 let's look_at some other example assertions we might write if they were supported
 here's an example that implements this referential_integrity that i was describing earlier
 this referential_integrity constraint is saying that the student ids in the apply table must also exist in the student table
 now when we write an assertion of that form we tend to often write it in the negative form specifically we say that it's not the case that something bad happens
 it's not the case that there's some tuple in apply where the student id is not in the student table
 you can try on your own to write this in a more positive fashion but you'll actually find that using sql constructs it's not possible
 it's actually very common for assertions to specify the bad thing in a subquery and then write not exists
 as a final example let's suppose that we require that the average gpa of students who are accepted to college is greater than

 we can write that as an assertion pretty much exactly as i just described it
 we take the average gpa of students where their id is among the ids in the apply relation where the decision was yes and our assertion states that that average must be greater than so so far i've described how assertions are created
 let me just briefly mention how they are checked or how they would be checked if they were implemented
 any system that implements this very general form of assertion must determine every possible change to the database that could violate the assertion
 in this case modifying a gpa modifying a student id inserting or deleting from students or apply could all potentially violate the constraint
 and in that case after each of those types of modifications to the database the system would need to check the constraint make sure that it's still satisfied and if not generate an error and disallow the database change
 so i've only talked about creating assertions
 let me just talk very briefly about how a system would enforce general assertions of this form if it supported them
 what the system needs to do is monitor every possible change to the database that could cause the assertion to become violated
 so we take a look_at this particular assertion it could become violated if we changed the student gpa
 if we inserted a student even if we deleted a student or if we inserted an application that was now having a decision of yes or updated the application status
 so all of those changes have to be monitored by the system the constraint has to be checked after the change and if the constraint is no longer satisfied an error is generated and the change is undone
