 in this video we'll delve into more detail about the properties of transactions
 as a reminder transactions are a concept that's been introduced as a solution to both the concurrency control problem and the system failure problem in databases
 specifically a transaction is a sequence of operations that are treated as a unit
 transactions appear to run in isolation even if many clients are operating on a database at the same time
 and further more if there is a system failure in unexpected software hardware or power failure every transactions changes that were issued to the database are either reflected entirely or not at all
 every database connoisseur knows that transaction support what are known as the acid properties
 although not everybody always remembers what a stands for atomicity c stands for consistency i stands for isolation and d stands for for durability
 and we're going to talk about each of these four properties in turn
 we're going to talk about isolation first
 we're going to talk about durability second then we'll next talk about atomicity and we'll conclude talking about consistency
 so here's the deal with isolation
 we'll have a whole bunch of clients operating on our database and we'd kind of like each client to imagine that they're operating on their own
 so as we discussed in the previous video each client issues to the database system a sequence of transactions
 so this first client might be issuing first transaction t then t t and so on
 over here we have t t t and as a reminder each transaction itself can be a sequence of statements
 so this might be statement one statement two statement three and so on and then those statements will be treated as a unit
 so the isolation property is implemented by a very specific formal notion called serializability
 what serializability says is that the operations within transactions may be interleaved across clients but the execution of those operations must be equivalent to some sequential serial orderof all the transactions
 so for our example over here the system itself may execute all of the statements within each transaction and over here concurrently but it has to guarantee that the behavior against the database is equivalent to some sequence in order again
 so perhaps the equivalent sequential order will be as if the system first did transaction t then may t t and t maybe back to t and so on
 and again the system has to guarantee that the state of the database at this point in time even if its internally the statements within any of these transactions looks as if these transactions executed in order
